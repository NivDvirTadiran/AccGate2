{"version":3,"sources":["webpack:///$_lazy_route_resources|lazy|groupOptions: {}|namespace object","webpack:///src/app/_helpers/auth.interceptor.ts","webpack:///src/app/_services/auth.service.ts","webpack:///src/app/_services/token-storage.service.ts","webpack:///src/app/_services/user.service.ts","webpack:///src/app/_shared/event-bus.service.ts","webpack:///src/app/_shared/event.class.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.config.ts","webpack:///src/app/app.module.ts","webpack:///src/app/board-admin/board-admin.component.html","webpack:///src/app/board-admin/board-admin.component.ts","webpack:///src/app/board-moderator/board-moderator.component.ts","webpack:///src/app/board-moderator/board-moderator.component.html","webpack:///src/app/board-user/board-user.component.ts","webpack:///src/app/board-user/board-user.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login2/login-main/button-fortest/button-fortest.component.ts","webpack:///src/app/login2/login-main/login-main.component.ts","webpack:///src/app/login2/login-main/login-main.component.html","webpack:///src/app/login2/login-main/register-form2/register-form2.component.ts","webpack:///src/app/login2/login-main/register-form2/register-form2.component.html","webpack:///src/app/login2/login2-routing.module.ts","webpack:///src/app/login2/login2.component.ts","webpack:///src/app/login2/login2.component.html","webpack:///src/app/login2/login2.module.ts","webpack:///src/app/login2/logtest/logtest.component.ts","webpack:///src/app/login2/logtest/logtest.component.html","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/register-form/register-form.component.html","webpack:///src/app/login/register-form/register-form.component.ts","webpack:///src/app/login/replace-pass-form/replace-pass-form.component.html","webpack:///src/app/login/replace-pass-form/replace-pass-form.component.ts","webpack:///src/app/pipes/api-error-message.pipe.ts","webpack:///src/app/pipes/login-error-message.pipe.ts","webpack:///src/app/profile2/profile2.component.ts","webpack:///src/app/profile2/profile2.component.html","webpack:///src/app/profile/profile.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/storybook/storybook.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///src/stories/app-menu/app-menu.component.ts","webpack:///src/stories/app-menu/app-menu.component.html","webpack:///src/stories/buttons/button-apps/button-apps.component.ts","webpack:///src/stories/buttons/button-apps/button-apps.component.html","webpack:///src/stories/buttons/button-continue/button-continue.component.ts","webpack:///src/stories/buttons/button-continue/button-continue.component.html","webpack:///src/stories/buttons/button-ex/button-ex.component.ts","webpack:///src/stories/buttons/button-ex/button-ex.component.html","webpack:///src/stories/buttons/button-example/button.component.ts","webpack:///src/stories/buttons/button-globe/button-globe.component.ts","webpack:///src/stories/buttons/button-globe/button-globe.component.html","webpack:///src/stories/buttons/button-language/button-language.component.ts","webpack:///src/stories/buttons/button-language/button-language.component.html","webpack:///src/stories/buttons/button-successfully/button-successfully.component.ts","webpack:///src/stories/buttons/button-successfully/button-successfully.component.html","webpack:///src/stories/buttons/button-tadiran/button-tadiran.component.ts","webpack:///src/stories/cards/card.component.ts","webpack:///src/stories/cards/card.component.html","webpack:///src/stories/forms/login-form/login-form-component.html","webpack:///src/stories/forms/login-form/login-form-component.ts","webpack:///src/stories/forms/registry-form/registry-form.component.html","webpack:///src/stories/forms/registry-form/registry-form.component.ts","webpack:///src/stories/inputs/story-input.component.html","webpack:///src/stories/inputs/story-input.component.ts","webpack:///src/stories/pages/background1/background1Component.ts","webpack:///src/stories/pages/background1/background1Component.html","webpack:///src/stories/task-list/task-list.component.html","webpack:///src/stories/task-list/task-list.component.ts","webpack:///src/stories/task/task.component.html","webpack:///src/stories/task/task.component.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","TOKEN_HEADER_KEY","AuthInterceptor","tokenService","authService","isRefreshing","refreshTokenSubject","BehaviorSubject","next","authReq","token","getToken","addTokenHeader","handle","pipe","catchError","error","HttpErrorResponse","url","includes","status","handle401Error","throwError","request","getRefreshToken","refreshToken","switchMap","saveToken","accessToken","saveRefreshToken","err","signOut","filter","take","clone","headers","set","subscribe","data","authInterceptorProviders","provide","HTTP_INTERCEPTORS","useClass","multi","AUTH_API","AppConfig","httpOptions","HttpHeaders","AuthService","http","username","password","post","email","phone","responseType","oldPassword","confirmPassword","roles","webapp","webApp","toPromise","TOKEN_KEY","REFRESHTOKEN_KEY","USER_KEY","TokenStorageService","window","sessionStorage","clear","removeItem","setItem","user","getUser","saveUser","getItem","JSON","stringify","parse","API_URL","UserService","get","EventBusService","subject$","Subject","event","eventName","action","name","map","EventData","value","routes","path","component","HomeComponent","LoginComponent","loadChildren","m","Login2Module","RegisterComponent","RegisterFormComponent","ProfileComponent","BoardUserComponent","BoardModeratorComponent","BoardAdminComponent","redirectTo","pathMatch","AppModule","AppRoutingModule","RouterModule","AppComponent","tokenStorageService","eventBusService","isLoggedIn","showAdminBoard","showModeratorBoard","eventBusSub","on","logout","unsubscribe","parsedUrl","URL","location","href","hostname","port","protocol","APP_CONFIG","InjectionToken","accServer","ACCWEBServers","endpoints","BrowserModule","HttpClientModule","NgbDatepickerModule","MdbAccordionModule","MdbCarouselModule","MdbCheckboxModule","MdbCollapseModule","MdbDropdownModule","MdbFormsModule","MdbModalModule","MdbPopoverModule","MdbRadioModule","MdbRangeModule","MdbRippleModule","MdbScrollspyModule","MdbTabsModule","MdbTooltipModule","BrowserAnimationsModule","ModalModule","ButtonsModule","MDBBootstrapModule","StorybookModule","ReplacePassFormComponent","ApiErrorMessagePipe","LoginErrorMessagePipe","userService","form","isSuccessful","isSignUpFailed","errorMessage","rolesList","getAdminBoard","content","message","push","register","console","log","getModeratorBoard","getUserBoard","emit","ACC_VERSION","getPublicContent","getAccVersion","ButtonFortestComponent","primary","size","label","onClick","EventEmitter","mode","LoginMainComponent","renderer","registerFormDialog","tokenStorage","router","isLoginFailed","loginErrorMessage","storyInputsInOrder","title","state","icon","type","placeholder","loginForm","FormGroup","FormControl","Validators","registerFormDialogRef","open","userName","afterClosed","result","reset","credentials","warn","login","profile2","openRegisterForm","val","undefined","navigate","reload","onSubmit","RegisterForm2Component","dialogRef","isRegSuccess","isRegFailed","submitted","empList","apiResponse","errorFieldSubmitted","closeResult","registerForm","toString","RegExp","close","getRawValue","errorResponse","MAT_DIALOG_DATA","LogtestComponent","Login2RoutingModule","Login2Component","MatDialogModule","MatButtonModule","TaskComponent","TaskListComponent","registerFormService","replacePassFormService","registerFormRef","replacePassFormRef","showPass","openReplacePassword","onClose","reloadPage","test","modalRef","validationForm","replacePassForm","dataToArray","split","item","trim","join","Profile2Component","currentUser","origin","windowObjectReference","document","getElementById","innerHTML","promise","reject","appRequest","values","webappURLPrefix","newAccessToken","newRefreshToken","newCurrentUser","webapptab","openNewWinForApp","openNewTabForApp","CommonModule","FormsModule","ReactiveFormsModule","ButtonGlobeComponent","ButtonTadiranComponent","ButtonLanguageComponent","ButtonContinueComponent","ButtonExComponent","ButtonAppsComponent","ButtonSuccessfullyComponent","AppMenuComponent","StoryInputComponent","environment","production","enableProdMode","platformBrowser","bootstrapModule","onPinInput","onArchiveInput","arr","initialTasks","t","filteredTasks","application","gallery","galleryMode","ButtonComponent","CardComponent","LoginFormComponent","mForm","newItemEvent","RegistryFormComponent","changeLog","sendRegReq","clickXButton","changes","previousValue","currentValue","loadSuccessfullyLoggedIn","setProperty","mainHeader","nativeElement","storyInput","currentForm","alertType","Background1Component","onArchiveTask","onPinTask","tasksInOrder","loading","onArchive"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 98255;\nmodule.exports = webpackEmptyAsyncContext;","import { HTTP_INTERCEPTORS, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\n\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\r\n\r\n const TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\r\n//const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  private isRefreshing = false;\r\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  constructor(private tokenService: TokenStorageService, private authService: AuthService) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    let authReq = req;\r\n    const token = this.tokenService.getToken();\r\n    if (token != null) {\r\n      authReq = this.addTokenHeader(req, token);\r\n      // for Spring Boot back-end\r\n      // authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n\r\n      // for Node.js Express back-end\r\n      //authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\r\n    }\r\n    return next.handle(authReq).pipe(catchError(error => {\r\n      if (error instanceof HttpErrorResponse && !authReq.url.includes('auth/signin') && error.status === 401) {\r\n        return this.handle401Error(authReq, next);\r\n      }\r\n      return throwError(error);\r\n    }));\r\n  }\r\n\r\n\r\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshTokenSubject.next(null);\r\n      const token = this.tokenService.getRefreshToken();\r\n      if (token)\r\n        return this.authService.refreshToken(token).pipe(\r\n          switchMap((token: any) => {\r\n            this.isRefreshing = false;\r\n            this.tokenService.saveToken(token.accessToken);\r\n            this.tokenService.saveRefreshToken(token.refreshToken);\r\n            this.refreshTokenSubject.next(token.accessToken);\r\n\r\n            return next.handle(this.addTokenHeader(request, token.accessToken));\r\n          }),\r\n          catchError((err) => {\r\n            this.isRefreshing = false;\r\n\r\n            this.tokenService.signOut();\r\n            return throwError(err);\r\n          })\r\n        );\r\n    }\r\n    return this.refreshTokenSubject.pipe(\r\n      filter(token => token !== null),\r\n      take(1),\r\n      switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n    );\r\n  }\r\n  private addTokenHeader(request: HttpRequest<any>, token: string) {\r\n    /* for Spring Boot back-end */\r\n     return request.clone({ headers: request.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n    /* for Node.js Express back-end */\r\n    //return request.clone({ headers: request.headers.set(TOKEN_HEADER_KEY, token) });\r\n  }\r\n/*\r\n  public forseRefreshToken2() {\r\n    const token = this.tokenService.getRefreshToken();\r\n    if (token)\r\n      this.authService.refreshToken(token).pipe(\r\n        switchMap((token: any) => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.saveToken(token.accessToken);\r\n          this.refreshTokenSubject.next(token.accessToken);\r\n\r\n          filter(token => token !== null),\r\n            take(1),\r\n            switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n        }),\r\n        catchError((err) => {\r\n          this.isRefreshing = false;\r\n\r\n          this.tokenService.signOut();\r\n          return throwError(err);\r\n        })\r\n      );\r\n  }\r\n*/\r\n  public forseRefreshToken(): void {\r\n    const token = this.tokenService.getRefreshToken();\r\n    if (token)\r\n      this.authService.refreshToken(token).subscribe(\r\n        data => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.saveToken(data.accessToken);\r\n          this.refreshTokenSubject.next(data.accessToken);\r\n\r\n\r\n        },\r\n        (err) => {\r\n          this.isRefreshing = false;\r\n\r\n          this.tokenService.signOut();\r\n          return throwError(err);\r\n        }\r\n      );\r\n  }\r\n}\r\n\r\nexport const authInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n];\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AppConfig} from \"../app.config\";\r\n\r\n\r\nconst AUTH_API = AppConfig.accServer.ACCWEBServers+'/accGate/auth/';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signin', {\r\n      username,\r\n      password\r\n    }, httpOptions);\r\n  }\r\n\r\n  registerForm(username: string, email: string, password: string, phone: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'register-form', {\r\n      username,\r\n      email,\r\n      password,\r\n      phone,\r\n    }, {responseType: 'text'});\r\n  }\r\n\r\n  replacePassForm(username: string, oldPassword: string, password: string, confirmPassword: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'replace-pass-form', {\r\n      username,\r\n      oldPassword,\r\n      password,\r\n      confirmPassword,\r\n    }, {responseType: 'text'});\r\n  }\r\n\r\n  register(username: string, email: string, password: string, roles: Array<String>): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signup', {\r\n      username,\r\n      email,\r\n      password,\r\n      roles,\r\n    }, httpOptions);\r\n  }\r\n\r\n  getToken(url: string, username: string, email: string, password: string): Observable<any> {\r\n    return this.http.post(url, {\r\n      username,\r\n      email,\r\n      password\r\n    }, httpOptions);\r\n  }\r\n\r\n  // login, register\r\n  refreshToken(token: string): Observable<any>  {\r\n    return this.http.post(AUTH_API + 'refreshtoken', {\r\n      refreshToken: token\r\n    }, httpOptions);\r\n  }\r\n\r\n  // login, register\r\n  webapptab(token: string, webapp: string): Promise<any>  {\r\n    return this.http.post(AUTH_API + 'webapptab', {\r\n      refreshToken: token,\r\n      webApp: webapp\r\n    }, httpOptions).toPromise();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nconst TOKEN_KEY = 'token';\r\nconst REFRESHTOKEN_KEY = 'auth-refreshtoken';\r\nconst USER_KEY = 'user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenStorageService {\r\n  constructor() { }\r\n\r\n  signOut(): void {\r\n    window.sessionStorage.clear();\r\n  }\r\n\r\n  public saveToken(token: string): void {\r\n    window.sessionStorage.removeItem(TOKEN_KEY);\r\n    window.sessionStorage.setItem(TOKEN_KEY, token);\r\n    const user = this.getUser();\r\n    if (user.id) {\r\n      this.saveUser({ ...user, accessToken: token });\r\n    }\r\n  }\r\n\r\n  public getToken(): string | null {\r\n    return window.sessionStorage.getItem(TOKEN_KEY);\r\n  }\r\n\r\n  public saveRefreshToken(token: string): void {\r\n    window.sessionStorage.removeItem(REFRESHTOKEN_KEY);\r\n    window.sessionStorage.setItem(REFRESHTOKEN_KEY, token);\r\n    const user = this.getUser();\r\n    if (user.id) {\r\n      user.refreshToken = token;\r\n      this.saveUser(user);\r\n    }\r\n  }\r\n  public getRefreshToken(): string | null {\r\n    return window.sessionStorage.getItem(REFRESHTOKEN_KEY);\r\n  }\r\n\r\n  public saveUser(user: any): void {\r\n    window.sessionStorage.removeItem(USER_KEY);\r\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\r\n  }\r\n\r\n  public getUser(): any {\r\n    const user = window.sessionStorage.getItem(USER_KEY);\r\n    if (user) {\r\n      return JSON.parse(user);\r\n    }\r\n    return {};\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AppConfig} from \"../app.config\";\r\n\r\nconst API_URL = AppConfig.accServer.ACCWEBServers+'/accGate/test/';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getPublicContent(): Observable<any> {\r\n    return this.http.get(API_URL + 'all', { responseType: 'text' });\r\n  }\r\n\r\n  getAccVersion(): Observable<any> {\r\n    return this.http.get(API_URL + 'accversion', { responseType: 'text' });\r\n  }\r\n\r\n  getUserBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'user', { responseType: 'text' });\r\n  }\r\n\r\n  getModeratorBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'mod', { responseType: 'text' });\r\n  }\r\n\r\n  getAdminBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'admin', { responseType: 'text' });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { EventData } from './event.class';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventBusService {\r\n  private subject$ = new Subject<EventData>();\r\n  constructor() { }\r\n  emit(event: EventData) {\r\n    this.subject$.next(event);\r\n  }\r\n  on(eventName: string, action: any): Subscription {\r\n    return this.subject$.pipe(\r\n      filter((e: EventData) => e.name === eventName),\r\n      map((e: EventData) => e[\"value\"])).subscribe(action);\r\n  }\r\n}\r\n","export class EventData {\r\n  name: string;\r\n  value: any;\r\n  constructor(name: string, value: any) {\r\n    this.name = name;\r\n    this.value = value;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { BoardUserComponent } from './board-user/board-user.component';\r\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\r\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\r\nimport { AppRoutingGuard } from './app-routing.guard';\r\n//import { Login2RoutingModule } from \"./login-main/login-main-routing.module\";\r\nimport Profile2Component from \"./profile2/profile2.component\";\r\nimport { RegisterComponent } from \"./register/register.component\";\r\n//import { Register2Component } from \"./register2/register2.component\";\r\nimport { RegisterFormComponent } from \"./login/register-form/register-form.component\";\r\nimport RegisterForm2Component from \"./login2/login-main/register-form2/register-form2.component\";\r\nimport {Login2Component} from \"./login2/login2.component\";\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'login2', loadChildren: () => import('./login2/login2.module').then(m => m.Login2Module), },\r\n  { path: 'register', component: RegisterComponent },\r\n  //{ path: 'register2', component: Register2Component },\r\n  { path: 'registeform', component: RegisterFormComponent },\r\n  //{ path: 'registerform2', component: RegisterForm2Component },\r\n  { path: 'profile', component: ProfileComponent/*, canActivate: [AppRoutingGuard] */},\r\n  { path: 'profile2', component: Profile2Component/*, canActivate: [AppRoutingGuard] */},\r\n  { path: 'user', component: BoardUserComponent },\r\n  { path: 'mod', component: BoardModeratorComponent },\r\n  { path: 'admin', component: BoardAdminComponent },\r\n  { path: '', redirectTo: 'login2', pathMatch: 'full' },\r\n  { path: 'home', loadChildren: () => import('./app.module').then(m => m.AppModule),},\r\n  { path: '**', redirectTo: 'login2',  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes/*, {useHash: true}*/)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit, OnDestroy  } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { TokenStorageService } from './_services/token-storage.service';\r\nimport { EventBusService } from './_shared/event-bus.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  private roles: string[] = [];\r\n  public isLoggedIn = false;\r\n  showAdminBoard = false;\r\n  showModeratorBoard = false;\r\n  username?: string;\r\n  eventBusSub?: Subscription;\r\n  title?: 'accGate';\r\n\r\n  constructor(private tokenStorageService: TokenStorageService, private eventBusService: EventBusService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\r\n\r\n    if (this.isLoggedIn) {\r\n      const user = this.tokenStorageService.getUser();\r\n      this.roles = user.roles;\r\n\r\n      this.showAdminBoard = (this.roles.includes('Admin') || this.roles.includes('SupervisorAdmin'));\r\n      this.showModeratorBoard = this.roles.includes('SupervisorMonitor');\r\n\r\n      this.username = user.username;\r\n    }\r\n    this.eventBusSub = this.eventBusService.on('logout', () => {\r\n      this.logout();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.eventBusSub)\r\n      this.eventBusSub.unsubscribe();\r\n  }\r\n\r\n  logout(): void {\r\n    this.tokenStorageService.signOut();\r\n    this.isLoggedIn = false;\r\n    this.roles = [];\r\n    this.showAdminBoard = false;\r\n    this.showModeratorBoard = false;\r\n    //window.location.reload();\r\n  }\r\n}\r\n","\r\n<router-outlet  id=\"app\" ></router-outlet>\r\n\r\n<!--div id=\"app\">\r\n  <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\r\n\r\n    <a href=\"#\" class=\"navbar-brand\">\r\n      <img _ngcontent-c0=\"accGate\" class=\"nav-img\" srcset=\"./assets/images/TadiranTelecom2.webp\"  width=\"56\"\r\n           height=\"56\"><label>accGate</label>\r\n    </a>\r\n    <ul class=\"navbar-nav mr-auto\" routerLinkActive=\"active\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/login-main\" class=\"nav-link\" routerLink=\"login-main\">Page </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/home\" class=\"nav-link\" routerLink=\"home\">Home </a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showAdminBoard\">\r\n        <a href=\"/admin\" class=\"nav-link\" routerLink=\"admin\">Admin Board</a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showModeratorBoard\">\r\n        <a href=\"/mod\" class=\"nav-link\" routerLink=\"mod\">Moderator Board</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/user\" class=\"nav-link\" *ngIf=\"isRegSuccess\" routerLink=\"user\">User</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"!isRegSuccess\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/register\" class=\"nav-link\" routerLink=\"register\">Sign Up</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/login\" class=\"nav-link\" routerLink=\"login\">Login</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"isRegSuccess\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/profile\" class=\"nav-link\" routerLink=\"profile\">{{ username }}</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href class=\"nav-link\" (click)=\"logout()\">LogOut</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div-->\r\n","import {InjectionToken} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n// parse ful url to ip,port, params\r\nvar parsedUrl = new URL(window.location.href);\r\nvar url = parsedUrl.hostname;\r\nvar port = parsedUrl.port;\r\nvar protocol = parsedUrl.protocol;\r\nconst AUTH_API = protocol + \"//\" + url + \":\" + port;\r\n\r\nexport let APP_CONFIG = new InjectionToken('app.config');\r\nexport const AppConfig = {\r\n  accServer: {\r\n    ACCWEBServers: AUTH_API //'https://172.28.8.245:8445'\r\n  },\r\n  endpoints: {\r\n\r\n    TOKEN_KEY: 'token',\r\n    REFRESHTOKEN_KEY: 'auth-refreshtoken',\r\n    USER_KEY: 'user'\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n//import {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport Profile2Component from './profile2/profile2.component';\r\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\r\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\r\nimport { BoardUserComponent } from './board-user/board-user.component';\r\n\r\nimport { authInterceptorProviders, AuthInterceptor } from './_helpers/auth.interceptor';\r\nimport {NgbDatepickerModule} from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { MdbAccordionModule } from 'mdb-angular-ui-kit/accordion';\r\nimport { MdbCarouselModule } from 'mdb-angular-ui-kit/carousel';\r\nimport { MdbCheckboxModule } from 'mdb-angular-ui-kit/checkbox';\r\nimport { MdbCollapseModule } from 'mdb-angular-ui-kit/collapse';\r\nimport { MdbDropdownModule } from 'mdb-angular-ui-kit/dropdown';\r\nimport { MdbFormsModule } from 'mdb-angular-ui-kit/forms';\r\nimport { MdbModalModule } from 'mdb-angular-ui-kit/modal';\r\nimport { MdbPopoverModule } from 'mdb-angular-ui-kit/popover';\r\nimport { MdbRadioModule } from 'mdb-angular-ui-kit/radio';\r\nimport { MdbRangeModule } from 'mdb-angular-ui-kit/range';\r\nimport { MdbRippleModule } from 'mdb-angular-ui-kit/ripple';\r\nimport { MdbScrollspyModule } from 'mdb-angular-ui-kit/scrollspy';\r\nimport { MdbTabsModule } from 'mdb-angular-ui-kit/tabs';\r\nimport { MdbTooltipModule } from 'mdb-angular-ui-kit/tooltip';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ModalModule, TooltipModule, PopoverModule, ButtonsModule, MDBBootstrapModule } from 'angular-bootstrap-md';\r\nimport { RegisterFormComponent } from './login/register-form/register-form.component';\r\nimport {ReplacePassFormComponent} from \"./login/replace-pass-form/replace-pass-form.component\";\r\nimport {ApiErrorMessagePipe} from \"./pipes/api-error-message.pipe\";\r\nimport {LoginErrorMessagePipe} from \"./pipes/login-error-message.pipe\";\r\nimport Button from '../stories/buttons/button-example/button.component'\r\n\r\n//import {TaskListComponent} from '../stories/task-list/task-list.component'\r\nimport {Login2Module} from \"./login2/login2.module\";\r\nimport {StorybookModule} from \"./storybook/storybook.module\";\r\n\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        LoginComponent,\r\n        RegisterComponent,\r\n        //Register2Component,\r\n        HomeComponent,\r\n        ProfileComponent,\r\n        Profile2Component,\r\n        BoardAdminComponent,\r\n        BoardModeratorComponent,\r\n        BoardUserComponent,\r\n        RegisterFormComponent,\r\n        ReplacePassFormComponent,\r\n        ApiErrorMessagePipe,\r\n        LoginErrorMessagePipe,\r\n\r\n\r\n\r\n    ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    NgbDatepickerModule,\r\n    MdbAccordionModule,\r\n    MdbCarouselModule,\r\n    MdbCheckboxModule,\r\n    MdbCollapseModule,\r\n    MdbDropdownModule,\r\n    MdbFormsModule,\r\n    MdbModalModule,\r\n    MdbPopoverModule,\r\n    MdbRadioModule,\r\n    MdbRangeModule,\r\n    MdbRippleModule,\r\n    MdbScrollspyModule,\r\n    MdbTabsModule,\r\n    MdbTooltipModule,\r\n    //MdbValidationModule,\r\n    BrowserAnimationsModule,\r\n    ModalModule,\r\n    ButtonsModule,\r\n    MDBBootstrapModule.forRoot(),\r\n    Login2Module,\r\n    StorybookModule\r\n  ],\r\n  providers: [\r\n    authInterceptorProviders,\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","<div class=\"container\">\r\n  <header class=\"jumbotron\">\r\n    <p>{{ content }}</p>\r\n  </header>\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card card-container\">\r\n      <img\r\n        id=\"profile-img\"\r\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n        class=\"profile-img-card\"\r\n      />\r\n      <form\r\n        *ngIf=\"!isSuccessful\"\r\n        name=\"form\"\r\n        (ngSubmit)=\"f.form.valid && onSubmit()\"\r\n        #f=\"ngForm\"\r\n        novalidate\r\n      >\r\n        <div class=\"form-group\">\r\n          <label for=\"userName\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" name=\"userName\" [(ngModel)]=\"form.userName\"\r\n                 required minlength=\"3\" maxlength=\"20\" #userName=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"userName.errors && f.submitted\">\r\n            <div *ngIf=\"userName.errors.required\">Username is required</div>\r\n            <div *ngIf=\"userName.errors.minlength\">\r\n              Username must be at least 3 characters\r\n            </div>\r\n            <div *ngIf=\"userName.errors.maxlength\">\r\n              Username must be at most 20 characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"email\">Email</label>\r\n          <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\"\r\n                 required email #email=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\r\n            <div *ngIf=\"email.errors.required\">Email is required</div>\r\n            <div *ngIf=\"email.errors.email\">\r\n              Email must be a valid email address\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"form.password\"\r\n                 required minlength=\"6\" #password=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"password.errors && f.submitted\">\r\n            <div *ngIf=\"password.errors.required\">Password is required</div>\r\n            <div *ngIf=\"password.errors.minlength\">\r\n              Password must be at least 6 characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"privilege\">Privilege Level</label>\r\n          <select type=\"privilege\" class=\"form-control\" name=\"privilege\" id=\"pet-select\"\r\n                  [(ngModel)]=\"form.roles\" required #roles=\"ngModel\">\r\n            <option value=\"\">--Please choose an option--</option>\r\n            <option value=\"admin\">Admin</option>\r\n            <option value=\"mod\">Moderator</option>\r\n            <option value=\"user\">User</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <button class=\"btn btn-primary btn-block\">Sign Up</button>\r\n        </div>\r\n\r\n        <div class=\"alert alert-warning\" >\r\n          Roles: <br />{{ rolesList.toString() }}\r\n        </div>\r\n        <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\r\n          Signup failed!<br />{{ errorMessage }}\r\n        </div>\r\n      </form>\r\n\r\n      <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n        Your registration is successful!\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\nimport {AuthService} from \"../_services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'app-board-admin',\r\n  templateUrl: './board-admin.component.html',\r\n  styleUrls: ['./board-admin.component.css']\r\n})\r\nexport class BoardAdminComponent implements OnInit {\r\n  content?: string;\r\n  form: any = {\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null,\r\n    roles: null,\r\n  };\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  errorMessage = '';\r\n  rolesList: Array<String> = [];\r\n\r\n  constructor(private userService: UserService, private authService: AuthService) {\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getAdminBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, email, password, roles } = this.form;\r\n    this.rolesList.push(roles);\r\n\r\n    this.authService.register(username, email, password, this.rolesList).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isSignUpFailed = true;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-board-moderator',\r\n  templateUrl: './board-moderator.component.html',\r\n  styleUrls: ['./board-moderator.component.css']\r\n})\r\nexport class BoardModeratorComponent implements OnInit {\r\n  content?: string;\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getModeratorBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <header class=\"jumbotron\">\r\n    <p>{{ content }}</p>\r\n  </header>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\nimport { EventBusService } from '../_shared/event-bus.service';\r\nimport { EventData } from '../_shared/event.class';\r\n\r\n@Component({\r\n  selector: 'app-board-user',\r\n  templateUrl: './board-user.component.html',\r\n  styleUrls: ['./board-user.component.css']\r\n})\r\nexport class BoardUserComponent implements OnInit {\r\n  content?: string;\r\n\r\n  constructor(private userService: UserService, private eventBusService: EventBusService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getUserBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = err.error.message || err.error || err.message;\r\n        if (err.status === 403)\r\n          this.eventBusService.emit(new EventData('logout', null));\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <br>\r\n  <header class=\"background jumbotron  \">\r\n    <h1 class=\"font_0\">\r\n      <span class=\"\" style=\"font-size:44px;\">\r\n        <span>{{ content }}</span>\r\n      </span>\r\n    </h1>\r\n  </header>\r\n\r\n  <embed type=\"text/html\" src=\"https://www.tadirantele.com/\" height=\"300px\" width=\"100%\" >\r\n\r\n  <h2>Iframe - Target for a Link</h2>\r\n.\r\n  <iframe src=\"https://localhost:8445/accRealTime\" sandbox=\"allow-top-navigation-by-user-activation allow-same-origin allow-scripts allow-popups allow-forms\"  name=\"iframe_a\" height=\"300px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe>\r\n\r\n\r\n\r\n\r\n  <p><a href=\"https://172.28.8.245:8443/aeonix/mainForm.jsf\" target=\"iframe_a\">aeonix</a></p>\r\n  <p><a href=\"https://en.wikipedia.org/wiki/Avocado\" id=\"testid\" target=\"iframe_a\">wikipedia</a></p>\r\n  <p><a href=\"https://172.28.1.130:8445/accRealTime\" target=\"iframe_a\">accRealTime</a></p>\r\n  <p>When the target attribute of a link matches the name of an iframe, the link will open in the iframe.</p>\r\n\r\n    <!--iframe src=\"https://172.28.1.130:8445/accRealTime\" name=\"iframe_a\" height=\"300px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe-->\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  public ACC_VERSION: string = 'ACC_VERSION';\r\n  content?: string = 'Aeonix | Tadiran Telecom';\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getPublicContent().subscribe(\r\n      data => { this.content = data; },\r\n      err => { this.content = JSON.parse(err.error).message; }\r\n    );\r\n    this.userService.getAccVersion().subscribe(\r\n      data => { this.ACC_VERSION = data; },\r\n      err => { this.ACC_VERSION = JSON.parse(err.error).message; }\r\n    );\r\n  }\r\n}\r\n","<div class=\"container \">\r\n  <br>\r\n  <header class=\"background jumbotron  \">\r\n    <h1 class=\"font_0\">\r\n      <span class=\"\" style=\"font-size:44px;\">\r\n        <dl>\r\n          <dt><span>{{ content }}</span></dt>\r\n          <dd><span>{{ ACC_VERSION }}</span></dd>\r\n        </dl>\r\n      </span>\r\n    </h1>\r\n  </header>\r\n\r\n  <storybook-button-fortest></storybook-button-fortest>\r\n  <aside>\r\n    <!-- Card -->\r\n    <div class=\"fa-pull-right bg-image card shadow-1-strong card-img\">\r\n      <div class=\"card-body text-white\">\r\n        <h5 class=\"card-title\">Card title</h5>\r\n        <p class=\"card-text\">\r\n          Some quick example text to build on the card title and make up the bulk of the\r\n          card's content.\r\n        </p>\r\n        <a href=\"#!\" class=\"btn btn-outline-light\">Button</a>\r\n      </div>\r\n    </div>\r\n    <!-- Card -->\r\n  </aside>\r\n\r\n  <div class=\"alert alert-success  \" role=\"alert\">\r\n    <h4 class=\"alert-heading \">Well done!</h4>\r\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\r\n    <hr>\r\n    <p class=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\r\n  </div>\r\n\r\n</div>\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-fortest',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button-fortest.css'],\n})\nexport  class ButtonFortestComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n","import {Component, ElementRef, Inject, Input, OnInit, Renderer2, ViewChild} from '@angular/core';\nimport { StoryInput } from \"src/stories/inputs/story-input.model\";\nimport {AuthService} from \"src/app/_services/auth.service\";\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {TokenStorageService} from \"src/app/_services/token-storage.service\";\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {Router} from \"@angular/router\";\nimport RegisterForm2Component from \"./register-form2/register-form2.component\";\nimport {RegisterFormComponent} from \"../../login/register-form/register-form.component\";\nimport {ReplacePassFormComponent} from \"../../login/replace-pass-form/replace-pass-form.component\";\n\nexport interface DialogData {\n  username: string;\n  password: string;\n}\n\n//import {Default} from \"src/stories/inputs/story-input.stories\";\n\n\n@Component({\n  selector: 'login-main',\n  templateUrl: './login-main.component.html',\n  styleUrls: ['./login-main.component.scss']\n})\nexport class LoginMainComponent implements OnInit {\n\n  public isLoggedIn = false;\n  isLoginFailed = false;\n  loginErrorMessage = '';\n  roles: string[] = [];\n\n\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  storyInputsInOrder: StoryInput[]  = [\n    { /*...Default.args?.['storyInput'],*/ id: '1', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez' },\n    { /*...Default.args?.['storyInput'],*/ id: '2', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password'  },\n  ];\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = true;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  background?: string;\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Login2Component';\n\n  /*user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n\n  }*/\n\n  loginForm: FormGroup;\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-page2--primary' : 'storybook-page2--secondary';\n\n    return ['storybook-page2', mode];\n  }\n\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\n\n\n  constructor(private renderer: Renderer2, public registerFormDialog: MatDialog, public authService: AuthService,\n              private tokenStorage: TokenStorageService,\n              private router: Router,) {\n    this.loginForm = new FormGroup({\n      username: new FormControl('ea3', Validators.minLength(2)),\n      password: new FormControl('T@diran2022', Validators.minLength(2)),\n    });\n  }\n\n\n  openRegisterForm() {\n    const registerFormDialogRef = this.registerFormDialog.open(RegisterForm2Component, {\n      data: {username: this.userName , password: this.password},\n    });\n\n\n    registerFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.password.reset();\n    });\n\n    return registerFormDialogRef.afterClosed().toPromise();\n  }\n\n\n  ngOnInit(): void {};\n\n\n\n  get userName(): AbstractControl {\n    return this.loginForm.get('username')?.value;\n  }\n\n  get password(): AbstractControl {\n    return this.loginForm.get('password')?.value;\n  }\n\n\n/*\n  openRegisterForm() {\n    return this.registerFormService.open(RegisterFormComponent).onClose.toPromise();\n  }\n\n  openReplacePassword() {\n    this.replacePassFormService.open(ReplacePassFormComponent);\n  }\n*/\n\n  onSubmit(credentials: any): void {\n    console.warn('Login Request from login-main!');\n    const { username, password } = credentials;\n\n    this.authService.login(username, password).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveRefreshToken(data.refreshToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.profile2();\n      },\n      err => {\n        switch (err.error.message) {\n          case \"Error: A registry process should be made!\":\n            //this.openRegisterForm().then(() => {this.openReplacePassword()});\n            //toPromise((data) => {this.openReplacePassword()});\n            this.openRegisterForm().then(\n              (val) => {\n                console.log(val);\n                switch (val) {\n                  case \"xbutton\":\n                    break;\n                  case \"Registration Complete\":\n                    //this.openReplacePassword();\n                    break;\n                  case undefined:\n                    //this.openReplacePassword();\n                    break;\n                  default:\n                }\n                return 'done2';\n              },\n              (err) => console.error(err));\n            break;\n          default:\n            this.loginErrorMessage = err.error.message;\n        }\n\n\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n\n  reloadPage(): void {\n    this.router.navigate(['/login-main']).then(() => {window.location.reload()});\n  }\n\n  profile2(): void {\n  this.router.navigate(['/profile2']);\n}\n\n}\n\n/*\n@Component({\n  selector: 'dialog-overview-example-dialog',\n  templateUrl: 'dialog-overview-example-dialog.html',\n})\nexport class DialogOverviewExampleDialog {\n  constructor(\n    public dialogRef: MatDialogRef<DialogOverviewExampleDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n*/\n\n/*\n@Component({\n  selector: 'password-dialog',\n  templateUrl: './password-dialog.html',\n})\nexport class ExtentionDialog {\n  constructor(\n    public dialogRef: MatDialogRef<ExtentionDialog>,\n    @Inject(MAT_DIALOG_DATA) public extensionData: {name: string, password: string;},\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n*/\n","\n<html>\n<head>\n  <style>\n\n  </style>\n  <title></title>\n</head>\n<body>\n\n<!--article><div class=\"Frame-1 relative\">\n<section class=\"relative \" Style=\"{ 'background': backgroundColor }\"-->\n\n<!--storybook-button-globe></storybook-button-globe-->\n\n<storybook-background1></storybook-background1>\n\n<!--button  (click)=\"openDialog()\">Pick one</button-->\n<button mat-raised-button (click)=\"openRegisterForm()\">Pick one</button>\n<button mat-raised-button (click)=\"profile2()\">profile2</button>\n\n\n<storybook-login-form\n  [isLoggedIn]=\"false\"\n  [mForm]=\"loginForm\"\n  [storyInputs]=\"storyInputsInOrder\"\n  (newItemEvent)=\"onSubmit($event)\"\n></storybook-login-form>\n\n\n<!--/section></div>\n</article-->\n\n</body>\n</html>\n\n\n","import {Component, ElementRef, EventEmitter, Inject, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {DialogData} from \"../login-main.component\";\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'register-form2',\r\n  templateUrl: './register-form2.component.html',\r\n  styleUrls: ['./register-form2.component.css']\r\n})\r\nexport default class RegisterForm2Component implements OnInit {\r\n  registerForm: FormGroup;\r\n  isRegSuccess = false;\r\n  isRegFailed = false;\r\n  submitted = false;\r\n  errorMessage = '';\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    { id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez' },\r\n    { id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password'  },\r\n    { id: '5', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'phone', placeholder: 'Ex: +972547762084'},\r\n    { id: '4', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com' },\r\n\r\n  ];\r\n\r\n  constructor(private authService: AuthService, private renderer: Renderer2,\r\n              public dialogRef: MatDialogRef<RegisterForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\r\n    this.registerForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n      password: new FormControl(data.password.toString(), Validators.minLength(2)),\r\n      email: new FormControl([data.username.toString() + '@domain.com'], Validators.email),\r\n      phone: new FormControl('123123131321', Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.isRegSuccess) {\r\n      this.dialogRef.close('Registration Complete');\r\n    }\r\n    else {\r\n      this.submitted = true;\r\n      const { username, password, email, phone } = this.registerForm.getRawValue();\r\n\r\n      this.authService.registerForm(username, email, password, phone).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.isRegSuccess = true;\r\n          this.isRegFailed = false;\r\n          this.errorFieldSubmitted = {};\r\n          this.apiResponse.error = false;\r\n          this.apiResponse.message = 'Successful registration';\r\n        },\r\n        error => {\r\n          const errorResponse = JSON.parse(error.error);\r\n          this.apiResponse.error = true;\r\n          this.apiResponse.message = 'Registration error';\r\n          this.errorMessage = error.error.message;\r\n          this.isRegFailed = true;\r\n          if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n            this.errorFieldSubmitted = errorResponse.data;\r\n          }\r\n        },\r\n        () => {\r\n          console.log(\"Registration Complete\");}\r\n      );\r\n    }\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.registerForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.registerForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.registerForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.registerForm.get('phone')!;\r\n  }\r\n}\r\n","\r\n<!--html>\r\n<head>\r\n  <style></style>\r\n  <title></title>\r\n</head>\r\n<body-->\r\n\r\n\r\n\r\n<!--storybook-background1></storybook-background1-->\r\n\r\n\r\n<storybook-registry-form #form\r\n  [isRegSuccess]=\"isRegSuccess\"\r\n  [storyInputs]=\"storyInputsInOrder\"\r\n  [mForm]=\"registerForm\"\r\n  (sendRegReq)=\"onSubmit()\"\r\n  (clickXButton)=\"this.dialogRef.close('xbutton')\"\r\n></storybook-registry-form>\r\n\r\n\r\n\r\n<!--/body>\r\n</html-->\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport RegisterForm2Component from \"./login-main/register-form2/register-form2.component\";\nimport {LoginMainComponent} from \"./login-main/login-main.component\";\nimport {LogtestComponent} from \"./logtest/logtest.component\";\nimport Profile2Component from \"../profile2/profile2.component\";\n\n\n\n\n\nconst routes: Routes = [\n  { path: 'login-main', component: LoginMainComponent },\n  { path: 'logtest', component: LogtestComponent },\n  /*{ path: 'login2', component: Login2Component },*/\n  //{ path: 'storybook-button-fortest', component: ButtonFortestComponent },\n  { path: 'register-form2', component: RegisterForm2Component },\n  /*{ path: 'register-form2', component: RegisterForm2Component },*/\n  { path: 'profile2',loadChildren: () => import('../app.module').then(m => m.AppModule),},\n  { path: '', redirectTo: 'login-main', pathMatch: 'full' },/**/\n  { path: '**', redirectTo: 'logtest', },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class Login2RoutingModule { }\n","import { Component, OnInit, OnDestroy  } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { TokenStorageService } from 'src/app/_services/token-storage.service';\r\nimport { EventBusService } from 'src/app/_shared/event-bus.service';\r\n\r\n@Component({\r\n  selector: 'login2',\r\n  templateUrl: './login2.component.html',\r\n  //styleUrls: ['./app.component.css']\r\n})\r\nexport class Login2Component {\r\n  private roles: string[] = [];\r\n  public isLoggedIn = false;\r\n  showAdminBoard = false;\r\n  showModeratorBoard = false;\r\n  username?: string;\r\n  eventBusSub?: Subscription;\r\n  title?: 'accGate';\r\n\r\n  constructor(private tokenStorageService: TokenStorageService, private eventBusService: EventBusService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\r\n\r\n    if (this.isLoggedIn) {\r\n      const user = this.tokenStorageService.getUser();\r\n      this.roles = user.roles;\r\n\r\n      this.showAdminBoard = (this.roles.includes('Admin') || this.roles.includes('SupervisorAdmin'));\r\n      this.showModeratorBoard = this.roles.includes('SupervisorMonitor');\r\n\r\n      this.username = user.username;\r\n    }\r\n    this.eventBusSub = this.eventBusService.on('logout', () => {\r\n      this.logout();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.eventBusSub)\r\n      this.eventBusSub.unsubscribe();\r\n  }\r\n\r\n  logout(): void {\r\n    this.tokenStorageService.signOut();\r\n    this.isLoggedIn = false;\r\n    this.roles = [];\r\n    this.showAdminBoard = false;\r\n    this.showModeratorBoard = false;\r\n    //window.location.reload();\r\n  }\r\n\r\n}\r\n","<p>login2 works!</p>\r\n<!--router-outlet  id=\"login2\" ></router-outlet-->\r\n<!--storybook-button-fortest></storybook-button-fortest-->\r\n","import { NgModule } from '@angular/core';\n\nimport { Login2RoutingModule } from './login2-routing.module';\nimport RegisterForm2Component  from './login-main/register-form2/register-form2.component';\nimport { LogtestComponent } from './logtest/logtest.component';\nimport {LoginMainComponent, /*DialogOverviewExampleDialog*/} from './login-main/login-main.component';\nimport {TaskComponent } from \"src/stories/task/task.component\";\nimport {TaskListComponent} from \"../../stories/task-list/task-list.component\";\nimport {Login2Component} from \"./login2.component\";\nimport {StorybookModule} from \"../storybook/storybook.module\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatButtonModule} from \"@angular/material/button\";\n\n\n\n@NgModule({\n  declarations: [\n\n    RegisterForm2Component,\n    TaskComponent, TaskListComponent,\n    LogtestComponent,\n    Login2Component,\n    LoginMainComponent,\n    //ExtentionDialog,\n    //DialogOverviewExampleDialog\n\n\n  ],\n  imports: [\n    Login2RoutingModule,\n    StorybookModule,\n    MatDialogModule,\n    MatButtonModule,\n  ],\n  exports: [\n  ],\n  bootstrap: [Login2Component]\n})\nexport class Login2Module { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'logtest',\n  templateUrl: './logtest.component.html',\n  styleUrls: ['./logtest.component.css']\n})\nexport class LogtestComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<storybook-background1></storybook-background1>\n<storybook-button-fortest></storybook-button-fortest>\n<!--storybook-background1></storybook-background1-->\n<!--ButtonLanguageComponent></ButtonLanguageComponent-->\n","\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <!--storybook-card  class=\"card-container\"></storybook-card-->\r\n  <div  class=\"card  h-100 d-flex align-items-center justify-content-center\">\r\n\r\n    <div class=\"Aeonix-App-Center\">\r\n    <a>Aeonix App Center</a>\r\n    </div>\r\n    <!--img id=\"profile-img\" class=\"user-image\" src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n      class=\"profile-img-card\" /-->\r\n\r\n    <br>\r\n\r\n    <form *ngIf=\"!isLoggedIn\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate>\r\n\r\n\r\n\r\n      <div class=\"list-item storybook-input Frame-3 \">\r\n        <a class=\"user-name D-Caps-Regular\">USER NAME</a>\r\n\r\n        <br>\r\n        <label [attr.aria-label]=\"'userName'\" for=\"userName\" class=\"Vector2 \">\r\n\r\n          <img src=\"./assets/images/User2ldpi.png\" class=\"icon-input-userName\" alt=\"icon input userName\" />\r\n\r\n          <input type=\"text\" [value]=\"'DanK203'\" id=\"userName\" name=\"userName\"  class=\"DanK203\"\r\n                 [(ngModel)]=\"form.userName\" placeholder=\"Ex. Saul Ramirez\" required #userName=\"ngModel\"/>\r\n        </label>\r\n\r\n        <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"userName.errors && f.submitted\">\r\n          Username is required!\r\n        </div>\r\n      </div>\r\n\r\n      <br>\r\n\r\n      <div class=\"storybook-input Frame-3 \">\r\n        <span class=\"user-name D-Caps-Regular\">PASSWORD</span>\r\n\r\n\r\n        <br>\r\n        <label [attr.aria-label]=\"'password'\" for=\"password\" class=\"Vector2 \">\r\n          <img src=\"./assets/images/LockIcon2ldpi.png\" class=\"icon-input-password\" alt=\"icon input password\" />\r\n          <input type={{this.showPass}} [value]=\"'DanK203'\" id=\"password\" name=\"password\"  class=\"DanK203\"\r\n                 [(ngModel)]=\"form.password\" placeholder=\"password\" required #password=\"ngModel\"/>\r\n          <button class=\"icon-input-showpass\" type=\"button\" (click)=\"showPassChange()\">\r\n          <img src=\"./assets/images/EyeIcon.png\" class=\"icon-input-showpass\" alt=\"icon input type\" />\r\n          </button>\r\n        </label>\r\n\r\n        <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"password.errors && f.submitted\">\r\n          <div *ngIf=\"password.errors.required\">Password is required</div>\r\n          <div *ngIf=\"password.errors.minlength\">Password must be at least 1 characters</div>\r\n        </div>\r\n      </div>\r\n\r\n      <br>\r\n      <div class=\"thematic-break\"></div>\r\n\r\n      <div class=\"form-group\">\r\n\r\n        <div>\r\n          <!--a (mouseover)=\"popover.show()\" (mouseleave)=\"popover.hide()\" (click)=\"openReplacePassword()\"\r\n             class=\"form-check-label white-text\"  href=\"#/login\" mdbPopoverTitle=\"Account recovery\" #popover=\"mdbPopover\"\r\n             mdbPopover=\"To help keep your account safe, we will make sure that it’s really you trying to sign in\">\r\n            Forgot password?\r\n          </a-->\r\n          <a (click)=\"openReplacePassword()\"\r\n             class=\"forgot-password\"  href=\"#/login\" >\r\n            Forgot password?\r\n          </a>\r\n\r\n          <button class=\"login-button\">Continue</button>\r\n        </div>\r\n\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && isLoginFailed\">\r\n          Login failed: {{ loginErrorMessage }}\r\n        </div>\r\n      </div>\r\n    </form>\r\n\r\n\r\n\r\n    <div class=\"alert alert-success\" *ngIf=\"isLoggedIn\">\r\n      Logged in as {{ roles }}.\r\n    </div>\r\n\r\n    <mdb-card-footer class=\"form-check-label white-text border-bottom-0\" id=\"tests\">\r\n      <label for=\"tests\" class=\"form-check-label white-text\"\r\n              style=\"margin-bottom: 1px; padding: 1px\">R&D test:\r\n        <a (click)=\"openRegisterForm()\"  class=\"green-text font-weight-bold\">RegistrationForm</a>\r\n        <b> ,</b>\r\n        <a (click)=\"openReplacePassword()\" href=\"#/login\" class=\"green-text font-weight-bold pl-2\">ReplacePassForm</a>\r\n        <b> ,</b>\r\n        <a (click)=\"test()\" href=\"#/login\" class=\"green-text font-weight-bold pl-2\">test</a>\r\n      </label>\r\n    </mdb-card-footer>\r\n  </div>\r\n\r\n\r\n\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport {  Router } from '@angular/router';\r\nimport { MdbModalRef, MdbModalService } from 'mdb-angular-ui-kit/modal';\r\nimport {FormControl, Validators} from \"@angular/forms\";\r\nimport { RegisterFormComponent } from './register-form/register-form.component';\r\nimport {ReplacePassFormComponent} from \"./replace-pass-form/replace-pass-form.component\";\r\nimport {Observable} from \"rxjs\";\r\n//import {  Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  registerFormRef: MdbModalRef<RegisterFormComponent> | null = null;\r\n  replacePassFormRef: MdbModalRef<ReplacePassFormComponent> | null = null;\r\n  form: any = {\r\n    username: null, //new FormControl('ea2', Validators.min(2)),\r\n    password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n  };\r\n  public isLoggedIn = false;\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n  roles: string[] = [];\r\n  showPass: 'text' | 'password' = 'password';\r\n\r\n  constructor(private authService: AuthService,\r\n              private tokenStorage: TokenStorageService,\r\n              private router: Router,\r\n              private registerFormService: MdbModalService,\r\n              private replacePassFormService: MdbModalService) { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.tokenStorage.getToken()) {\r\n      this.isLoggedIn = true;\r\n      this.roles = this.tokenStorage.getUser().roles;\r\n    }\r\n  }\r\n\r\n  showPassChange(): void {\r\n    this.showPass = (this.showPass == 'password' ? 'text' : 'password')\r\n  }\r\n\r\n  test() {\r\n    console.log(\"test start\");\r\n    this.openRegisterForm().then(() => {\r\n      this.openReplacePassword();\r\n      console.log(\"test end\");});\r\n\r\n    this.openRegisterForm().then(\r\n    (val) => {\r\n      console.log(val);\r\n      switch (val) {\r\n        case \"xbutton\":\r\n          break;\r\n        case undefined:\r\n          this.openReplacePassword();\r\n          break;\r\n        default:\r\n\r\n      }\r\n      return 'done2';\r\n    },\r\n      (err) => console.error(err));\r\n  }\r\n\r\n  openRegisterForm() {\r\n    return this.registerFormService.open(RegisterFormComponent).onClose.toPromise();\r\n    /*var promise = new Promise<void>((resolve, reject)  => {\r\n      let newRegisterFormService = this.registerFormService.open(RegisterForm2Component);\r\n      setTimeout(() => {\r\n        console.log(\"Async Work Complete\");\r\n        newRegisterFormService.close();\r\n        resolve();//() => {resolve();}\r\n      }, 5000);\r\n    });\r\n    return promise;*/\r\n  }\r\n\r\n  openReplacePassword() {\r\n    this.replacePassFormService.open(ReplacePassFormComponent);\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, password } = this.form;\r\n\r\n    this.authService.login(username, password).subscribe(\r\n      data => {\r\n        this.tokenStorage.saveToken(data.accessToken);\r\n        this.tokenStorage.saveRefreshToken(data.refreshToken);\r\n        this.tokenStorage.saveUser(data);\r\n\r\n        this.isLoginFailed = false;\r\n        this.isLoggedIn = true;\r\n        this.roles = this.tokenStorage.getUser().roles;\r\n        this.reloadPage();\r\n      },\r\n      err => {\r\n        switch (err.error.message) {\r\n          case \"Error: A registry process should be made!\":\r\n            //this.openRegisterForm().then(() => {this.openReplacePassword()});\r\n            //toPromise((data) => {this.openReplacePassword()});\r\n            this.openRegisterForm().then(\r\n              (val) => {\r\n                console.log(val);\r\n                switch (val) {\r\n                  case \"xbutton\":\r\n                    break;\r\n                  case \"Registration Complete\":\r\n                    this.openReplacePassword();\r\n                    break;\r\n                  case undefined:\r\n                    this.openReplacePassword();\r\n                    break;\r\n                  default:\r\n                }\r\n                return 'done2';\r\n              },\r\n              (err) => console.error(err));\r\n              break;\r\n          default:\r\n            this.loginErrorMessage = err.error.message;\r\n        }\r\n\r\n\r\n        this.isLoginFailed = true;\r\n      }\r\n    );\r\n  }\r\n\r\n  reloadPage(): void {\r\n    //window.location.reload();\r\n    this.router.navigate(['/profile']).then(() => {window.location.reload()});\r\n    //var URL = window.location.mainHeader+\"/profile\"; //'http://localhost:4200/user';\r\n    ///window.open(URL);\r\n    //this.router.navigate([]).then(result => {  window.open(window.location.toString(), 'user'); });\r\n  }\r\n\r\n  /**\r\n   * Is this the principal call to action on the login-main?\r\n   */\r\n  @Input()\r\n  primary = true;\r\n\r\n}\r\n","<div class=\"modal-header\">\r\n  <!--div class=\"text-center\"-->\r\n    <label class=\"white-text mb-2 mt-2 font-weight-bold fas\">\r\n      <strong>REGISTRATION</strong>\r\n      <a class=\"green-text font-weight-bold\">\r\n        <strong> FORM</strong>\r\n      </a>\r\n    </label>\r\n\r\n  <!--/div-->\r\n  <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)='modalRef.close(\"xbutton\")'></button>\r\n\r\n  <!--h5 class=\"modal-title\" id=\"exampleModalLabel\">REGISTRATION</h5-->\r\n\r\n</div>\r\n<div class=\"modal-body py-4 text-center expansionCard\">\r\n  <img id=\"profile-img\" src=\"./assets/images/T.png\"\r\n       class=\"profile-img-card\"  alt=\"\"/>\r\n  <div class=\"text-white rgba-stylish-strong py-5 px-5 z-depth-2\">\r\n\r\n\r\n  <form *ngIf=\"!isSuccessful\" [formGroup]=\"validationForm\">\r\n\r\n  <!--###################### Username input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"text\" id=\"typeText\"\r\n           class=\"form-control\"  formControlName=\"userName\" required />\r\n    <label class=\"form-label \" for=\"typeText\" >UserName input</label>\r\n    <mdb-error *ngIf=\"userName?.invalid && (userName?.dirty || userName?.touched)\">\r\n      First name is required\r\n    </mdb-error>\r\n    <mdb-success *ngIf=\"userName?.valid && (userName?.dirty || userName?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n\r\n  <br>\r\n\r\n    <!--###################### Email input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n      <input [mdbValidate]=\"true\" mdbInput type=\"email\" id=\"typeEmail\"\r\n             class=\"form-control\" formControlName=\"email\" required />\r\n      <label mdbLabel class=\"form-label form-white\" for=\"typeEmail\">Email input</label>\r\n      <mdb-error *ngIf=\"email?.invalid && (email?.dirty || email?.touched)\">\r\n        Email is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"email?.valid && (email?.dirty || email?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n\r\n\r\n  <br>\r\n\r\n    <!--###################### Password input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typePassword\"\r\n           class=\"form-control\" formControlName=\"password\" required minlength=\"1\" />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typePassword\">Password input</label>\r\n    <mdb-error *ngIf=\"password?.invalid && (password?.dirty || password?.touched)\">\r\n      Password is required\r\n    </mdb-error>\r\n      <!--mdb-error *ngIf=\"email?.errors.length\">  Username must be at least 3 characters</mdb-error-->\r\n    <mdb-success *ngIf=\"password?.valid && (password?.dirty || password?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['password']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['password'] | apiErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n\r\n\r\n  <br>\r\n\r\n    <!--###################### Phone input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"tel\" id=\"typePhone\"\r\n           class=\"form-control\" formControlName=\"phone\" required />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typePhone\">Phone number input</label>\r\n    <mdb-error *ngIf=\"phone?.invalid && (phone?.dirty || phone?.touched)\">\r\n      Phone is required\r\n    </mdb-error>\r\n    <mdb-success *ngIf=\"phone?.valid && (phone?.dirty || phone?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n  <!--mdb-form-control>\r\n    <input mdbInput  type=\"text\" class=\"form-control\" id=\"exampleDatepicker\"/>\r\n    <label mdbLabel for=\"exampleDatepicker\" class=\"form-label\">Select a date</label>\r\n    <ngb-datepicker-month [NgbDatepicker]=\"datepicker\"></ngb-datepicker-month>\r\n    <ngb-datepicker #dateSelect></ngb-datepicker>\r\n  </mdb-form-control-->\r\n    <!--div class=\"form-group\">\r\n      <button class=\"btn btn-primary btn-block\">Login</button>\r\n    </div-->\r\n    <!--Grid row-->\r\n    <div  *ngIf=\"!isSuccessful\" class=\"row d-flex align-items-lg-center \">\r\n      <!--Grid column-->\r\n      <div class=\"form-group text-center mb-2  col-md-12 \">\r\n        <button type=\"button\" (click)=\"onSubmit()\" class=\"btn btn-success btn-block btn-rounded z-depth-1 waves-effect waves-light\">Register</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  </div>\r\n\r\n  <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n    Your registration is successful!\r\n  </div>\r\n\r\n\r\n  <div hidden class=\"list-group-horizontal mb-4 col-md-12\">\r\n    <button type=\"button\" class=\" fa-pull-left btn btn-primary\">Save changes</button>\r\n    <!--button type=\"button\" class=\"fa-pull-right btn btn-secondary\" (click)=\"this.modalRef.close()\">Close</button-->\r\n  </div>\r\n\r\n  <br>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"modal-content \">\r\n    <div class=\"modal-footer fal\">\r\n      <input type=\"checkbox\" class=\" form-check-input\" id=\"checkbox7\">\r\n      <label for=\"checkbox7\" class=\"form-check-label white-text\">Subscribe to our <a href=\"#\" class=\"green-text font-weight-bold\"> newsletter?</a></label>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Component } from '@angular/core';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport { AuthService } from '../../_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './register-form.component.html',\r\n  styleUrls: ['./register-form.component.css']\r\n})\r\nexport class RegisterFormComponent {\r\n  validationForm: FormGroup;\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  submitted = false;\r\n  errorMessage = '';\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  constructor(public modalRef: MdbModalRef<RegisterFormComponent>,\r\n              private authService: AuthService) {\r\n    this.validationForm = new FormGroup({\r\n      userName: new FormControl(null, Validators.required),\r\n      email: new FormControl(null, Validators.email),\r\n      password: new FormControl('', Validators.minLength(1)),\r\n      phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.submitted = true;\r\n    const { userName, email, password, phone } = this.validationForm.value;\r\n    this.authService.registerForm(userName, email, password, phone).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n        this.errorFieldSubmitted = {};\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful registration';\r\n      },\r\n      error => {\r\n        const errorResponse = JSON.parse(error.error);\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Registration error';\r\n        this.errorMessage = error.error.message;\r\n        this.isSignUpFailed = true;\r\n        if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n          this.errorFieldSubmitted = errorResponse.data;\r\n        }\r\n      }, () => {console.log(\"Registration Complete\");\r\n                        this.modalRef.close(\"Registration Complete\");}\r\n    );\r\n  }\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('userName')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n}\r\n","<div class=\"modal-header\">\r\n  <!--div class=\"text-center\"-->\r\n    <label class=\"white-text mb-2 mt-2 font-weight-bold fas\">\r\n      <strong>REPLACE PASSWORD</strong>\r\n      <a class=\"green-text font-weight-bold\">\r\n        <strong> FORM</strong>\r\n      </a>\r\n    </label>\r\n\r\n  <!--/div-->\r\n  <button type=\"button\" class=\"btn btn-close white-text \" aria-label=\"Close\" (click)='modalRef.close(\"xbutton\")'></button>\r\n\r\n  <!--h5 class=\"modal-title\" id=\"exampleModalLabel\">REGISTRATION</h5-->\r\n\r\n</div>\r\n<div class=\"modal-body py-4 text-center expansionCard\">\r\n  <figure class=\"figure\">\r\n  <img aria-setsize=\"20\"  id=\"profile-img\" src=\"./assets/images/T.png\"\r\n       class=\"profile-img-card img-fluid rounded \"  alt=\"\"/>\r\n    <figcaption class=\"figure-caption text-center text-capitalize\">Tadiran Telecom</figcaption>\r\n  </figure>\r\n  <div class=\"text-white rgba-stylish-strong py-4 px-5 z-depth-2\" style=\"border-bottom: 2rem\">\r\n  <!--div class=\"form-outline\">\r\n    <input type=\"text\" id=\"typeText\" class=\"form-control\" />\r\n    <label  class=\"form-label\" for=\"typeText\">Your UserName</label>\r\n  </div-->\r\n\r\n  <form *ngIf=\"!isSuccessful\" [formGroup]=\"replacePassForm\">\r\n\r\n  <!--###################### Username input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n      <input [mdbValidate]=\"true\" mdbInput type=\"text\" id=\"typeText\"\r\n             class=\"form-control\"  formControlName=\"userName\" required />\r\n      <label class=\"form-label \" for=\"typeText\" >Username input</label>\r\n      <mdb-error *ngIf=\"userName?.invalid && (userName?.dirty || userName?.touched)\">\r\n        Username is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"userName?.valid && (userName?.dirty || userName?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n    <br>\r\n  <!--###################### Old Password input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typeOldPassword\"\r\n           class=\"form-control\" formControlName=\"oldPassword\" required minlength=\"1\" />\r\n    <label class=\"form-label\" for=\"typeOldPassword\">Current Password</label>\r\n      <mdb-error *ngIf=\"oldPassword?.invalid && (oldPassword?.dirty || oldPassword?.touched)\">\r\n        Current password is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"oldPassword?.valid && (oldPassword?.dirty || oldPassword?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['oldPassword']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['oldPassword'] | loginErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n\r\n    <br>\r\n    <hr class=\"my-1 text-black-50\">\r\n    <br>\r\n\r\n  <!--###################### New Password input field ###################### -->\r\n  <div class=\"form-outline text-black-50\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typePassword\"\r\n           class=\"form-control\" formControlName=\"password\" required minlength=\"3\" />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typePassword\">New Password</label>\r\n    <mdb-error *ngIf=\"password?.invalid && (password?.dirty || password?.touched)\">\r\n      Password is required\r\n    </mdb-error>\r\n    <mdb-success *ngIf=\"password?.valid && (password?.dirty || password?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['password']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['password'] | apiErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n  <br>\r\n\r\n  <!--###################### Confirm Password input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typeConfirmPassword\"\r\n           class=\"form-control\" formControlName=\"confirmPassword\" required minlength=\"3\" />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typeConfirmPassword\">Confirm Password</label>\r\n      <mdb-error *ngIf=\"confirmPassword?.invalid && (confirmPassword?.dirty || confirmPassword?.touched)\">\r\n        Retype password is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"confirmPassword?.valid && (confirmPassword?.dirty || confirmPassword?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['confirmPassword']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['confirmPassword'] | apiErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n  </form>\r\n  </div>\r\n\r\n\r\n  <!--Grid row-->\r\n  <div  *ngIf=\"!isSuccessful\" class=\"row d-flex align-items-lg-center border-bottom-0 \">\r\n    <!--Grid column-->\r\n    <div class=\"text-center mb-2  col-md-12 border-bottom-0\">\r\n      <button type=\"button\" (click)=\"onSubmit()\" class=\"btn btn-success btn-block btn-rounded z-depth-1 waves-effect waves-light border-bottom-0\"\r\n      style=\"margin-bottom: 0;\">Replace Password</button>\r\n    </div>\r\n  </div>\r\n  <div hidden class=\"list-group-horizontal mb-4 col-md-12\">\r\n    <button type=\"button\" class=\" fa-pull-left btn btn-primary\">Save changes</button>\r\n    <button type=\"button\" class=\"fa-pull-right btn btn-secondary\" (click)=\"modalRef.close()\">Close</button>\r\n  </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n<div class=\"modal-content \">\r\n    <div class=\"modal-footer fal\">\r\n      <input type=\"checkbox\" class=\" form-check-input\" id=\"checkbox7\">\r\n      <label for=\"checkbox7\" class=\"form-check-label white-text\">Subscribe to our <a href=\"#\" class=\"green-text font-weight-bold\"> newsletter?</a></label>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Component } from '@angular/core';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport {AuthService} from \"../../_services/auth.service\";\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './replace-pass-form.component.html',\r\n  styleUrls: ['./replace-pass-form.component.css']\r\n})\r\nexport class ReplacePassFormComponent {\r\n  replacePassForm: FormGroup;\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  submitted = false;\r\n  errorMessage = '';\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  constructor(public modalRef: MdbModalRef<ReplacePassFormComponent>,\r\n              private authService: AuthService) {\r\n    this.replacePassForm = new FormGroup({\r\n      userName: new FormControl(null, Validators.required),\r\n      oldPassword: new FormControl(null, Validators.minLength(1)),\r\n      password: new FormControl('', Validators.minLength(3)),\r\n      confirmPassword: new FormControl(null, Validators.minLength(3))\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.submitted = true;\r\n    const { userName, oldPassword, password, confirmPassword } = this.replacePassForm.value;\r\n    this.authService.replacePassForm(userName, oldPassword, password, confirmPassword).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n        this.errorFieldSubmitted = {};\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful registration';\r\n      },\r\n      error => {\r\n        const errorResponse = JSON.parse(error.error);\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Registration error';\r\n        this.errorMessage = error.error.message;\r\n        this.isSignUpFailed = true;\r\n        if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n          this.errorFieldSubmitted = errorResponse.data;\r\n        }\r\n      }, () => {this.modalRef.close()}\r\n    );\r\n  }\r\n\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.replacePassForm.get('userName')!;\r\n  }\r\n\r\n  get oldPassword(): AbstractControl {\r\n    return this.replacePassForm.get('oldPassword')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.replacePassForm.get('password')!;\r\n  }\r\n\r\n  get confirmPassword(): AbstractControl {\r\n    return this.replacePassForm.get('confirmPassword')!;\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'apiErrorMessage'\r\n})\r\nexport class ApiErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'loginErrorMessage'\r\n})\r\nexport class LoginErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\nimport { StoryInput } from \"../../stories/inputs/story-input.model\";\nimport {AuthService} from \"../_services/auth.service\";\nimport {FormGroup} from \"@angular/forms\";\nimport {TokenStorageService} from \"../_services/token-storage.service\";\nimport {Router} from \"@angular/router\";\nimport {AppConfig} from \"../app.config\";\nimport {BehaviorSubject, throwError} from \"rxjs\";\n\n\n\n@Component({\n  selector: 'profile2',\n  templateUrl: './profile2.component.html',\n  styleUrls: ['./profile2.component.scss']\n})\nexport default class Profile2Component implements OnInit {\n\n  currentUser: any;\n  accessToken: any;\n  refreshToken: any;\n  windowObjectReference: any;\n  refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private isRefreshing = false;\n  public appConfig: any;\n  private TOKEN_KEY: string;\n\n\n  constructor(private authService: AuthService,\n              private token: TokenStorageService,\n              private router: Router,) {\n    this.TOKEN_KEY = AppConfig.endpoints.TOKEN_KEY;\n  }\n\n  ngOnInit(): void {\n    this.currentUser = this.token.getUser();\n    this.accessToken = this.currentUser.accessToken;\n    this.refreshToken = this.currentUser.refreshToken;\n  }\n\n\n\n  openapp(): void {\n    console.log('window.location.origin.toString():  '+window.location.origin.toString());\n\n    this.router.navigate([]).then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+'/accGCCS/'/*window.location.origin.toString()+\"/profile\"*/); });\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\n    var promise = new Promise((resolve, reject) => {this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML = \"new title\";});\n\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\n\n  }\n\n  public forseRefreshToken(): void {\n\n    if (!this.isRefreshing) {\n      const token = this.token.getRefreshToken();\n      if (token)\n        this.authService.refreshToken(token).subscribe(\n          data => {\n            this.isRefreshing = false;\n            this.token.saveToken(data.accessToken);\n            this.token.saveRefreshToken(data.refreshToken);\n            this.refreshTokenSubject.next(data.accessToken);\n            this.currentUser = this.token.getUser();\n            this.accessToken = this.token.getToken();\n            this.refreshToken = this.token.getRefreshToken();\n          },\n          (err) => {\n            this.isRefreshing = false;\n\n            this.token.signOut();\n            return throwError(err);\n          }\n        );\n    }\n  }\n\n  public openNewTabForApp(appRequest: string[]): void {\n    const [ webapp, webappURLPrefix ] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n    if (!this.isRefreshing) {\n      const token = this.token.getRefreshToken();\n      if (token)\n        this.authService.webapptab(token, webapp)\n          .then(\n            data => {\n              this.isRefreshing = false;\n              newAccessToken = (data.accessToken);\n              newRefreshToken = (data.refreshToken);\n              newCurrentUser = (data);\n            },\n            (reject) => {return throwError(reject.error);})\n          .then(() => {this.router.navigate([])\n            .then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix);})\n            .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n                this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n                this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\n              (err) => { this.isRefreshing = false;\n                return throwError(err);})});\n    }\n  }\n\n\n  public openNewWinForApp(appRequest: string[]): void {\n    /*webapp: string, webappURLPrefix: string*/\n    const [ webapp, webappURLPrefix ] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n    if (!this.isRefreshing) {\n      const token = this.token.getRefreshToken();\n      if (token)\n        this.authService.webapptab(token, webapp)\n          .then(\n            data => {\n              this.isRefreshing = false;\n              newAccessToken = (data.accessToken);\n              newRefreshToken = (data.refreshToken);\n              newCurrentUser = (data);\n            },\n            (reject) => {return throwError(reject.error);})\n          .then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix+'start.html',\n            'C-Sharpcorner', 'scrollbars=no');})\n          .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n              this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n              this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\n            (err) => { this.isRefreshing = false;\n              return throwError(err);})\n    }\n  }\n\n}\n\n","<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Title</title>\r\n</head>\r\n<body>\r\n<storybook-background1></storybook-background1>\r\n\r\n<storybook-app-menu\r\n  (openNewWinForApp)=\"openNewWinForApp($event)\"\r\n  (openNewTabForApp)=\"openNewTabForApp($event)\">\r\n</storybook-app-menu>\r\n\r\n</body>\r\n</html>\r\n","<div class=\"container\" *ngIf=\"currentUser; else loggedOut\">\r\n  <br>\r\n  <header class=\"background jumbotron\">\r\n    <h3 class=\"font_0\" id=\"profile_title\">\r\n      {{ currentUser.username }} Profile\r\n    </h3>\r\n  </header>\r\n  <p>\r\n    <strong>accessToken:</strong>\r\n    <!--{{ currentUser.accessToken.substring(0, 20) }} ...\r\n    {{ currentUser.accessToken.substr(currentUser.accessToken.length - 20) }}-->\r\n    {{ accessToken }}\r\n  </p>\r\n  <p>\r\n    <strong>refreshToken:</strong>\r\n    {{ refreshToken }}\r\n    <br>\r\n    <button id=\"forseRefreshToken\" (click)=\"forseRefreshToken()\" style='text-align: left; width:auto;cursor: pointer;'>Refresh</button>\r\n    <br>\r\n    <button id=\"openNewGccsTab\" (click)='openNewTabForApp(\"GCCS\",\"/accGCCS/\")' style='text-align: left; width:auto;cursor: pointer;'>Open new tab for GCCS</button>\r\n    <br>\r\n    <button id=\"openNewAgentTab\" (click)='openNewWinForApp(\"AGENT\",\"/accAgent/\")' style='text-align: left; width:auto;cursor: pointer;'>Open new tab for Vee</button>\r\n    <br>\r\n    <button id=\"openNewWebRTTab\" (click)='openNewTabForApp(\"ACCREALTIME\",\"/accRealTime/\")' style='text-align: left; width:auto;cursor: pointer;'>Open new tab for WebRT</button>\r\n  </p>\r\n  <p>\r\n    <strong>Email:</strong>\r\n    {{ currentUser.email }}\r\n  </p>\r\n  <p>\r\n    <strong>ID:</strong>\r\n    {{ currentUser.id }}\r\n  </p>\r\n  <p>\r\n    <strong>Web App:</strong>\r\n    {{ currentUser.webApp }}\r\n  </p>\r\n  <strong>Roles:</strong>\r\n  <ul>\r\n    <li *ngFor=\"let role of currentUser.roles\">\r\n      {{ role }}\r\n    </li>\r\n  </ul>\r\n  <p><a href=\"http://tadiran2014.azurewebsites.net/en/products/unified-communications/aeonix/\" id=\"testid2\" target=\"iframe_a\">Tadiran Azure</a></p>\r\n  <p><a href=\"https://www.tadirantele.com/aeonix4cloud\" id=\"testid4\" target=\"iframe_a\">aeonix4cloud</a></p>\r\n  <iframe src=\"https://www.tadirantele.com/aeonix4cloud\" sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"  name=\"iframe_a\" height=\"550px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe>\r\n  <ul class=\"list-unstyled\">\r\n    <li class=\"media\">\r\n      <a href=\"https://172.28.8.245:8443/aeonix/mainForm.jsf\" class=\"app-icon-wide\"  target=\"_blank\" aria-current=\"true\">\r\n        <img class=\"\" src=\"./assets/images/aeonix_logo_72.png\" alt=\"Icon app number 1\">\r\n      </a>\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">aeonix - SERVER</h5>\r\n        Aeonix is a software only communications solution that consolidates disparate business applications into a single, fault tolerant platform. The Aeonix Unified Communications platform, Aeonix Contact Center(ACC), and Aeonix Dispatch Console (ADC), all reside in one virtual instance or COTS server. Aeonix runs on any virtualization platform including VMware, Hyper-V and cloud platforms such as AWS, and can easily port from one platform to another.\r\n      </div>\r\n    </li>\r\n    <li class=\"media my-4\">\r\n      <button (click)=\"openapp()\" class=\"app-icon\" >\r\n        <img class=\"app-icon\" src=\"./assets/images/dashboard.png\" alt=\"Icon app number 2\" >\r\n      </button>\r\n      <!--a href=\"https://172.28.1.130:8445/accRealTime/index.jsp\" class=\"app-icon\" rel=\"opener\" aria-current=\"true\"></a-->\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccGCCS - SERVER</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n    <li class=\"media\">\r\n      <a href=\"https://localhost:8445/accGCCS/\" id=\"testid3\" target=\"iframe_a\" rel=\"noopener\" aria-current=\"false\">\r\n      <img class=\"app-icon\" src=\"./assets/images/management.png\" alt=\"Icon app number 3\">\r\n      </a>\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccGCCS - LOCAL</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n    <li class=\"media my-4\">\r\n      <a href=\"http://localhost:8080/accWebRT/\" id=\"testid5\" target=\"iframe_a\" rel=\"noopener\" aria-current=\"false\">\r\n        <img class=\"app-icon\" src=\"./assets/images/dashboard.png\" alt=\"Icon app number 4\" >\r\n      </a>\r\n\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccWebRT - LOCAL</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n    <li class=\"media\">\r\n      <a href=\"https://172.28.8.245:8445/accAgent/\" id=\"testid6\" target=\"iframe_a\" rel=\"noopener\" aria-current=\"false\">\r\n        <img class=\"app-icon\" src=\"./assets/images/management.png\" alt=\"Icon app number 5\">\r\n      </a>\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccAgent - SERVER</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n<ng-template #loggedOut>\r\n  Please login.\r\n</ng-template>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport {Router} from \"@angular/router\";\r\nimport {AuthService} from \"../_services/auth.service\";\r\nimport {AuthInterceptor, authInterceptorProviders} from \"../_helpers/auth.interceptor\";\r\nimport {catchError, switchMap} from \"rxjs/operators\";\r\nimport {BehaviorSubject, pipe, throwError} from \"rxjs\";\r\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\r\nimport { AppConfig } from \"../app.config\"\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  currentUser: any;\r\n  accessToken: any;\r\n  refreshToken: any;\r\n  windowObjectReference: any;\r\n  refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  private isRefreshing = false;\r\n  public appConfig: any;\r\n  private TOKEN_KEY: string;\r\n\r\n\r\n  constructor(private token: TokenStorageService, private router: Router, private authService: AuthService) {\r\n    this.TOKEN_KEY = AppConfig.endpoints.TOKEN_KEY;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentUser = this.token.getUser();\r\n    this.accessToken = this.currentUser.accessToken;\r\n    this.refreshToken = this.currentUser.refreshToken;\r\n  }\r\n\r\n\r\n  openapp(): void {\r\n    console.log('window.location.origin.toString():  '+window.location.origin.toString());\r\n\r\n    this.router.navigate([]).then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+'/accGCCS/'/*window.location.origin.toString()+\"/profile\"*/); });\r\n    //console.log('window.location.origin.toString():  '+ this.windowObjectReference\r\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\r\n    var promise = new Promise((resolve, reject) => {this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML = \"new title\";});\r\n\r\n\r\n    //this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML = \"new title\";\r\n    //this.windowObjectReference.window.document.done.\r\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\r\n    //let { username, password } = this.loginForm.value;\r\n    //username = this.loginForm.get(['username'])?.value.toString();\r\n    //let password = this.loginForm.get(['password'])?.value.toString();\r\n    //this.authenticationService.logout();\r\n  }\r\n\r\n  public forseRefreshToken(): void {\r\n    //@Value(\"${bezkoder.app.jwtExpirationMs}\")\r\n\r\n    if (!this.isRefreshing) {\r\n      const token = this.token.getRefreshToken();\r\n      if (token)\r\n        this.authService.refreshToken(token).subscribe(\r\n          data => {\r\n            this.isRefreshing = false;\r\n            this.token.saveToken(data.accessToken);\r\n            this.token.saveRefreshToken(data.refreshToken);\r\n            this.refreshTokenSubject.next(data.accessToken);\r\n            this.currentUser = this.token.getUser();\r\n            this.accessToken = this.token.getToken();\r\n            this.refreshToken = this.token.getRefreshToken();\r\n          },\r\n          (err) => {\r\n            this.isRefreshing = false;\r\n\r\n            this.token.signOut();\r\n            return throwError(err);\r\n          }\r\n        );\r\n\r\n\r\n    }\r\n  }\r\n\r\n  public openNewTabForApp(webapp: string, webappURLPrefix: string): void {\r\n    var newAccessToken = \"\";\r\n    var newRefreshToken = \"\";\r\n    var newCurrentUser = \"\";\r\n\r\n    if (!this.isRefreshing) {\r\n      const token = this.token.getRefreshToken();\r\n      if (token)\r\n        this.authService.webapptab(token, webapp)\r\n          .then(\r\n          data => {\r\n            this.isRefreshing = false;\r\n            newAccessToken = (data.accessToken);\r\n            newRefreshToken = (data.refreshToken);\r\n            newCurrentUser = (data);\r\n          },\r\n          (reject) => {return throwError(reject.error);})\r\n        .then(() => {this.router.navigate([])\r\n        .then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix);})\r\n        .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\r\n                          this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\r\n                          this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\r\n             (err) => { this.isRefreshing = false;\r\n                        return throwError(err);})});\r\n    }\r\n  }\r\n\r\n\r\n  public openNewWinForApp(webapp: string, webappURLPrefix: string): void {\r\n    var newAccessToken = \"\";\r\n    var newRefreshToken = \"\";\r\n    var newCurrentUser = \"\";\r\n\r\n    if (!this.isRefreshing) {\r\n      const token = this.token.getRefreshToken();\r\n      if (token)\r\n        this.authService.webapptab(token, webapp)\r\n          .then(\r\n            data => {\r\n              this.isRefreshing = false;\r\n              newAccessToken = (data.accessToken);\r\n              newRefreshToken = (data.refreshToken);\r\n              newCurrentUser = (data);\r\n            },\r\n            (reject) => {return throwError(reject.error);})\r\n            .then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix+'start.html',\r\n                        'C-Sharpcorner', 'scrollbars=no');})\r\n            .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\r\n                this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\r\n                this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\r\n              (err) => { this.isRefreshing = false;\r\n                return throwError(err);})\r\n    }\r\n  }\r\n  /*\r\n  forseRefreshToken(): void {\r\n    console.log('Sending forseRefreshToken request...   ');\r\n    this.authInterceptor.forseRefreshToken();\r\n    //authInterceptorProviders.\r\n  }*/\r\n}\r\n","<div class=\"col-md-12\">\r\n  <div class=\"card card-container\">\r\n    <img\r\n      id=\"profile-img\"\r\n      src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n      class=\"profile-img-card\"/>\r\n    <form  *ngIf=\"!isSuccessful\"  name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\"  #f=\"ngForm\"  novalidate>\r\n      <div class=\"form-group\">\r\n        <label for=\"userName\">Username</label>\r\n        <input type=\"text\" class=\"form-control\" name=\"userName\" [(ngModel)]=\"form.userName\"\r\n          required minlength=\"3\" maxlength=\"20\" #userName=\"ngModel\"/>\r\n        <div class=\"alert-danger\" *ngIf=\"userName.errors && f.submitted\">\r\n          <div *ngIf=\"userName.errors.required\">Username is required</div>\r\n          <div *ngIf=\"userName.errors.minlength\">\r\n            Username must be at least 3 characters\r\n          </div>\r\n          <div *ngIf=\"userName.errors.maxlength\">\r\n            Username must be at most 20 characters\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\"\r\n          required email #email=\"ngModel\"/>\r\n        <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\r\n          <div *ngIf=\"email.errors.required\">Email is required</div>\r\n          <div *ngIf=\"email.errors.email\">\r\n            Email must be a valid email address\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"form.password\"\r\n          required minlength=\"6\" #password=\"ngModel\"/>\r\n        <div class=\"alert-danger\" *ngIf=\"password.errors && f.submitted\">\r\n          <div *ngIf=\"password.errors.required\">Password is required</div>\r\n          <div *ngIf=\"password.errors.minlength\">\r\n            Password must be at least 6 characters\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <button class=\"btn btn-primary btn-block\">Sign Up</button>\r\n      </div>\r\n\r\n      <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\r\n        Signup failed!<br />{{ errorMessage }}\r\n      </div>\r\n    </form>\r\n\r\n    <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n      Your registration is successful!\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport {FormControl, Validators} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  form: any = {\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null\r\n  };\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  errorMessage = '';\r\n  empList: Array<String> = [];\r\n  closeResult = '';\r\n\r\n\r\n  constructor(private authService: AuthService) {\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, email, password } = this.form;\r\n\r\n\r\n\r\n    this.authService.register(username, email, password, this.empList).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isSignUpFailed = true;\r\n      }\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n//import { BrowserModule } from '@angular/platform-browser';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\n\nimport {ButtonLanguageComponent} from \"../../stories/buttons/button-language/button-language.component\";\nimport {ButtonFortestComponent} from '../login2/login-main/button-fortest/button-fortest.component';\nimport {ButtonGlobeComponent} from \"../../stories/buttons/button-globe/button-globe.component\";\nimport Background1Component from \"../../stories/pages/background1/background1Component\";\nimport {ButtonTadiranComponent} from \"../../stories/buttons/button-tadiran/button-tadiran.component\";\nimport CardComponent from \"../../stories/cards/card.component\";\nimport LoginFormComponent from \"../../stories/forms/login-form/login-form-component\";\nimport RegistryFormComponent from \"../../stories/forms/registry-form/registry-form.component\";\nimport {ButtonContinueComponent} from \"../../stories/buttons/button-continue/button-continue.component\";\nimport {ButtonExComponent} from \"../../stories/buttons/button-ex/button-ex.component\";\nimport {ButtonAppsComponent} from \"../../stories/buttons/button-apps/button-apps.component\";\nimport {ButtonSuccessfullyComponent} from \"../../stories/buttons/button-successfully/button-successfully.component\";\nimport Button from \"../../stories/buttons/button-example/button.component\";\nimport {AppMenuComponent} from \"../../stories/app-menu/app-menu.component\";\nimport {StoryInputComponent} from \"../../stories/inputs/story-input.component\";\n\n\n\n@NgModule({\n  declarations: [\n    ButtonGlobeComponent, Background1Component, ButtonTadiranComponent, ButtonLanguageComponent,\n    ButtonFortestComponent,\n    CardComponent,\n    LoginFormComponent, LoginFormComponent, RegistryFormComponent,\n    ButtonContinueComponent, ButtonExComponent, ButtonAppsComponent, ButtonSuccessfullyComponent, Button,\n    AppMenuComponent,\n    StoryInputComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule, ReactiveFormsModule,\n  ],\n  exports: [\n    ButtonGlobeComponent, Background1Component, ButtonTadiranComponent, ButtonLanguageComponent,\n    ButtonFortestComponent,\n    CardComponent,\n    LoginFormComponent, LoginFormComponent, RegistryFormComponent,\n    ButtonContinueComponent, ButtonExComponent, ButtonAppsComponent, ButtonSuccessfullyComponent, Button,\n    AppMenuComponent,\n    StoryInputComponent,\n    CommonModule,\n    FormsModule, ReactiveFormsModule,\n  ],\n})\nexport class StorybookModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../inputs/story-input.model\";\r\nimport { AuthService } from '../../app/_services/auth.service';\r\nimport {MdbModalRef} from \"mdb-angular-ui-kit/modal\";\r\n\r\n\r\nexport interface AeonixAppCenterForm {\r\n  username: null, //new FormControl('ea2', Validators.min(2)),\r\n  password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-app-menu',\r\n  templateUrl: './app-menu.component.html',\r\n  styleUrls: ['./app-menu.css'],\r\n})\r\nexport class AppMenuComponent implements OnInit {\r\n\r\n  /*form: AeonixAppCenterForm = {\r\n    username: null,     //new FormControl('ea2', Validators.min(2)),\r\n    password: null      //new FormControl('zaqwsx', Validators.min(2))\r\n  };*/\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassFormComponent);\r\n  }\r\n\r\n  constructor() {\r\n    this.validationForm = new FormGroup({\r\n      username: new FormControl('Telecom2', Validators.minLength(2)),\r\n      //email: new FormControl(null, Validators.email),\r\n      password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n      //phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  validationForm: FormGroup;\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() openNewWinForApp = new EventEmitter<any>();\r\n\r\n  @Output() openNewTabForApp = new EventEmitter<any>();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n    this.credentials.username=this.validationForm.get('username')?.value;\r\n    this.credentials.password=this.validationForm.get('password')?.value;\r\n\r\n    this.openNewWinForApp.emit(this.credentials);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\" ></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <div class=\"Aeonix-App-Center\">\r\n      <a>Aeonix App Center</a>\r\n    </div>\r\n\r\n    <div class=\"grid-container\">\r\n      <div class=\"item1\"><storybook-button-apps application=\"Agent\" label=\"Continue\" type=\"button\"\r\n        id=\"openNewAgentTab\" (click)='this.openNewWinForApp.emit([\"AGENT\",\"/accAgent/\"])' ></storybook-button-apps></div>\r\n      <div class=\"item2\"><storybook-button-apps application=\"WebRT\" label=\"Continue\" type=\"button\"\r\n        id=\"openNewWebRTTab\" (click)='this.openNewTabForApp.emit([\"ACCREALTIME\",\"/accRealTime/\"])' ></storybook-button-apps></div>\r\n      <div class=\"item3\"><storybook-button-apps application=\"GCCS\" label=\"Continue\" type=\"button\"\r\n        id=\"openNewGccsTab\" (click)='this.openNewTabForApp.emit([\"GCCS\",\"/accGCCS/\"])' ></storybook-button-apps></div>\r\n      <div class=\"item4\"><storybook-button-apps application=\"Admin\" label=\"Continue\" type=\"button\"\r\n        ></storybook-button-apps></div>\r\n      <div class=\"item5\"><storybook-button-apps application=\"GCCS\" label=\"Continue\" type=\"button\"\r\n        id=\"openNewGccsTab2\" (click)='this.openNewTabForApp.emit([\"GCCS\",\"/accGCCS/\"])'></storybook-button-apps></div>\r\n    </div>\r\n\r\n\r\n\r\n  </div>\r\n</div>\r\n\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-apps',\n  templateUrl: './button-apps.component.html',\n  styleUrls: ['./button-apps.component.css']\n})\nexport class ButtonAppsComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * What application should the button linked to?\n   */\n  @Input()\n  application: 'Agent' | 'WebRT' | 'GCCS' | 'Admin' = 'Admin';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-apps--primary' : 'storybook-button-apps--secondary';\n\n    return ['storybook-button-apps', `storybook-button-apps--${this.application}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"button-apps\" class=\"container\">\n<div class=\"circle\">\n\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/{{application?.toString()}}.png\" class=\"Apps-Button-Icon center\"  alt=\"apps-button-icon\"/>\n</div>\n\n<div class=\"Button-App-Label \">\n  <div class=\"center mfont\">\n\n    {{ application.toString() }}\n\n  </div>\n</div>\n\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-continue',\n  templateUrl: './button-continue.component.html',\n  /*template: `<div class=\"storybook-button-continue\">\n    <img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n         src=\"./assets/images/img_2.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n  </div>`,*/\n  styleUrls: ['./button-continue.component.scss'],\n})\nexport class ButtonContinueComponent {\n\n  /**\n   * Is this gallery attribute are set?\n   */\n  @Input()\n  gallery = false;\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Continue';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-continue--primary' : 'storybook-button-continue--secondary';\n    const galleryMode = this.gallery ? 'storybook-button-continue--set-in' : 'storybook-button-continue--set-out';\n\n    return ['storybook-button-continue', `storybook-button-continue--${this.size}`, mode, galleryMode];\n  }\n\n\n}\n","<button class=\"login-button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\" >\n{{label}}\n</button>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-ex',\n  templateUrl: './button-ex.component.html',\n  styleUrls: ['./button-ex.component.css']\n})\nexport class ButtonExComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-ex--primary' : 'storybook-button-ex--secondary';\n\n    return ['storybook-button-ex', `storybook-button-ex--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n<button class=\"Vector\" (click)=\"onClick.emit($event)\" >\n\n    <img  [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n       src=\"./assets/images/x_close.png\"\n           class=\"Ex-Icon\"  alt=\"Ex-Icon\"/>\n\n</button>\n\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-globe',\n  templateUrl: './button-globe.component.html',\n  styleUrls: ['./button-globe.component.css']\n})\nexport class ButtonGlobeComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-tadiran--primary' : 'storybook-button-tadiran--secondary';\n\n    return ['storybook-button-tadiran', `storybook-tadiran-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"Vector\">\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/GlobeIcon.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-language',\n  templateUrl: './button-language.component.html',\n  styleUrls: ['./button-language.component.css']\n})\nexport class ButtonLanguageComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-language--primary' : 'storybook-button-language--secondary';\n\n    return ['storybook-button-language', `storybook-language-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"Vector\">\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/language-desktop-icon.png\"\n       srcset=\"./assets/images/language-desktop-icon@2x.png 2x,\n             /assets/images/language-desktop-icon@3x.png 3x\"\n       class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-successfully',\n  templateUrl: './button-successfully.component.html',\n  styleUrls: ['./button-successfully.component.css']\n})\nexport class ButtonSuccessfullyComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-successfully--primary' : 'storybook-button-successfully--secondary';\n\n    return ['storybook-button-successfully', `storybook-button-successfully--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"button-successfully\" class=\"container\">\n<div class=\"circle\">\n\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n     src=\"./assets/images/Vee.png\" class=\"Vee-Icon center\" alt=\"successfully-button-icon\"/>\n</div>\n\n\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-tadiran',\n  /*templateUrl: './button-continue.component.html',*/\n  template: `<div class=\"storybook-button-tadiran\">\n    <img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n         src=\"./assets/images/img_2.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n  </div>`,\n  styleUrls: ['./button-tadiran.component.scss'],\n})\nexport class ButtonTadiranComponent {\n\n  /**\n   * Is this gallery attribute are set?\n   */\n  @Input()\n  gallery = false;\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-tadiran--primary' : 'storybook-button-tadiran--secondary';\n    const galleryMode = this.gallery ? 'storybook-button-tadiran--set-in' : 'storybook-button-tadiran--set-out';\n\n    return ['storybook-button-tadiran', `storybook-button-tadiran--${this.size}`, mode, galleryMode];\n  }\n\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.css']\r\n})\r\nexport default class CardComponent  {\r\n\r\n\r\n\r\n  /**\r\n   * Is this the principal call to action on the login-main?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large'  = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-card--primary' : 'storybook-card--secondary';\r\n\r\n    return ['storybook-card', `storybook-card--${this.size}`, mode];\r\n  }\r\n\r\n\r\n\r\n}\r\n","\r\n  <div class=\"card\">\r\n\r\n  </div>\r\n\r\n\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <div class=\"form-header\">\r\n      <a>Aeonix App Center</a>\r\n    </div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n      <div  *ngIf=\"!isLoggedIn\" class=\"Vector\">\r\n\r\n\r\n\r\n            <div *ngIf=\"isLoggedIn\">isRegSuccess</div>\r\n            <div *ngIf=\"!isLoggedIn && storyInputsInOrder.length === 0\">empty</div>\r\n            <storybook-input\r\n              *ngFor=\"let storyInput of storyInputsInOrder\"\r\n              [storyInput]=\"storyInput\"\r\n              (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n              (onPinInput)=\"onPinInput.emit($event)\"\r\n              [currentForm]=\"mForm\">\r\n            </storybook-input>\r\n\r\n\r\n        <div class=\"login-button\">\r\n          <!--/div>\r\n          <div class=\"Vector\"-->\r\n            <br>\r\n            <div class=\"thematic-break\"></div>\r\n\r\n\r\n\r\n              <a (click)=\"openReplacePassword()\"\r\n                 class=\"forgot-password\"  href=\"#/login\" >\r\n                Forgot password?\r\n              </a>\r\n            <!-- (click)=\"\" openReplacePassword()-->\r\n\r\n              <storybook-button-continue size=\"medium\" label=\"Continue\" type=\"button\" (click)=\"onSubmit()\" ></storybook-button-continue>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n          <div class=\"form-group\">\r\n              <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"isLoginFailed\">\r\n                Login failed: {{ loginErrorMessage }}\r\n              </div>\r\n          </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../../inputs/story-input.model\";\r\nimport { AuthService } from '../../../app/_services/auth.service';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-login-form',\r\n  templateUrl: './login-form-component.html',\r\n  styleUrls: ['./login-form.css'],\r\n})\r\nexport default class LoginFormComponent implements OnInit {\r\n\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassFormComponent);\r\n  }\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup = new FormGroup({}); /* = new FormGroup({\r\n  username: new FormControl('Telecom4', Validators.minLength(2)),\r\n  password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n});*/\r\n\r\n/*\r\n  validationFormInOrder: { [p: string]: AbstractControl } =[];\r\n  @Input()\r\n  set registerForm(arr: FormGroup) {\r\n    this.validationFormInOrder = arr.controls\r\n  }*/\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() newItemEvent = new EventEmitter<any>();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n    this.credentials.username=this.mForm?.get('username')?.value;\r\n    this.credentials.password=this.mForm?.get('password')?.value;\r\n\r\n    this.newItemEvent.emit(this.credentials);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.mForm?.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.mForm?.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\" (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div class=\"form-header\">\r\n      <a class=\"main-form-header\" #formHeader>Complete Registration</a>\r\n      <br>\r\n      <a *ngIf=\"!isRegSuccess\" class=\"sub-form-header\">complete the registration by filling the missing info:</a>\r\n\r\n\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n      <div class=\"Vector\">\r\n\r\n            <div *ngIf=\"!isRegSuccess && storyInputsInOrder.length === 0\">empty</div>\r\n            <div *ngIf=\"!isRegSuccess\">\r\n              <storybook-input\r\n                *ngFor=\"let storyInput of storyInputsInOrder\"\r\n                [storyInput]=\"storyInput\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-input>\r\n            </div>\r\n\r\n            <div *ngIf=\"isRegSuccess\" style=\"margin-top: 50px\">\r\n              <storybook-button-successfully id=\"button-successfully\" style=\"position: relative; margin-top: 50px;\"></storybook-button-successfully>\r\n            </div>\r\n\r\n            <div class=\"login-button\">\r\n\r\n              <div *ngIf=\"!isRegSuccess\" class=\"thematic-break\"></div>\r\n              <storybook-button-continue size=\"medium\" label=\"Continue\" type=\"button\" (click)=\"onSubmit()\" ></storybook-button-continue>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n          <div class=\"form-group\">\r\n              <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"isLoginFailed\">\r\n                Login failed: {{ loginErrorMessage }}\r\n              </div>\r\n          </div>\r\n    </form>\r\n  </div>\r\n  </div>\r\n</div>\r\n\r\n","import {\r\n  AfterViewChecked,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input, OnChanges,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  Renderer2, SimpleChanges, ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {BehaviorSubject} from \"rxjs\";\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-registry-form',\r\n  templateUrl: './registry-form.component.html',\r\n  styleUrls: ['./registry-form.css'],\r\n})\r\nexport default class RegistryFormComponent implements OnInit, AfterViewChecked, OnChanges {\r\n\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassFormComponent);\r\n  }\r\n\r\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\r\n\r\n  constructor(private renderer: Renderer2) {\r\n\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup  = new FormGroup({});\r\n  /*username: new FormControl('', Validators.minLength(2)),\r\n  password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n  email: new FormControl('', Validators.email),\r\n  phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))*/\r\n\r\n  changeLog: string[] = [];\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRegSuccess) {\r\n      if (!changes.isRegSuccess.previousValue &&  changes.isRegSuccess.currentValue) {\r\n        console.warn('Register Request Succeeded!');\r\n        this.loadSuccessfullyLoggedIn();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @Input() isRegSuccess = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() sendRegReq: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Registry Request Sent!');\r\n\r\n    this.sendRegReq.emit();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.mForm?.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.mForm?.get('phone')!;\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    //console.log(this.childComp?.length)\r\n  }\r\n\r\n  loadSuccessfullyLoggedIn(){\r\n    this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully complete your registeration!');\r\n  }\r\n\r\n}\r\n\r\n","\r\n<div class=\"list-item storybook-input Frame-3 {{ storyInput?.state }}\" [formGroup]=\"this.currentForm\">\r\n  <a class=\"user-name D-Caps-Regular\">{{storyInput?.state}}</a>\r\n\r\n  <br>\r\n  <label [attr.aria-label]=\"storyInput?.id + ''\" for=\"{{ storyInput?.title }}\" class=\"Vector2 \">\r\n    <img src=\"{{ storyInput?.icon }}\" class=\"icon-input\" alt=\"icon input userName\"  name=\"{{ storyInput?.title }}\" />\r\n    <div>\r\n    <input type=\"{{storyInput?.type}}\" id=\"{{ storyInput?.id }}\" class=\"DanK203\"\r\n            name=\"{{storyInput?.title}}\" formControlName=\"{{storyInput?.title}}\" required  />\r\n    </div>\r\n<!-- [value]=\"storyInput?.title\"  placeholder=\"{{storyInput?.placeholder}}\"  -->\r\n    <button *ngIf=\"storyInput?.state === 'PASSWORD'\" class=\"icon-input-showpass\" type=\"button\" (click)=\"showPassChange()\">\r\n      <img src=\"./assets/images/EyeIcon.png\" class=\"icon-input-showpass\" alt=\"icon input type\" />\r\n\r\n    </button>\r\n\r\n\r\n\r\n\r\n  <br>\r\n\r\n  <span [ngSwitch]=\"storyInput?.title\" class=\"D-Caps-Regular\"  style=\"line-height: 0\" >\r\n      <span  class=\"position-absolute\"  *ngIf=\"formControler?.invalid && (formControler?.dirty || formControler?.touched)\"  >\r\n          <span *ngSwitchCase=\"'username'\"><br>{{storyInput?.state}} is required!</span>\r\n          <span *ngSwitchCase=\"'password'\"><br>{{storyInput?.state}} is required!</span>\r\n          <span *ngSwitchCase=\"'email'\"   ><br>{{storyInput?.state}} is required!</span>\r\n          <span *ngSwitchCase=\"'phone'\"   ><br>{{storyInput?.state}} is required!</span>\r\n\r\n      </span>\r\n      <div   *ngIf=\"formControler?.valid && (formControler?.dirty || formControler?.touched)\">\r\n        <div *ngSwitchCase=\"'username'\">ok!</div>\r\n        <div *ngSwitchCase=\"'password'\">ok!</div>\r\n        <div *ngSwitchCase=\"'email'\"   >ok!</div>\r\n        <div *ngSwitchCase=\"'phone'\"   >ok!</div>\r\n      </div>\r\n </span>\r\n\r\n  </label>\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport { StoryInput } from './story-input.model'\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-input',\r\n  templateUrl: './story-input.component.html',\r\n  styleUrls: ['./story-input.scss']\r\n})\r\nexport class StoryInputComponent {\r\n\r\n  @Input() storyInput!: StoryInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n\r\n  showPassChange(): void {\r\n    this.storyInput.type = (this.storyInput?.type == 'password' ? 'text' : 'password')\r\n  }\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n\r\n    let alertType = this.storyInput?.title.toString();\r\n\r\n    switch (alertType) {\r\n      case \"username\":\r\n        return this.currentForm.get('username')!;\r\n      case \"password\":\r\n        return this.currentForm.get('password')!;\r\n      default:\r\n        break;\r\n    }\r\n    return this.currentForm.get('username')!;\r\n  }\r\n/*\r\n*/\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\n\n\n\n@Component({\n  selector: 'storybook-background1',\n  templateUrl: './background1Component.html',\n  styleUrls: ['./background1Component.scss']\n})\nexport default class Background1Component {\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = true;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  background?: string;\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Page2Component';\n\n  /*user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n\n  }*/\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-background1--primary' : 'storybook-background1--secondary';\n\n    return ['storybook-background1', mode];\n  }\n\n  constructor() {}\n\n\n\n\n}\n\n","\r\n<figure class=\"Desktop-1Login-1\"  [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': background }\" >\r\n  <!--div [ngStyle]=\"{ 'background-color': background }\" ></div-->\r\n  <img src=\"assets/images/icon-1.webp\" srcset=\"./assets/images/icon-1@2x.webp 2x, /assets/images/icon-1@3x.webp 3x\"\r\n       alt=\"icon-1\" />\r\n\r\n  <img src=\"assets/images/icon-2.webp\" srcset=\"./assets/images/icon-2@2x.webp 2x, /assets/images/icon-2@3x.webp 3x\"\r\n       class=\"icon-2  \" alt=\"icon-2fdf\" />\r\n\r\n\r\n</figure>\r\n\r\n<storybook-button-language size=\"large\"></storybook-button-language>\r\n<storybook-button-tadiran></storybook-button-tadiran>\r\n<storybook-button-globe></storybook-button-globe>\r\n","<div class=\"list-items\">\r\n  <storybook-task\r\n    *ngFor=\"let task of tasksInOrder\"\r\n    [task]=\"task\"\r\n    (onArchiveTask)=\"onArchiveTask.emit($event)\"\r\n    (onPinTask)=\"onPinTask.emit($event)\">\r\n  </storybook-task>\r\n  <div *ngIf=\"tasksInOrder.length === 0 && !loading\" class=\"wrapper-message\">\r\n    <span class=\"icon-check\"></span>\r\n    <p class=\"title-message\">You have no tasks</p>\r\n    <p class=\"subtitle-message\">Sit back and relax</p>\r\n  </div>\r\n  <div *ngIf=\"loading\">\r\n    <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\r\n      <span class=\"glow-checkbox\"></span>\r\n      <span class=\"glow-text\">\r\n           <span>Loading</span> <span>cool</span> <span>state</span>\r\n         </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n","\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Task } from '../task/task.model';\r\n\r\n@Component({\r\n  selector: 'app-task-list',\r\n  templateUrl: './task-list.component.html',\r\n})\r\nexport class TaskListComponent {\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  tasksInOrder: Task[] = [];\r\n\r\n  @Input() loading = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Input()\r\n  set tasks(arr: Task[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'TASK_PINNED'),\r\n      ...arr.filter(t => t.state !== 'TASK_PINNED'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n    );\r\n    this.tasksInOrder = filteredTasks.filter(\r\n      t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n    );\r\n  }\r\n}\r\n","<div class=\"list-item {{ task?.state }}\">\r\n  <label [attr.aria-label]=\"'archiveTask-' + task.id\" for=\"checked-{{ task?.id }}\" class=\"checkbox\">\r\n    <input\r\n      type=\"checkbox\"\r\n      disabled=\"true\"\r\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\r\n      name=\"checked-{{ task?.id }}\"\r\n      id=\"checked-{{ task?.id }}\"\r\n    />\r\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\r\n  </label>\r\n  <label [attr.aria-label]=\"task.title + ''\" for=\"title-{{ task?.id }}\" class=\"title\">\r\n    <input type=\"text\" [value]=\"task.title\" readonly=\"true\" id=\"title-{{ task?.id }}\" name=\"title-{{ task?.id }}\" placeholder=\"Input title\"/>\r\n  </label>\r\n  <button *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" class=\"pin-button\" [attr.aria-label]=\"'pinTask-' + task.id\" (click)=\"onPin(task.id)\">\r\n    <span class=\"icon-star\"></span>\r\n  </button>\r\n</div>\r\n\r\n\r\n<div class=\"list-item {{ task?.state }}\">\r\n  <label [attr.aria-label]=\"'archiveTask-' + task.id\" for=\"checked-{{ task?.id }}\" class=\"checkbox\">\r\n    <input\r\n      type=\"checkbox\"\r\n      disabled=\"true\"\r\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\r\n      name=\"checked-{{ task?.id }}\"\r\n      id=\"checked-{{ task?.id }}\"\r\n    />\r\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\r\n  </label>\r\n  <label [attr.aria-label]=\"task.title + ''\" for=\"title-{{ task?.id }}\" class=\"title\">\r\n    <input type=\"text\" [value]=\"task.title\" readonly=\"true\" id=\"title-{{ task?.id }}\" name=\"title-{{ task?.id }}\" placeholder=\"Input title\"/>\r\n  </label>\r\n  <button *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" class=\"pin-button\" [attr.aria-label]=\"'pinTask-' + task.id\" (click)=\"onPin(task.id)\">\r\n    <span class=\"icon-star\"></span>\r\n  </button>\r\n</div>\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { Task } from './task.model';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-task',\r\n  templateUrl: './task.component.html',\r\n  styleUrls: ['./task.css']\r\n})\r\nexport class TaskComponent {\r\n  @Input() task!: Task;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinTask = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveTask = new EventEmitter<Event>();\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinTask.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveTask.emit(id);\r\n  }\r\n}\r\n"]}