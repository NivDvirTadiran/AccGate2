{"version":3,"sources":["webpack:///$_lazy_route_resources|lazy|groupOptions: {}|namespace object","webpack:///src/app/_helpers/auth.interceptor.ts","webpack:///src/app/_services/auth.service.ts","webpack:///src/app/_services/token-storage.service.ts","webpack:///src/app/_services/user.service.ts","webpack:///src/app/_shared/event-bus.service.ts","webpack:///src/app/_shared/event.class.ts","webpack:///src/app/app-routing.guard.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.config.ts","webpack:///src/app/app.module.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login2/login-main/forgot-pass-form2/forgot-pass-form2.component.ts","webpack:///src/app/login2/login-main/forgot-pass-form2/forgot-pass-form2.component.html","webpack:///src/app/login2/login-main/login-main.component.ts","webpack:///src/app/login2/login-main/login-main.component.html","webpack:///src/app/login2/login-main/register-form2/register-form2.component.ts","webpack:///src/app/login2/login-main/register-form2/register-form2.component.html","webpack:///src/app/login2/login-main/replace-pass-form2/replace-pass-form2.component.ts","webpack:///src/app/login2/login-main/replace-pass-form2/replace-pass-form2.component.html","webpack:///src/app/login2/login-main/reset-pass-form2/reset-pass-form2.component.ts","webpack:///src/app/login2/login-main/reset-pass-form2/reset-pass-form2.component.html","webpack:///src/app/login2/login-main/verification-form2/verification-form2.component.ts","webpack:///src/app/login2/login-main/verification-form2/verification-form2.component.html","webpack:///src/app/login2/login2-routing.module.ts","webpack:///src/app/login2/login2.module.ts","webpack:///src/app/login2/profile2/board-admin/board-admin.component.html","webpack:///src/app/login2/profile2/board-admin/board-admin.component.ts","webpack:///src/app/login2/profile2/board-moderator/board-moderator.component.ts","webpack:///src/app/login2/profile2/board-moderator/board-moderator.component.html","webpack:///src/app/login2/profile2/board-user/board-user.component.ts","webpack:///src/app/login2/profile2/board-user/board-user.component.html","webpack:///src/app/login2/profile2/my-account-form2/my-account-form2.component.ts","webpack:///src/app/login2/profile2/my-account-form2/my-account-form2.component.html","webpack:///src/app/login2/profile2/portal/portal.component.ts","webpack:///src/app/login2/profile2/portal/portal.component.html","webpack:///src/app/login2/profile2/profile2-routing.module.ts","webpack:///src/app/login2/profile2/profile2.module.ts","webpack:///src/app/pipes/api-error-message.pipe.ts","webpack:///src/app/pipes/login-error-message.pipe.ts","webpack:///src/app/storybook/pipes/api-error-message.pipe.ts","webpack:///src/app/storybook/pipes/api-error-message.service.ts","webpack:///src/app/storybook/storybook.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///src/stories/actions/action-avatar/action-avatar.component.ts","webpack:///src/stories/actions/action-avatar/action-avatar.component.html","webpack:///src/stories/actions/action-input/action-input.component.html","webpack:///src/stories/actions/action-input/action-input.component.ts","webpack:///src/stories/app-menu/app-menu.component.html","webpack:///src/stories/app-menu/app-menu.component.ts","webpack:///src/stories/avatars/avatar.component.html","webpack:///src/stories/avatars/avatar.component.ts","webpack:///src/stories/buttons/button-apps/button-apps.component.ts","webpack:///src/stories/buttons/button-apps/button-apps.component.html","webpack:///src/stories/buttons/button-configuration/button-configuration.component.ts","webpack:///src/stories/buttons/button-configuration/button-configuration.component.html","webpack:///src/stories/buttons/button-continue/button-continue.component.ts","webpack:///src/stories/buttons/button-continue/button-continue.component.html","webpack:///src/stories/buttons/button-ex/button-ex.component.ts","webpack:///src/stories/buttons/button-ex/button-ex.component.html","webpack:///src/stories/buttons/button-example/button.component.ts","webpack:///src/stories/buttons/button-exclamation-mark/button-exclamation-mark.component.ts","webpack:///src/stories/buttons/button-exclamation-mark/button-exclamation-mark.component.html","webpack:///src/stories/buttons/button-fortest/button-fortest.component.ts","webpack:///src/stories/buttons/button-fortest/custom-directive/Highlight.directive.ts","webpack:///src/stories/buttons/button-globe/button-globe.component.ts","webpack:///src/stories/buttons/button-globe/button-globe.component.html","webpack:///src/stories/buttons/button-language/button-language.component.ts","webpack:///src/stories/buttons/button-language/button-language.component.html","webpack:///src/stories/buttons/button-successfully/button-successfully.component.ts","webpack:///src/stories/buttons/button-successfully/button-successfully.component.html","webpack:///src/stories/buttons/button-tadiran/button-tadiran.component.ts","webpack:///src/stories/cards/card.component.ts","webpack:///src/stories/cards/card.component.html","webpack:///src/stories/directive/bubble-avatar/bubble-avatar.component.html","webpack:///src/stories/directive/bubble-avatar/bubble-avatar.component.ts","webpack:///src/stories/directive/bubble-avatar/popover.directive.ts","webpack:///src/stories/directive/bubble-input/bubble-input.component.html","webpack:///src/stories/directive/bubble-input/bubble-input.component.ts","webpack:///src/stories/directive/bubble-input/popover-input.directive.ts","webpack:///src/stories/directive/dynamic-comp.directive.ts","webpack:///src/stories/forms/forgot-pass-form/forgot-pass-form.component.html","webpack:///src/stories/forms/forgot-pass-form/forgot-pass-form.component.ts","webpack:///src/stories/forms/login-form/login-form.component.html","webpack:///src/stories/forms/login-form/login-form.component.ts","webpack:///src/stories/forms/my-account-form/my-account-form.component.html","webpack:///src/stories/forms/my-account-form/my-account-form.component.ts","webpack:///src/stories/forms/registry-form/registry-form.component.html","webpack:///src/stories/forms/registry-form/registry-form.component.ts","webpack:///src/stories/forms/replace-pass-form/replace-pass-form.component.html","webpack:///src/stories/forms/replace-pass-form/replace-pass-form.component.ts","webpack:///src/stories/forms/reset-pass-form/reset-pass-form.component.html","webpack:///src/stories/forms/reset-pass-form/reset-pass-form.component.ts","webpack:///src/stories/forms/verification-form/verification-form.component.html","webpack:///src/stories/forms/verification-form/verification-form.component.ts","webpack:///src/stories/inputs/account-input/account-input.component.html","webpack:///src/stories/inputs/account-input/account-input.component.ts","webpack:///src/stories/inputs/code-input/code-input.component.config.ts","webpack:///src/stories/inputs/code-input/code-input.component.html","webpack:///src/stories/inputs/code-input/code-input.component.ts","webpack:///src/stories/inputs/digitcode-input/digitcode-input.component.ts","webpack:///src/stories/inputs/digitcode-input/digitcode-input.component.html","webpack:///src/stories/inputs/input/story-input.component.html","webpack:///src/stories/inputs/input/story-input.component.ts","webpack:///src/stories/pages/background1/background1Component.ts","webpack:///src/stories/pages/background1/background1Component.html","webpack:///src/stories/pass-strength/pass-strength.component.ts","webpack:///src/stories/pass-strength/pass-strength.component.html","webpack:///src/stories/spinners/spinner1/spinner1.component.ts","webpack:///src/stories/spinners/spinner1/spinner1.component.html","webpack:///src/stories/task-list/task-list.component.html","webpack:///src/stories/task-list/task-list.component.ts","webpack:///src/stories/task/task.component.html","webpack:///src/stories/task/task.component.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","TOKEN_HEADER_KEY","AuthInterceptor","tokenService","authService","isRefreshing","refreshTokenSubject","BehaviorSubject","next","authReq","token","getToken","url","includes","addTokenHeader","handle","pipe","catchError","error","HttpErrorResponse","status","handle401Error","throwError","request","getRefreshToken","refreshToken","switchMap","saveToken","accessToken","saveRefreshToken","err","signOut","filter","take","clone","headers","set","subscribe","data","authInterceptorProviders","provide","HTTP_INTERCEPTORS","useClass","multi","AUTH_API","AppConfig","httpOptions","HttpHeaders","AuthService","http","username","password","post","email","phone","responseType","oldPassword","confirmPassword","roles","webapp","webApp","pinCodeToken","TOKEN_KEY","REFRESHTOKEN_KEY","PINCODETOKEN_KEY","USER_KEY","TokenStorageService","window","sessionStorage","clear","removeItem","setItem","user","getUser","saveUser","getItem","JSON","stringify","parse","user1","console","log","toString","API_URL","UserService","get","EventBusService","subject$","Subject","event","eventName","action","name","map","EventData","value","jwtHelper","JwtHelperService","AppRoutingGuard","app","route","state","isApproved","childRoute","component","currentRoute","currentState","nextState","segments","isTokenExpired","routes","path","HomeComponent","loadChildren","m","Login2Module","redirectTo","pathMatch","AppRoutingModule","RouterModule","AppComponent","tokenStorageService","eventBusService","userService","router","isLoggedIn","showAdminBoard","showModeratorBoard","eventBusSub","on","logout","is2SVRequired","unsubscribe","navigate","isTowStepVerRequired","message","workingModeConfiguration","parsedUrl","URL","location","href","hostname","port","protocol","APP_CONFIG","InjectionToken","accServer","ACCWEBServers","endpoints","runMode","TSV","AppModule","LocationStrategy","HashLocationStrategy","BrowserModule","HttpClientModule","NgbDatepickerModule","MdbAccordionModule","MdbCarouselModule","MdbCheckboxModule","MdbCollapseModule","MdbDropdownModule","MdbFormsModule","MdbModalModule","MdbPopoverModule","MdbRadioModule","MdbRangeModule","MdbRippleModule","MdbScrollspyModule","MdbTabsModule","MdbTooltipModule","MdbValidationModule","BrowserAnimationsModule","ModalModule","ButtonsModule","MDBBootstrapModule","Profile2Module","StorybookModule","MatDialogModule","MatButtonModule","ApiErrorMessagePipe","LoginErrorMessagePipe","platformBrowser","bootstrapModule","ACC_VERSION","content","getPublicContent","getAccVersion","ForgotPassForm2Component","renderer","tokenStorage","dialogRef","isVerSuccess","isRecSuccess","isVerFailed","verErrorMessage","isLoading","submitted","empList","apiResponse","errorFieldSubmitted","closeResult","storyInputsInOrder","title","icon","type","placeholder","hide","forgotPassForm","FormGroup","FormControl","Validators","push","close","getRawValue","TSV_ValidateCodeByName","savePinCodeToken","errorResponse","ResetPassByMail","MAT_DIALOG_DATA","onSubmit","generateNewCodeFor2SV","LoginMainComponent","forgotPassFormDialog","registerFormDialog","replacePassFormDialog","verificationFormDialog","activatedRoute","isLoginFailed","loginErrorMessage","primary","label","loginForm","mode","forgotPassFormDialogRef","open","getUsernameCurrentFieldValue","afterClosed","result","toPromise","registerFormDialogRef","getPasswordCurrentFieldValue","replacePassFormDialogRef","ReplacePassForm2Component","beforeClosed","setUsernameCurrentFieldValue","setPasswordCurrentFieldValue","verificationFormDialogRef","emit","openVerificationForm","setValue","pass","warn","login","profile2","openRegisterForm","val","undefined","openReplacePassForm","reload","relativeTo","openForgotPassForm","RegisterForm2Component","isRegSuccess","isRegFailed","validateMail","EventEmitter","registerForm","PasswordValidators","RegExp","requiresPhoneChars","regErrorMessage","isRepSuccess","isRepFailed","repErrorMessage","replacePassForm","userName","patternValidator","requiresDigit","requiresUppercase","requiresLowercase","requiresSpecialChars","changePassword","getPinCodeToken","TSV_ReplacePassForm","regex","control","valid","test","ResetPassForm2Component","VerificationForm2Component","verificationForm","TSV_GenerateCodeByName","canActivate","Login2RoutingModule","TaskComponent","TaskListComponent","BoardAdminComponent","form","isSuccessful","isSignUpFailed","errorMessage","rolesList","getAdminBoard","register","BoardModeratorComponent","getModeratorBoard","BoardUserComponent","getUserBoard","MyAccountForm2Component","currentUser","getAccountDetails","accountDetails","setUsername","setEmail","setPhone","isSupervisorAdmin","doLogout","openChangePassword","openUser","PortalComponent","myAccountFormDialog","permittedWebAppList","realtime","scriptDesigner","agent","aeonixAdmin","admin","passExp","previousAlertPassExp","myAccountFormDialogRef","setPassExpAlertData","setPermittedWebAppList","configuratin","getPassExpireDate","getPermittedWebAppList","origin","windowObjectReference","document","getElementById","innerHTML","promise","reject","appRequest","values","webappURLPrefix","newAccessToken","newRefreshToken","newCurrentUser","timeout","prom","time","exception","timer","race","_r","rej","setTimeout","clearTimeout","webapptab","timeoutError","Symbol","openNewWinForApp","openNewTabForApp","Profile2RoutingModule","dataToArray","split","item","trim","join","apiErrorMessageService","args","language","apiErrorMessage","ApiErrorMessageService","languages","dictionary","languange","eng","key","TranslationSet","AvatarComponent","CommonModule","FormsModule","ReactiveFormsModule","ButtonGlobeComponent","ButtonTadiranComponent","ButtonLanguageComponent","ButtonFortestComponent","ButtonContinueComponent","ButtonExComponent","ButtonAppsComponent","ButtonSuccessfullyComponent","ButtonConfigurationComponent","AppMenuComponent","StoryInputComponent","DigitcodeInputComponent","CodeInputComponent","AccountInputComponent","HighlightDirective","DynamicCompDirective","ActionAvatarComponent","PopoverDirective","BubbleAvatarComponent","ActionInputComponent","PopoverInputDirective","BubbleInputComponent","ButtonExclamationMarkComponent","Spinner1Component","environment","production","enableProdMode","actionHeader","actionButton","bubbleOn","actionInputs","credentials","onPinInput","onArchiveInput","validationForm","arr","initialTasks","t","filteredTasks","popover","header","isNotify","size","onClick","isDisabled","application","gallery","galleryMode","ButtonComponent","eleRef","nativeElement","style","color","colorName","CardComponent","componentFactoryResolver","show","isDynamic","triggerDetectionChange","options","componentFactory","resolveComponentFactory","viewContainerRef","actionAvatarComponentRef","createComponent","instance","setHeader","setBubbleOn","$event","_viewContainerRef","carComponentRef","el","viewContainer","avatarButton","popoverComponentRef","showPopup","hidePopup","factory","comp","create","injector","display","classList","add","appendChild","hostView","detectChanges","actionInputComponentRef","setConditions","length","setData","ForgotPassFormComponent","codeLength","param","formButtonLabel","formButtonClick","sendVerificationReq","clickXButton","changeLog","mForm","popoverOptions","changes","previousValue","currentValue","movToVerifyState","setProperty","formHeader","secondHeader","appDynamicComp","codeInputComponentRef","codeChanged","onCodeChanged","LoginFormComponent","sendLoginReq","openForgetPassForm","MyAccountFormComponent","onLogout","displayToolButton","sendRegReq","loadSuccessfullyLoggedIn","mainHeader","RegistryFormComponent","ReplacePassFormComponent","ResetPassFormComponent","info","reset","VerificationFormComponent","codeInput","hideInput","isStrength","storyInput","isPasswordTextHide","conditionList","currentForm","controllerType","passConditions","forEach","condition","minLengthValid","formControler","requiresUppercaseValid","requiresLowercaseValid","requiresDigitValid","requiresSpecialCharsValid","requiresEmailValid","requiresPhoneValid","errors","hasError","CodeInputComponentConfigToken","defaultComponentConfig","inputType","inputMode","initialFocusField","isCharsCode","isCodeHidden","isPrevFocusableAfterClearing","isFocusingOnLastByClickIfFilled","disabled","autocapitalize","InputState","config","isNonDigitsCode","codeCompleted","placeholders","inputs","inputsStates","isFocusingAfterAppearingCompleted","isInitialFocusFieldEnabled","Object","assign","prop","hasOwnProperty","isEmpty","onCodeLengthChanges","inputsListSubscription","inputsList","onInputsListChanges","bind","focusOnInputAfterAppearing","onInputCodeChanges","isChangesEmitting","focusOnField","emitChanges","index","_codeLength","focus","target","last","isFilled","getCurrentFilledCode","i","canInputValue","preventDefault","stopPropagation","setInputValue","setStateForInput","j","blur","clipboardData","getData","valIndex","input","isTargetEmpty","prev","isBackspaceKey","isDeleteKey","chars","isAllCharsAreAllowed","char","numbers","Array","fill","splice","list","inputsToAdd","states","ready","emitCode","isBackspace","toLowerCase","keyCode","isReset","getStateForInput","selectionStart","valueClassCSS","emptyClassCSS","remove","parentElement","isDigitsValue","indexOf","onPaste","onInput","onKeydown","Background1Component","PassStrengthComponent","strength","measureStrength","strengthColor","score","letters","variations","digits","lower","upper","nonWords","variationCount","check","Math","trunc","onArchiveTask","onPinTask","tasksInOrder","loading","onArchive"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 98255;\nmodule.exports = webpackEmptyAsyncContext;","import { HTTP_INTERCEPTORS, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\n\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\r\n\r\n const TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\r\n//const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  private isRefreshing = false;\r\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  constructor(private tokenService: TokenStorageService, private authService: AuthService) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    let authReq = req;\r\n    const token = this.tokenService.getToken();\r\n    if (token != null && !authReq.url.includes('test/')) {\r\n      authReq = this.addTokenHeader(req, token);\r\n      // for Spring Boot back-end\r\n      // authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n\r\n      // for Node.js Express back-end\r\n      //authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\r\n    }\r\n    return next.handle(authReq).pipe(catchError(error => {\r\n      if (error instanceof HttpErrorResponse && !authReq.url.includes('auth/signin') && error.status === 401) {\r\n        return this.handle401Error(authReq, next);\r\n      }\r\n      return throwError(error);\r\n    }));\r\n  }\r\n\r\n\r\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshTokenSubject.next(null);\r\n      const token = this.tokenService.getRefreshToken();\r\n      if (token)\r\n        return this.authService.refreshToken(token).pipe(\r\n          switchMap((token: any) => {\r\n            this.isRefreshing = false;\r\n            this.tokenService.saveToken(token.accessToken);\r\n            this.tokenService.saveRefreshToken(token.refreshToken);\r\n            this.refreshTokenSubject.next(token.accessToken);\r\n\r\n            return next.handle(this.addTokenHeader(request, token.accessToken));\r\n          }),\r\n          catchError((err) => {\r\n            this.isRefreshing = false;\r\n\r\n            this.tokenService.signOut();\r\n            return throwError(err);\r\n          })\r\n        );\r\n    }\r\n    return this.refreshTokenSubject.pipe(\r\n      filter(token => token !== null),\r\n      take(1),\r\n      switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n    );\r\n  }\r\n  private addTokenHeader(request: HttpRequest<any>, token: string) {\r\n    /* for Spring Boot back-end */\r\n     return request.clone({ headers: request.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n    /* for Node.js Express back-end */\r\n    //return request.clone({ headers: request.headers.set(TOKEN_HEADER_KEY, token) });\r\n  }\r\n/*\r\n  public forseRefreshToken2() {\r\n    const token = this.tokenService.getRefreshToken();\r\n    if (token)\r\n      this.authService.refreshToken(token).pipe(\r\n        switchMap((token: any) => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.saveToken(token.accessToken);\r\n          this.refreshTokenSubject.next(token.accessToken);\r\n\r\n          filter(token => token !== null),\r\n            take(1),\r\n            switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n        }),\r\n        catchError((err) => {\r\n          this.isRefreshing = false;\r\n\r\n          this.tokenService.signOut();\r\n          return throwError(err);\r\n        })\r\n      );\r\n  }\r\n*/\r\n  public forseRefreshToken(): void {\r\n    const token = this.tokenService.getRefreshToken();\r\n    if (token)\r\n      this.authService.refreshToken(token).subscribe(\r\n        data => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.saveToken(data.accessToken);\r\n          this.refreshTokenSubject.next(data.accessToken);\r\n\r\n\r\n        },\r\n        (err) => {\r\n          this.isRefreshing = false;\r\n\r\n          this.tokenService.signOut();\r\n          return throwError(err);\r\n        }\r\n      );\r\n  }\r\n}\r\n\r\nexport const authInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n];\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AppConfig} from \"../app.config\";\r\n\r\n\r\n\r\nconst AUTH_API = AppConfig.accServer.ACCWEBServers+'/accGate/auth/';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signin', {\r\n      username,\r\n      password\r\n    }, httpOptions);\r\n  }\r\n\r\n  registerForm(username: string, email: string, password: string, phone: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'register-form', {\r\n      username,\r\n      email,\r\n      password,\r\n      phone,\r\n    }, {responseType: 'text'});\r\n  }\r\n\r\n  replacePassForm(username: string, oldPassword: string, password: string, confirmPassword: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'replace-pass-form', {\r\n      username,\r\n      oldPassword,\r\n      password,\r\n      confirmPassword,\r\n    }, {responseType: 'text'});\r\n  }\r\n\r\n  register(username: string, email: string, password: string, roles: Array<String>): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signup', {\r\n      username,\r\n      email,\r\n      password,\r\n      roles,\r\n    }, httpOptions);\r\n  }\r\n\r\n  getToken(url: string, username: string, email: string, password: string): Observable<any> {\r\n    return this.http.post(url, {\r\n      username,\r\n      email,\r\n      password\r\n    }, httpOptions);\r\n  }\r\n\r\n  // login, register\r\n  refreshToken(token: string): Observable<any>  {\r\n    return this.http.post(AUTH_API + 'refreshtoken', {\r\n      refreshToken: token\r\n    }, httpOptions);\r\n  }\r\n\r\n  // open app in a new browser tab\r\n  webapptab(token: string, webapp: string): Observable<any>  {\r\n    return this.http.post(AUTH_API + 'webapptab', {\r\n      refreshToken: token,\r\n      webApp: webapp\r\n    }, httpOptions);\r\n  }\r\n\r\n  getPassExpireDate(token: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'passexpdate', {\r\n      accessToken: token,\r\n    }, httpOptions);\r\n  }\r\n\r\n\r\n  getPermittedWebAppList(token: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'permitwebapplist', {\r\n      accessToken: token,\r\n    }, httpOptions);\r\n  }\r\n\r\n  getAccountDetails(token: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'accountdetails', {\r\n      accessToken: token,\r\n    }, httpOptions);\r\n  }\r\n\r\n  TSV_ValidateCodeByName(username: string, email: string, code: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'tsv_codevalidatebyname', {\r\n      username,\r\n      email,\r\n      code,\r\n    }, httpOptions);\r\n  }\r\n\r\n  TSV_ReplacePassForm(username: string, oldPassword: string, password: string,\r\n                      confirmPassword: string, pinCodeToken: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'tsv_replace-pass-form', {\r\n      username,\r\n      oldPassword,\r\n      password,\r\n      confirmPassword,\r\n      pinCodeToken,\r\n    }, httpOptions);\r\n  }\r\n\r\n\r\n  ResetPassByMail( username: string, email: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'forgotpassword', {\r\n      username,\r\n      email,\r\n    }, httpOptions);\r\n  }\r\n\r\n  TSV_GenerateCodeByName( username: string, email: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'tsv_codegeneratebyname', {\r\n      username,\r\n      email,\r\n    }, httpOptions);\r\n  }\r\n\r\n  TSV_GenerateCodeByEmail( username: string, email: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'tsv_codegeneratebyemail', {\r\n      username,\r\n      email,\r\n    }, httpOptions);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nconst TOKEN_KEY = 'token';\r\nconst REFRESHTOKEN_KEY = 'auth-refreshtoken';\r\nconst PINCODETOKEN_KEY = 'auth-pincodetoken';\r\nconst USER_KEY = 'user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenStorageService {\r\n  constructor() { }\r\n\r\n  signOut(): void {\r\n    window.sessionStorage.clear();\r\n  }\r\n\r\n  public saveToken(token: string): void {\r\n    window.sessionStorage.removeItem(TOKEN_KEY);\r\n    window.sessionStorage.setItem(TOKEN_KEY, token);\r\n    const user = this.getUser();\r\n    if (user.id) {\r\n      this.saveUser({ ...user, accessToken: token });\r\n    }\r\n  }\r\n\r\n  public getToken(): string | null {\r\n    return window.sessionStorage.getItem(TOKEN_KEY);\r\n  }\r\n\r\n  public saveRefreshToken(token: string): void {\r\n    window.sessionStorage.removeItem(REFRESHTOKEN_KEY);\r\n    window.sessionStorage.setItem(REFRESHTOKEN_KEY, token);\r\n    const user = this.getUser();\r\n    if (user.id) {\r\n      user.refreshToken = token;\r\n      this.saveUser(user);\r\n    }\r\n  }\r\n\r\n  public getRefreshToken(): string | null {\r\n    return window.sessionStorage.getItem(REFRESHTOKEN_KEY);\r\n  }\r\n\r\n  public savePinCodeToken(token: string): void {\r\n    window.sessionStorage.removeItem(PINCODETOKEN_KEY);\r\n    window.sessionStorage.setItem(PINCODETOKEN_KEY, token);\r\n  }\r\n\r\n  public getPinCodeToken(): string | null {\r\n    return window.sessionStorage.getItem(PINCODETOKEN_KEY);\r\n  }\r\n\r\n  public saveUser(user: any): void {\r\n    window.sessionStorage.removeItem(USER_KEY);\r\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\r\n  }\r\n\r\n  public getUser(): any {\r\n    const user = window.sessionStorage.getItem(USER_KEY);\r\n    if (user) {\r\n      return JSON.parse(user);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  public getRoles(): any {\r\n    const user = this.getUser();\r\n    if (user.roles) {\r\n      return user.roles;\r\n    }\r\n    return {};\r\n  }\r\n\r\n\r\n  public isSupervisorAdmin(): boolean {\r\n    const user1 = this.getUser();\r\n     console.log(user1.roles.toString());\r\n     console.log((user1.roles.toString() === 'SupervisorAdmin').toString());\r\n    return (user1.roles.toString() === 'SupervisorAdmin');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AppConfig} from \"../app.config\";\r\n\r\nconst API_URL = AppConfig.accServer.ACCWEBServers+'/accGate/test/';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getPublicContent(): Observable<any> {\r\n    return this.http.get(API_URL + 'all', { responseType: 'text' });\r\n  }\r\n\r\n  getAccVersion(): Observable<any> {\r\n    return this.http.get(API_URL + 'accversion', { responseType: 'text' });\r\n  }\r\n\r\n  isTowStepVerRequired(): Observable<any> {\r\n    return this.http.get(API_URL + 'istsvon', httpOptions);\r\n  }\r\n\r\n  getUserBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'user', { responseType: 'text' });\r\n  }\r\n\r\n  getModeratorBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'mod', { responseType: 'text' });\r\n  }\r\n\r\n  getAdminBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'admin', { responseType: 'text' });\r\n  }\r\n\r\n  getAccountDetails(): Observable<any> {\r\n    return this.http.get(API_URL + 'accountdetails', { responseType: 'text' });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { EventData } from './event.class';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventBusService {\r\n  private subject$ = new Subject<EventData>();\r\n  constructor() { }\r\n  emit(event: EventData) {\r\n    this.subject$.next(event);\r\n  }\r\n  on(eventName: string, action: any): Subscription {\r\n    return this.subject$.pipe(\r\n      filter((e: EventData) => e.name === eventName),\r\n      map((e: EventData) => e[\"value\"])).subscribe(action);\r\n  }\r\n}\r\n","export class EventData {\r\n  name: string;\r\n  value: any;\r\n  constructor(name: string, value: any) {\r\n    this.name = name;\r\n    this.value = value;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanDeactivate, CanLoad, Route, RouterStateSnapshot, UrlSegment, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AppComponent } from './app.component';\r\nimport {TokenStorageService} from \"./_services/token-storage.service\";\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n\r\nconst jwtHelper = new JwtHelperService();\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppRoutingGuard implements CanActivate, CanActivateChild, CanDeactivate<unknown>, CanLoad {\r\n\r\n  constructor(private app: AppComponent,\r\n              private tokenService: TokenStorageService) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n  canActivateChild(\r\n    childRoute: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n  canDeactivate(\r\n    component: unknown,\r\n    currentRoute: ActivatedRouteSnapshot,\r\n    currentState: RouterStateSnapshot,\r\n    nextState?: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n  canLoad(\r\n    route: Route,\r\n    segments: UrlSegment[]): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n\r\n\r\n  private isApproved(): boolean {\r\n\r\n    const token = this.tokenService.getToken();\r\n    console.log('guard check for authentication..' + !jwtHelper.isTokenExpired(this.tokenService.getToken()) );\r\n    return !jwtHelper.isTokenExpired(this.tokenService.getToken());\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\n\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'login2', loadChildren: () => import('./login2/login2.module').then(m => m.Login2Module), },\r\n\r\n  { path: '', redirectTo: 'login2', pathMatch: 'full' },\r\n  { path: '**', redirectTo: 'login2',  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes/*, {useHash: true}*/)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit, OnDestroy  } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { TokenStorageService } from './_services/token-storage.service';\r\nimport { EventBusService } from './_shared/event-bus.service';\r\nimport {Router} from \"@angular/router\";\r\nimport {workingModeConfiguration} from \"./app.config\";\r\nimport { UserService } from 'src/app/_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  private roles: string[] = [];\r\n  public isLoggedIn = false;\r\n  showAdminBoard = false;\r\n  showModeratorBoard = false;\r\n  username?: string;\r\n  eventBusSub?: Subscription;\r\n  title?: 'accGate';\r\n\r\n  constructor(private tokenStorageService: TokenStorageService,\r\n              private eventBusService: EventBusService,\r\n              private userService: UserService,\r\n              private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\r\n\r\n    if (this.isLoggedIn) {\r\n      const user = this.tokenStorageService.getUser();\r\n      this.roles = user.roles;\r\n\r\n      this.showAdminBoard = (this.roles.includes('Admin') || this.roles.includes('SupervisorAdmin'));\r\n      this.showModeratorBoard = this.roles.includes('SupervisorMonitor');\r\n\r\n      this.username = user.username;\r\n    }\r\n\r\n    this.eventBusSub = this.eventBusService.on('logout', () => {\r\n      this.logout();\r\n    });\r\n\r\n    this.eventBusSub = this.eventBusService.on('is2SVRequired', () => {\r\n      this.is2SVRequired();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.eventBusSub)\r\n      this.eventBusSub.unsubscribe();\r\n  }\r\n\r\n  logout(): void {\r\n    console.log(\"logging out\")\r\n    this.tokenStorageService.signOut();\r\n    this.isLoggedIn = false;\r\n    this.roles = [];\r\n    this.showAdminBoard = false;\r\n    this.showModeratorBoard = false;\r\n    this.router.navigate(['/login2']);\r\n  }\r\n\r\n  is2SVRequired(): void {\r\n    console.log(\"is2SVRequired: \")\r\n    this.userService.isTowStepVerRequired().subscribe(\r\n      data => { console.log(\"data.data: \" + data.data);\r\n        console.log(\"data.message: \" + data.message);\r\n        workingModeConfiguration.runMode.TSV = (data.data);\r\n        console.log(\"workingModeConfiguration.runMode.TSV: \" + workingModeConfiguration.runMode.TSV.toString());},\r\n      err => { console.log(\"Can't detect 2SV operation mode:  \"+ err.error); }\r\n    );\r\n  }\r\n}\r\n","\r\n<router-outlet  id=\"app\" ></router-outlet>\r\n\r\n<!--div id=\"app\">\r\n  <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\r\n\r\n    <a href=\"#\" class=\"navbar-brand\">\r\n      <img _ngcontent-c0=\"accGate\" class=\"nav-img\" srcset=\"./assets/images/TadiranTelecom2.webp\"  width=\"56\"\r\n           height=\"56\"><label>accGate</label>\r\n    </a>\r\n    <ul class=\"navbar-nav mr-auto\" routerLinkActive=\"active\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/login-main\" class=\"nav-link\" routerLink=\"login-main\">Page </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/home\" class=\"nav-link\" routerLink=\"home\">Home </a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showAdminBoard\">\r\n        <a href=\"/admin\" class=\"nav-link\" routerLink=\"admin\">Admin Board</a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showModeratorBoard\">\r\n        <a href=\"/mod\" class=\"nav-link\" routerLink=\"mod\">Moderator Board</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/user\" class=\"nav-link\" *ngIf=\"isRegSuccess\" routerLink=\"user\">User</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"!isRegSuccess\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/register\" class=\"nav-link\" routerLink=\"register\">Sign Up</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/login\" class=\"nav-link\" routerLink=\"login\">Login</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"isRegSuccess\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/profile\" class=\"nav-link\" routerLink=\"profile\">{{ username }}</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href class=\"nav-link\" (click)=\"logout()\">LogOut</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div-->\r\n","import {InjectionToken} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n// parse ful url to ip,port, params\r\nvar parsedUrl = new URL(window.location.href);\r\nvar url = parsedUrl.hostname;\r\nvar port = parsedUrl.port;\r\nvar protocol = parsedUrl.protocol;\r\nconst AUTH_API = protocol + \"//\" + url + \":\" + port;\r\n\r\nexport let APP_CONFIG = new InjectionToken('app.config');\r\nexport const AppConfig = {\r\n  accServer: {\r\n    ACCWEBServers: AUTH_API //'https://172.28.8.245:8445'\r\n  },\r\n  endpoints: {\r\n\r\n    TOKEN_KEY: 'token',\r\n    REFRESHTOKEN_KEY: 'auth-refreshtoken',\r\n    USER_KEY: 'user'\r\n  }\r\n};\r\nexport let workingModeConfiguration = {\r\n  runMode: {\r\n    TSV: false,\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\r\n\r\n//import { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\n\r\n\r\n\r\nimport { authInterceptorProviders } from './_helpers/auth.interceptor';\r\nimport {NgbDatepickerModule} from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { MdbAccordionModule } from 'mdb-angular-ui-kit/accordion';\r\nimport { MdbCarouselModule } from 'mdb-angular-ui-kit/carousel';\r\nimport { MdbCheckboxModule } from 'mdb-angular-ui-kit/checkbox';\r\nimport { MdbCollapseModule } from 'mdb-angular-ui-kit/collapse';\r\nimport { MdbDropdownModule } from 'mdb-angular-ui-kit/dropdown';\r\nimport { MdbFormsModule } from 'mdb-angular-ui-kit/forms';\r\nimport { MdbModalModule } from 'mdb-angular-ui-kit/modal';\r\nimport { MdbPopoverModule } from 'mdb-angular-ui-kit/popover';\r\nimport { MdbRadioModule } from 'mdb-angular-ui-kit/radio';\r\nimport { MdbRangeModule } from 'mdb-angular-ui-kit/range';\r\nimport { MdbRippleModule } from 'mdb-angular-ui-kit/ripple';\r\nimport { MdbScrollspyModule } from 'mdb-angular-ui-kit/scrollspy';\r\nimport { MdbTabsModule } from 'mdb-angular-ui-kit/tabs';\r\nimport { MdbTooltipModule } from 'mdb-angular-ui-kit/tooltip';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ModalModule, ButtonsModule, MDBBootstrapModule } from 'angular-bootstrap-md';\r\n\r\nimport {ApiErrorMessagePipe} from \"./pipes/api-error-message.pipe\";\r\nimport {LoginErrorMessagePipe} from \"./pipes/login-error-message.pipe\";\r\n\r\n\r\nimport {Login2Module} from \"./login2/login2.module\";\r\nimport {StorybookModule} from \"./storybook/storybook.module\";\r\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\r\nimport {MdbValidationModule} from \"mdb-angular-ui-kit/validation\";\r\nimport {MatDialogModule} from \"@angular/material/dialog\";\r\nimport {MatButtonModule} from \"@angular/material/button\";\r\nimport ForgotPassForm2Component from \"./login2/login-main/forgot-pass-form2/forgot-pass-form2.component\";\r\nimport ResetPassForm2Component from \"./login2/login-main/reset-pass-form2/reset-pass-form2.component\";\r\nimport {AppRoutingModule} from \"./app-routing.module\";\r\nimport {Profile2Module} from \"./login2/profile2/profile2.module\";\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        HomeComponent,\r\n        ApiErrorMessagePipe,\r\n        LoginErrorMessagePipe,\r\n        ForgotPassForm2Component,\r\n        ResetPassForm2Component,\r\n\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        AppRoutingModule,\r\n        HttpClientModule,\r\n        NgbDatepickerModule,\r\n        MdbAccordionModule,\r\n        MdbCarouselModule,\r\n        MdbCheckboxModule,\r\n        MdbCollapseModule,\r\n        MdbDropdownModule,\r\n        MdbFormsModule,\r\n        MdbModalModule,\r\n        MdbPopoverModule,\r\n        MdbRadioModule,\r\n        MdbRangeModule,\r\n        MdbRippleModule,\r\n        MdbScrollspyModule,\r\n        MdbTabsModule,\r\n        MdbTooltipModule,\r\n        MdbValidationModule,\r\n        BrowserAnimationsModule,\r\n        ModalModule,\r\n        ButtonsModule,\r\n        MDBBootstrapModule.forRoot(),\r\n        Login2Module,\r\n        Profile2Module,\r\n        StorybookModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n\r\n\r\n    ],\r\n    providers: [\r\n        authInterceptorProviders,\r\n        AppComponent,\r\n        {provide: LocationStrategy, useClass: HashLocationStrategy}\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  public ACC_VERSION: string = 'ACC_VERSION';\r\n  content?: string = 'Aeonix | Tadiran Telecom';\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getPublicContent().subscribe(\r\n      data => { this.content = data; },\r\n      err => { this.content = JSON.parse(err.error).message; }\r\n    );\r\n    this.userService.getAccVersion().subscribe(\r\n      data => { this.ACC_VERSION = data; },\r\n      err => { this.ACC_VERSION = JSON.parse(err.error).message; }\r\n    );\r\n  }\r\n}\r\n","<div class=\"container \">\r\n  <br>\r\n  <header class=\"background jumbotron  \">\r\n    <h1 class=\"font_0\">\r\n      <span class=\"\" style=\"font-size:44px;\">\r\n        <dl>\r\n          <dt><span>{{ content }}</span></dt>\r\n          <dd><span>{{ ACC_VERSION }}</span></dd>\r\n        </dl>\r\n      </span>\r\n    </h1>\r\n  </header>\r\n\r\n  <storybook-button-fortest></storybook-button-fortest>\r\n  <aside>\r\n    <!-- Card -->\r\n    <div class=\"fa-pull-right bg-image card shadow-1-strong card-img\">\r\n      <div class=\"card-body text-white\">\r\n        <h5 class=\"card-title\">Card title</h5>\r\n        <p class=\"card-text\">\r\n          Some quick example text to build on the card title and make up the bulk of the\r\n          card's content.\r\n        </p>\r\n        <a href=\"#!\" class=\"btn btn-outline-light\">Button</a>\r\n      </div>\r\n    </div>\r\n    <!-- Card -->\r\n  </aside>\r\n\r\n  <div class=\"alert alert-success  \" role=\"alert\">\r\n    <h4 class=\"alert-heading \">Well done!</h4>\r\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\r\n    <hr>\r\n    <p class=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\r\n  </div>\r\n\r\n</div>\r\n","import {Component, ElementRef, Inject, OnInit, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nexport interface TSVData {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'forgot-pass-form2',\r\n  templateUrl: './forgot-pass-form2.component.html',\r\n  styleUrls: ['./forgot-pass-form2.component.css']\r\n})\r\nexport default class ForgotPassForm2Component implements OnInit {\r\n  forgotPassForm: FormGroup;\r\n  status = {\r\n    isVerSuccess: false,\r\n    isRecSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }\r\n\r\n  public isLoading = false;\r\n  submitted = false;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n  ];\r\n\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private tokenStorage: TokenStorageService,\r\n              public dialogRef: MatDialogRef<ForgotPassForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: TSVData) {\r\n    this.forgotPassForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //this.generateNewCodeFor2SV();\r\n  }\r\n\r\n  onSubmit(code: string): void {\r\n    if (this.status.isVerSuccess) {\r\n      this.dialogRef.close({message: 'Successful verification', data: this.data});\r\n    }\r\n    this.submitted = true;\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.data.username = username;\r\n\r\n    this.isLoading = true;\r\n    this.authService.TSV_ValidateCodeByName(username, this.data.email, code).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.tokenStorage.savePinCodeToken(data.pinCodeToken);\r\n        this.status.isVerSuccess = true;\r\n        this.status.isVerFailed = false;\r\n        this.errorFieldSubmitted = {} ;\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful verification';\r\n      },\r\n      error => {\r\n        const errorResponse = error.error;\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Verification error';\r\n        this.status.verErrorMessage = error.error.message;\r\n        this.status.isVerFailed = true;\r\n        this.errorFieldSubmitted = errorResponse.message;\r\n        console.log(errorResponse);\r\n        this.isLoading = false;\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Validate Code Request Finished\");}\r\n    );\r\n  }\r\n\r\n  generateNewCodeFor2SV() {\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.isLoading = true;\r\n    this.authService.ResetPassByMail(username, this.data.email).subscribe(\r\n      data => {\r\n          if (data.message == \"Password successfully sent to email!\") {\r\n            this.status.isRecSuccess = true;\r\n          }\r\n        console.log(\"Generating Temporary Password Succeeded\", data);\r\n      },\r\n      error => {\r\n        this.isLoading = false;\r\n        console.log(\"Error: Can't generate temporary password for user \");\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Sending generation temporary password request complete\");\r\n      });\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.forgotPassForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.forgotPassForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.forgotPassForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.forgotPassForm.get('phone')!;\r\n  }\r\n}\r\n","\r\n<storybook-forgot-pass-form\r\n  [status]=\"status\"\r\n  [isLoading]=\"isLoading\"\r\n  [isVerSuccess]=\"status.isVerSuccess\"\r\n  [isRecSuccess]=\"status.isRecSuccess\"\r\n  [storyInputs]=\"storyInputsInOrder\"\r\n  [mForm]=\"forgotPassForm\"\r\n  (sendVerificationReq)=\"onSubmit($event)\"\r\n  (generateNewCodeFor2SV)=\"generateNewCodeFor2SV()\"\r\n  (clickXButton)=\"this.dialogRef.close({message: 'xbutton'})\">\r\n</storybook-forgot-pass-form>\r\n","import {Component, ElementRef, Inject, Input, OnInit, Renderer2, ViewChild} from '@angular/core';\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\nimport {AuthService} from \"src/app/_services/auth.service\";\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {TokenStorageService} from \"src/app/_services/token-storage.service\";\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport RegisterForm2Component from \"./register-form2/register-form2.component\";\n//import * as mStoryInput from \"../../../stories/inputs/story-input.stories\";\nimport {ReplacePassForm2Component} from \"./replace-pass-form2/replace-pass-form2.component\";\nimport VerificationForm2Component from \"./verification-form2/verification-form2.component\";\nimport {UserService} from \"../../_services/user.service\";\nimport { workingModeConfiguration } from \"src/app/app.config\"\nimport {EventData} from \"../../_shared/event.class\";\nimport { EventBusService } from 'src/app/_shared/event-bus.service';\nimport {Subscription} from \"rxjs\";\nimport ForgotPassForm2Component from \"./forgot-pass-form2/forgot-pass-form2.component\";\n\n\nexport interface DialogData {\n  username: string;\n  password: string;\n}\n\n\n\n@Component({\n  selector: 'login-main',\n  templateUrl: './login-main.component.html',\n  styleUrls: ['./login-main.component.scss']\n})\nexport class LoginMainComponent implements OnInit {\n\n  public isLoggedIn = false;\n  isLoginFailed = false;\n  loginErrorMessage = '';\n  roles: string[] = [];\n  public isLoading = false;\n  eventBusSub?: Subscription;\n\n\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  storyInputsInOrder: StoryInput[]  = [\n    { /*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez' , hide: false },\n    { /*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password', hide: false   },\n  ];\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = true;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  background?: string;\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Login2Component';\n\n\n  loginForm: FormGroup;\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-page2--primary' : 'storybook-page2--secondary';\n\n    return ['storybook-page2', mode];\n  }\n\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\n\n\n  constructor(private renderer: Renderer2,\n              public forgotPassFormDialog: MatDialog,\n              public registerFormDialog: MatDialog,\n              public replacePassFormDialog: MatDialog,\n              public verificationFormDialog: MatDialog,\n              private eventBusService: EventBusService,\n              public authService: AuthService,\n              public userService: UserService,\n              private tokenStorage: TokenStorageService,\n              private router: Router,\n              private activatedRoute:ActivatedRoute) {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', Validators.minLength(2)),\n      password: new FormControl('', Validators.minLength(2)),\n    });\n\n  }\n\n\n  openForgotPassForm() {\n    const forgotPassFormDialogRef = this.forgotPassFormDialog.open(ForgotPassForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue, email: \"not@inuse.com\"},\n    });\n\n    forgotPassFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The forget password form dialog was closed');\n      if (result.message === 'Successful verification') {\n        //this.setUsernameCurrentFieldValue(result.data.username);\n        //this.setPasswordCurrentFieldValue(result.data.password.toString());\n      }\n    });\n\n    return forgotPassFormDialogRef.afterClosed().toPromise();\n  }\n\n  openRegisterForm() {\n    const registerFormDialogRef = this.registerFormDialog.open(RegisterForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue , password: this.getPasswordCurrentFieldValue},\n    });\n\n    registerFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n      if (result.message === 'Registration Complete') {\n        //this.setUsernameCurrentFieldValue(result.username);\n        //this.setEmailCurrentFieldValue(result.email);\n      }\n    });\n\n    return registerFormDialogRef.afterClosed().toPromise();\n  }\n\n  openReplacePassForm() {\n    const replacePassFormDialogRef = this.replacePassFormDialog.open(ReplacePassForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue , password: this.getPasswordCurrentFieldValue},\n    });\n\n    replacePassFormDialogRef.beforeClosed().subscribe(result => {\n      console.log('The replace password form dialog before closed');\n    },\n      err => {\n        console.log(err.error.message);\n      });\n\n\n    replacePassFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The replace password form dialog after closed');\n      if (result.message === 'Replace Password Complete') {\n        this.setUsernameCurrentFieldValue(result.data.username);\n        this.setPasswordCurrentFieldValue(result.data.password.toString());\n      }\n    });\n\n    return replacePassFormDialogRef.afterClosed().toPromise();\n  }\n\n  openVerificationForm() {\n    const verificationFormDialogRef = this.verificationFormDialog.open(VerificationForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue, email: \"not@inuse.com\"},\n    });\n\n    verificationFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n    });\n\n    return verificationFormDialogRef.afterClosed().toPromise();\n  }\n\n\n  ngOnInit(): void {\n    this.eventBusService.emit(new EventData('is2SVRequired', null));\n\n    this.eventBusSub = this.eventBusService.on('openVerification', () => {\n      this.openVerificationForm();\n    });\n  };\n\n\n\n  get getUsernameCurrentFieldValue(): AbstractControl {\n    return this.loginForm.get('username')?.value;\n  }\n\n  private setUsernameCurrentFieldValue(name: string) {\n    this.loginForm.get('username')?.setValue(name);\n  }\n\n  get getPasswordCurrentFieldValue(): AbstractControl {\n    return this.loginForm.get('password')?.value;\n  }\n\n  private setPasswordCurrentFieldValue(pass: string) {\n    this.loginForm.get('password')?.setValue(pass);\n  }\n\n\n  onSubmit(): void {\n    console.warn('Login Request from login-main!');\n    const { username, password } = this.loginForm.value;\n\n    this.isLoading = true;\n    this.authService.login(username, password).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveRefreshToken(data.refreshToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.profile2();\n      },\n      err => {\n        switch (err.error.message) {\n          case \"Error: A registry process should be made!\":\n            //this.openRegisterForm().then(() => {this.openReplacePassword()});\n            //toPromise((data) => {this.openReplacePassword()});\n            this.openRegisterForm().then(\n              (val) => {\n                console.log(val);\n                switch (val) {\n                  case \"xbutton\":\n                    break;\n                  case \"Registration Complete\":\n                    this.onSubmit();\n                    break;\n                  case undefined:\n                    //this.openReplacePassword();\n                    break;\n                  default:\n                }\n                return 'done2';\n              },\n              (err) => console.error(err));\n            break;\n          case \"User credentials have expired\":\n            this.openReplacePassForm().then(\n              (val) => {\n                console.log(val);\n                switch (val.message) {\n                  case \"xbutton\":\n                    break;\n                  case \"Replace Password Complete\":\n                    this.onSubmit();\n                    break;\n                  case undefined:\n                    //Handle unknown response\n                    break;\n                  default:\n                }\n                return 'done2';\n              },\n              (err) => console.error(err));\n            break;\n          default:\n            this.loginErrorMessage = err.error.message;\n        }\n\n        this.isLoginFailed = true;\n        this.isLoading = false;\n      },\n      () => { this.isLoading = false; })\n  }\n\n\n  reloadPage(): void {\n    this.router.navigate(['/login-main']).then(() => {window.location.reload()});\n  }\n\n  profile2(): void {\n  this.router.navigate(['../profile2'], {relativeTo: this.activatedRoute});\n  }\n\n  home2(): void {\n  this.router.navigate(['/home']);\n  }\n\n\n\n\n}\n\n/*\n@Component({\n  selector: 'dialog-overview-example-dialog',\n  templateUrl: 'dialog-overview-example-dialog.html',\n})\nexport class DialogOverviewExampleDialog {\n  constructor(\n    public dialogRef: MatDialogRef<DialogOverviewExampleDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n*/\n\n/*\n@Component({\n  selector: 'password-dialog',\n  templateUrl: './password-dialog.html',\n})\nexport class ExtentionDialog {\n  constructor(\n    public dialogRef: MatDialogRef<ExtentionDialog>,\n    @Inject(MAT_DIALOG_DATA) public extensionData: {name: string, password: string;},\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n*/\n","\n<html>\n<head>\n  <style>\n\n  </style>\n  <title></title>\n</head>\n<body>\n\n<!--article><div class=\"Frame-1 relative\">\n<section class=\"relative \" Style=\"{ 'background': backgroundColor }\"-->\n\n<!--storybook-button-globe></storybook-button-globe-->\n\n<storybook-background1></storybook-background1>\n\n<!--button mat-raised-button (click)=\"openReplacePassForm()\">ReplacePassForm</button>\n<button mat-raised-button (click)=\"openRegisterForm()\">RegisterForm</button>\n<button mat-raised-button (click)=\"openVerificationForm()\">VerificationForm</button>\n<button mat-raised-button (click)=\"openForgotPassForm()\">forgotPassForm</button>\n\n<button mat-raised-button (click)=\"home2()\">home2</button-->\n<button mat-raised-button (click)=\"profile2()\">profile2</button>\n\n<storybook-login-form\n  [isLoggedIn]=\"false\"\n  [isLoading]=\"isLoading\"\n  [isLoginFailed]=\"isLoginFailed\"\n  [loginErrorMessage]=\"loginErrorMessage\"\n  [mForm]=\"loginForm\"\n  [storyInputs]=\"storyInputsInOrder\"\n  (sendLoginReq)=\"onSubmit()\"\n  (openForgetPassForm)=\"openForgotPassForm()\"\n></storybook-login-form>\n\n\n<!--/section></div>\n</article-->\n\n</body>\n</html>\n\n\n","import {Component, ElementRef, EventEmitter, Inject, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {DialogData} from \"../login-main.component\";\r\nimport {PasswordValidators} from \"../replace-pass-form2/replace-pass-form2.component\";\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'register-form2',\r\n  templateUrl: './register-form2.component.html',\r\n  styleUrls: ['./register-form2.component.css']\r\n})\r\nexport default class RegisterForm2Component implements OnInit {\r\n  registerForm: FormGroup;\r\n  isRegSuccess = false;\r\n  isRegFailed = false;\r\n  submitted = false;\r\n  regErrorMessage: any;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n  public isLoading = false;\r\n\r\n\r\n  @Output() validateMail: EventEmitter<String> = new EventEmitter();\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: true },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '5', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n\r\n  ];\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              public dialogRef: MatDialogRef<RegisterForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\r\n    this.registerForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n      password: new FormControl(data.password.toString(), Validators.minLength(2)),\r\n      email: new FormControl('', Validators.email),\r\n      phone: new FormControl('', PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9 ]{8})\"), {requiresPhoneChars: true}))\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.isRegSuccess) {\r\n      this.dialogRef.close({message: 'Registration Complete', username: this.username.value, email: this.email.value});\r\n    }\r\n    else {\r\n      this.submitted = true;\r\n      const { username, password, email, phone } = this.registerForm.getRawValue();\r\n      this.isLoading = true;\r\n      this.authService.registerForm(username, email, password, phone).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.isRegSuccess = true;\r\n          this.isRegFailed = false;\r\n          this.errorFieldSubmitted = {} ;\r\n          this.apiResponse.error = false;\r\n          this.apiResponse.message = 'Successful registration';\r\n        },\r\n        error => {\r\n          const errorResponse = JSON.parse(error.error);\r\n          this.apiResponse.error = true;\r\n          this.apiResponse.message = 'Registration error';\r\n          this.regErrorMessage = errorResponse;\r\n          this.isRegFailed = true;\r\n          if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n            this.errorFieldSubmitted = errorResponse.data;\r\n          }\r\n          this.isLoading = false;\r\n        },\r\n        () => {\r\n          this.isLoading = false;\r\n          console.log(\"Registration Complete\");}\r\n      );\r\n    }\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.registerForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.registerForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.registerForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.registerForm.get('phone')!;\r\n  }\r\n}\r\n","\r\n<storybook-registry-form #form\r\n                  [isRegSuccess]=\"isRegSuccess\"\r\n                  [isRegFailed]=\"isRegFailed\"\r\n                  [regErrorMessage]=\"regErrorMessage\"\r\n                  [isLoading]=\"isLoading\"\r\n                  [storyInputs]=\"storyInputsInOrder\"\r\n                  [mForm]=\"registerForm\"\r\n                  (sendRegReq)=\"onSubmit()\"\r\n                  (clickXButton)=\"this.dialogRef.close('xbutton')\">\r\n</storybook-registry-form>\r\n","import {Component, Inject, Renderer2} from '@angular/core';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport {AuthService} from \"src/app/_services/auth.service\";\r\nimport {AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {DialogData} from \"../login-main.component\";\r\nimport RegisterForm2Component from \"../register-form2/register-form2.component\";\r\nimport {StoryInput} from \"../../../../stories/inputs/input/story-input.model\";\r\nimport {EventData} from \"../../../_shared/event.class\";\r\nimport {workingModeConfiguration} from \"../../../app.config\";\r\nimport {EventBusService} from \"../../../_shared/event-bus.service\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './replace-pass-form2.component.html',\r\n  styleUrls: ['./replace-pass-form2.component.css']\r\n})\r\nexport class ReplacePassForm2Component {\r\n  replacePassForm: FormGroup;\r\n  status = {\r\n    isRepSuccess: false,\r\n    isRepFailed: false,\r\n    submitted: false,\r\n    repErrorMessage: {},\r\n    apiResponse: { message: '', error: false },\r\n    errorFieldSubmitted: {},\r\n    closeResult: '',\r\n  };\r\n\r\n  public isLoading = false;\r\n\r\n  empList: Array<String> = [];\r\n\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '1', title: 'oldPassword', state: 'INITIAL PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'password', state: 'NEW PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'confirmPassword', state: 'RE-ENTER NEW PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n  ];\r\n\r\n\r\n\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private eventBusService: EventBusService,\r\n              private tokenStorageService: TokenStorageService,\r\n              public dialogRef: MatDialogRef<ReplacePassForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\r\n    this.replacePassForm = new FormGroup({\r\n      userName: new FormControl(data.username, Validators.required),\r\n      oldPassword: new FormControl(data.password, Validators.minLength(1)),\r\n      password: new FormControl('', Validators.compose([\r\n        Validators.minLength(8),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9])\"), {requiresDigit: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {requiresUppercase: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {requiresLowercase: true} ),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&#><{}()+~])\"), {requiresSpecialChars: true})\r\n      ])),\r\n      confirmPassword: new FormControl('', [\r\n        Validators.minLength(8),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9])\"), {requiresDigit: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {requiresUppercase: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {requiresLowercase: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&#><{}()+~])\"), {requiresSpecialChars: true})\r\n      ])\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.status.isRepSuccess) {\r\n      this.dialogRef.close({message: 'Replace Password Complete', data: this.data});\r\n    }\r\n    //else if (workingModeConfiguration.runMode.TSV && this.tokenStorageService.getPinCodeToken() == null) {\r\n    //  this.eventBusService.emit(new EventData('openVerification', null));\r\n    //}\r\n    else {\r\n      this.status.submitted = true;\r\n      this.isLoading = true;\r\n      this.changePassword().subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.status.isRepSuccess = true;\r\n          this.status.isRepFailed = false;\r\n          this.status.errorFieldSubmitted = {};\r\n          this.status.apiResponse.error = false;\r\n          this.status.apiResponse.message = 'Successful registration';\r\n          this.data.password = this.password.value.toString();\r\n        },\r\n        error => {\r\n          switch (error.error.message) {\r\n            case \"Error: Invalidate Pin-Code! User Not Approved\":\r\n              this.eventBusService.emit(new EventData('openVerification', null));\r\n              break;\r\n            default:\r\n              const errorResponse = JSON.parse(error.error);\r\n              this.status.apiResponse.error = true;\r\n              this.status.apiResponse.message = 'Replace password error';\r\n              this.status.repErrorMessage = errorResponse;\r\n              this.status.isRepFailed = true;\r\n              if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n                this.status.errorFieldSubmitted = errorResponse.data;\r\n              }\r\n          }\r\n\r\n          this.isLoading = false;\r\n\r\n          //Error: Invalidate Pin-Code! User Not Approved\r\n        },\r\n        () => {\r\n          this.isLoading = false;\r\n          console.log('Replace Password closed');}\r\n      );\r\n    }\r\n  }\r\n\r\n  private changePassword() {\r\n    const { userName, oldPassword, password, confirmPassword } = this.replacePassForm.value;\r\n    let pinCodeToken = this.tokenStorageService.getPinCodeToken();\r\n\r\n    if (pinCodeToken == null) {\r\n      pinCodeToken = 'dismiss';\r\n    }\r\n    return this.authService.TSV_ReplacePassForm(userName, oldPassword, password, confirmPassword, pinCodeToken);\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.replacePassForm.get('username')!;\r\n  }\r\n\r\n  get oldPassword(): AbstractControl {\r\n    return this.replacePassForm.get('oldPassword')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.replacePassForm.get('password')!;\r\n  }\r\n\r\n  get confirmPassword(): AbstractControl {\r\n    return this.replacePassForm.get('confirmPassword')!;\r\n  }\r\n\r\n}\r\n\r\nexport class PasswordValidators {\r\n  constructor() {\r\n  }\r\n\r\n  static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n      if (!control.value) {\r\n        // if the control value is empty return no error.\r\n        return null;\r\n      }\r\n\r\n      // test the value of the control against the regexp supplied.\r\n      const valid = regex.test(control.value);\r\n\r\n      // if true, return no error, otherwise return the error object passed in the second parameter.\r\n      return valid ? null : error;\r\n    };\r\n  }\r\n}\r\n","<storybook-replace-pass-form #form\r\n                         [status]=\"status\"\r\n                         [isLoading]=\"isLoading\"\r\n                         [storyInputs]=\"storyInputsInOrder\"\r\n                         [mForm]=\"replacePassForm\"\r\n                         [isRepSuccess]=\"status.isRepSuccess\"\r\n                         (sendRegReq)=\"onSubmit()\"\r\n                         (clickXButton)=\"this.dialogRef.close({message: 'xbutton'})\"\r\n></storybook-replace-pass-form>\r\n","import {Component, ElementRef, Inject, OnInit, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nexport interface TSVData {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'reset-pass-form2',\r\n  templateUrl: './reset-pass-form2.component.html',\r\n  styleUrls: ['./reset-pass-form2.component.css']\r\n})\r\nexport default class ResetPassForm2Component implements OnInit {\r\n  forgotPassForm: FormGroup;\r\n  status = {\r\n    isVerSuccess: false,\r\n    isRecSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }\r\n\r\n  public isLoading = false;\r\n  submitted = false;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n  ];\r\n\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private tokenStorage: TokenStorageService,\r\n              public dialogRef: MatDialogRef<ResetPassForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: TSVData) {\r\n    this.forgotPassForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //this.generateNewCodeFor2SV();\r\n  }\r\n\r\n  onSubmit(code: string): void {\r\n    if (this.status.isVerSuccess) {\r\n      this.dialogRef.close({message: 'Successful verification', data: this.data});\r\n    }\r\n    this.submitted = true;\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.data.username = username;\r\n\r\n    this.isLoading = true;\r\n    this.authService.TSV_ValidateCodeByName(username, this.data.email, code).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.tokenStorage.savePinCodeToken(data.pinCodeToken);\r\n        this.status.isVerSuccess = true;\r\n        this.status.isVerFailed = false;\r\n        this.errorFieldSubmitted = {} ;\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful verification';\r\n      },\r\n      error => {\r\n        const errorResponse = error.error;\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Verification error';\r\n        this.status.verErrorMessage = error.error.message;\r\n        this.status.isVerFailed = true;\r\n        this.errorFieldSubmitted = errorResponse.message;\r\n        console.log(errorResponse);\r\n        this.isLoading = false;\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Validate Code Request Finished\");}\r\n    );\r\n  }\r\n\r\n  generateNewCodeFor2SV() {\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.isLoading = true;\r\n    this.authService.ResetPassByMail(username, this.data.email).subscribe(\r\n      data => {\r\n          if (data.message == \"Password successfully sent to email!\") {\r\n            this.status.isRecSuccess = true;\r\n            this.status.isVerSuccess = true;\r\n          }\r\n        console.log(\"Generating Temporary Password Succeeded\", data);\r\n      },\r\n      error => {\r\n        this.isLoading = false;\r\n        console.log(\"Error: Can't generate temporary password for user \");\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Sending generation temporary password request complete\");\r\n      });\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.forgotPassForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.forgotPassForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.forgotPassForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.forgotPassForm.get('phone')!;\r\n  }\r\n}\r\n","\r\n<storybook-forgot-pass-form\r\n  [status]=\"status\"\r\n  [isLoading]=\"isLoading\"\r\n  [isVerSuccess]=\"status.isVerSuccess\"\r\n  [isRecSuccess]=\"status.isRecSuccess\"\r\n  [storyInputs]=\"storyInputsInOrder\"\r\n  [mForm]=\"forgotPassForm\"\r\n  (sendVerificationReq)=\"onSubmit($event)\"\r\n  (generateNewCodeFor2SV)=\"generateNewCodeFor2SV()\"\r\n  (clickXButton)=\"this.dialogRef.close({message: 'xbutton'})\">\r\n</storybook-forgot-pass-form>\r\n","import {Component, ElementRef, Inject, OnInit, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nexport interface TSVData {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'verification-form2',\r\n  templateUrl: './verification-form2.component.html',\r\n  styleUrls: ['./verification-form2.component.css']\r\n})\r\nexport default class VerificationForm2Component implements OnInit {\r\n  verificationForm: FormGroup;\r\n  status = {\r\n    isVerSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }\r\n\r\n  public isLoading = false;\r\n  submitted = false;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: true },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '5', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n\r\n  ];\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private tokenStorage: TokenStorageService,\r\n              public dialogRef: MatDialogRef<VerificationForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: TSVData) {\r\n    this.verificationForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n      email: new FormControl(data.email.toString(), Validators.email),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.generateNewCodeFor2SV();\r\n  }\r\n\r\n  onSubmit(code: string): void {\r\n    this.submitted = true;\r\n\r\n    this.isLoading = true;\r\n    this.authService.TSV_ValidateCodeByName(this.data.username, this.data.email, code).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.tokenStorage.savePinCodeToken(data.pinCodeToken);\r\n        this.status.isVerSuccess = true;\r\n        this.status.isVerFailed = false;\r\n        this.errorFieldSubmitted = {} ;\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful verification';\r\n        this.dialogRef.close('User Validate');\r\n      },\r\n      error => {\r\n        const errorResponse = error.error;\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Verification error';\r\n        this.status.verErrorMessage = error.error.message;\r\n        this.status.isVerFailed = true;\r\n        this.errorFieldSubmitted = errorResponse.message;\r\n        console.log(errorResponse);\r\n        this.isLoading = false;\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Validate Code Request Finished\");}\r\n    );\r\n  }\r\n\r\n  generateNewCodeFor2SV() {\r\n    this.isLoading = true;\r\n    this.authService.TSV_GenerateCodeByName(this.data.username, this.data.email).subscribe(\r\n      data => {\r\n        console.log(\"Generating Code Succeeded\", data);\r\n      },\r\n      error => {\r\n        this.isLoading = false;\r\n        console.log(\"Error: Can't generate code for user \");\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Sending Generation Code Request Complete\");\r\n      });\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.verificationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.verificationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.verificationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.verificationForm.get('phone')!;\r\n  }\r\n}\r\n","\r\n<storybook-verification-form\r\n  [status]=\"status\"\r\n  [isLoading]=\"isLoading\"\r\n  (sendVerificationReq)=\"onSubmit($event)\"\r\n  (generateNewCodeFor2SV)=\"generateNewCodeFor2SV()\"\r\n  (clickXButton)=\"this.dialogRef.close({message: 'xbutton'})\">\r\n</storybook-verification-form>\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport RegisterForm2Component from \"./login-main/register-form2/register-form2.component\";\nimport {LoginMainComponent} from \"./login-main/login-main.component\";\nimport {AppRoutingGuard} from \"../app-routing.guard\";\n\n\n\n\n\n\nconst routes: Routes = [\n  { path: 'login-main', component: LoginMainComponent },\n  { path: 'register-form2', component: RegisterForm2Component },\n  {\n    path: 'profile2',\n    loadChildren: () => import('./profile2/profile2.module').then(m => m.Profile2Module),\n    canActivate: [AppRoutingGuard]\n  },\n  { path: '', redirectTo: 'login-main', pathMatch: 'full' },/**/\n  { path: '**', redirectTo: 'login-main', },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class Login2RoutingModule { }\n","import { NgModule } from '@angular/core';\n\nimport { Login2RoutingModule } from './login2-routing.module';\nimport RegisterForm2Component  from './login-main/register-form2/register-form2.component';\nimport {LoginMainComponent} from './login-main/login-main.component';\nimport {TaskComponent } from \"src/stories/task/task.component\";\nimport {TaskListComponent} from \"../../stories/task-list/task-list.component\";\nimport {StorybookModule} from \"../storybook/storybook.module\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {ReplacePassForm2Component} from \"./login-main/replace-pass-form2/replace-pass-form2.component\";\nimport VerificationForm2Component from \"./login-main/verification-form2/verification-form2.component\";\nimport {Profile2Module} from \"./profile2/profile2.module\";\n\n\n\n\n@NgModule({\n  declarations: [\n    ReplacePassForm2Component,\n    RegisterForm2Component,\n    VerificationForm2Component,\n    TaskComponent, TaskListComponent,\n    LoginMainComponent,\n  ],\n  imports: [\n    Login2RoutingModule,\n    StorybookModule,\n    MatDialogModule,\n    MatButtonModule,\n    Profile2Module\n  ],\n  exports: [\n    ReplacePassForm2Component,\n    RegisterForm2Component\n  ],\n  providers: [ReplacePassForm2Component],\n  bootstrap: []\n})\nexport class Login2Module { }\n","<storybook-background1></storybook-background1>\r\n\r\n<div class=\"container\">\r\n  <header class=\"jumbotron\">\r\n    <p>{{ content }}</p>\r\n  </header>\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card card-container\">\r\n      <img\r\n        id=\"profile-img\"\r\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n        class=\"profile-img-card\"\r\n      />\r\n      <form\r\n        *ngIf=\"!isSuccessful\"\r\n        name=\"form\"\r\n        (ngSubmit)=\"f.form.valid && onSubmit()\"\r\n        #f=\"ngForm\"\r\n        novalidate\r\n      >\r\n        <div class=\"form-group input-box\">\r\n          <label for=\"userName\" class=\"input-label\">Time for password to be expired </label>\r\n\r\n          <input type=\"number\" style=\"width: 70px;\" class=\"form-control input-field\" name=\"userName\" [(ngModel)]=\"form.userName\"\r\n                 required minlength=\"3\" maxlength=\"20\" #userName=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"userName.errors && f.submitted\">\r\n            <div *ngIf=\"userName.errors.required\">Username is required</div>\r\n            <div *ngIf=\"userName.errors.minlength\">\r\n              Username must be at least 3 characters\r\n            </div>\r\n            <div *ngIf=\"userName.errors.maxlength\">\r\n              Username must be at most 20 characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group input-box\">\r\n          <label for=\"email\" class=\"input-label\">Alert duration before for pass expired</label>\r\n          <input type=\"number\" class=\"form-control input-field\" name=\"email\" [(ngModel)]=\"form.email\"\r\n                 required email #email=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\r\n            <div *ngIf=\"email.errors.required\">Email is required</div>\r\n            <div *ngIf=\"email.errors.email\">\r\n              Email must be a valid email address\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group input-box\">\r\n          <label for=\"password\" class=\"input-label\">Password</label>\r\n          <input type=\"password\" class=\"form-control input-field\" name=\"password\" [(ngModel)]=\"form.password\"\r\n                 required minlength=\"6\" #password=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"password.errors && f.submitted\">\r\n            <div *ngIf=\"password.errors.required\">Password is required</div>\r\n            <div *ngIf=\"password.errors.minlength\">\r\n              Password must be at least 6 characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group input-box\">\r\n          <label for=\"privilege\" class=\"input-label\">Privilege Level</label>\r\n          <select type=\"privilege\" class=\"form-control  input-field\" name=\"privilege\" id=\"pet-select\"\r\n                  [(ngModel)]=\"form.roles\" required #roles=\"ngModel\">\r\n            <option value=\"\">--Please choose an option--</option>\r\n            <option value=\"admin\">Admin</option>\r\n            <option value=\"mod\">Moderator</option>\r\n            <option value=\"user\">User</option>\r\n          </select>\r\n        </div>\r\n        <br>\r\n        <div class=\"form-group\" style=\"position: static; display: flex; justify-content: center;\">\r\n          <button class=\"btn btn-primary btn-block save-changes-button \">Save Changes</button>\r\n        </div>\r\n\r\n        <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\r\n          Signup failed!<br />{{ errorMessage }}\r\n        </div>\r\n      </form>\r\n\r\n      <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n        Your registration is successful!\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from 'src/app/_services/user.service';\r\nimport {AuthService} from \"src/app/_services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'app-board-admin',\r\n  templateUrl: './board-admin.component.html',\r\n  styleUrls: ['./board-admin.component.css']\r\n})\r\nexport class BoardAdminComponent implements OnInit {\r\n  content?: string;\r\n  form: any = {\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null,\r\n    roles: null,\r\n  };\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  errorMessage = '';\r\n  rolesList: Array<String> = [];\r\n\r\n  constructor(private userService: UserService, private authService: AuthService) {\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getAdminBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, email, password, roles } = this.form;\r\n    this.rolesList.push(roles);\r\n\r\n    this.authService.register(username, email, password, this.rolesList).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isSignUpFailed = true;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from 'src/app/_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-board-moderator',\r\n  templateUrl: './board-moderator.component.html',\r\n  styleUrls: ['./board-moderator.component.css']\r\n})\r\nexport class BoardModeratorComponent implements OnInit {\r\n  content?: string;\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getModeratorBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <header class=\"jumbotron\">\r\n    <p>{{ content }}</p>\r\n  </header>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from 'src/app/_services/user.service';\r\nimport { EventBusService } from 'src/app/_shared/event-bus.service';\r\nimport { EventData } from 'src/app/_shared/event.class';\r\n\r\n@Component({\r\n  selector: 'app-board-user',\r\n  templateUrl: './board-user.component.html',\r\n  styleUrls: ['./board-user.component.css']\r\n})\r\nexport class BoardUserComponent implements OnInit {\r\n  content?: string;\r\n\r\n  constructor(private userService: UserService, private eventBusService: EventBusService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getUserBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = err.error.message || err.error || err.message;\r\n        if (err.status === 403)\r\n          this.eventBusService.emit(new EventData('logout', null));\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <br>\r\n  <header class=\"background jumbotron  \">\r\n    <h1 class=\"font_0\">\r\n      <span class=\"\" style=\"font-size:44px;\">\r\n        <span>{{ content }}</span>\r\n      </span>\r\n    </h1>\r\n  </header>\r\n\r\n  <embed type=\"text/html\" src=\"https://www.tadirantele.com/\" height=\"300px\" width=\"100%\" >\r\n\r\n  <h2>Iframe - Target for a Link</h2>\r\n.\r\n  <iframe src=\"https://localhost:8445/accRealTime\" sandbox=\"allow-top-navigation-by-user-activation allow-same-origin allow-scripts allow-popups allow-forms\"  name=\"iframe_a\" height=\"300px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe>\r\n\r\n\r\n\r\n\r\n  <p><a href=\"https://172.28.8.245:8443/aeonix/mainForm.jsf\" target=\"iframe_a\">aeonix</a></p>\r\n  <p><a href=\"https://en.wikipedia.org/wiki/Avocado\" id=\"testid\" target=\"iframe_a\">wikipedia</a></p>\r\n  <p><a href=\"https://172.28.1.130:8445/accRealTime\" target=\"iframe_a\">accRealTime</a></p>\r\n  <p>When the target attribute of a link matches the name of an iframe, the link will open in the iframe.</p>\r\n\r\n    <!--iframe src=\"https://172.28.1.130:8445/accRealTime\" name=\"iframe_a\" height=\"300px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe-->\r\n</div>\r\n","import {Component, ElementRef, EventEmitter, Inject, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {PasswordValidators} from \"../../login-main/replace-pass-form2/replace-pass-form2.component\";\r\nimport MyAccountFormComponent from \"src/stories/forms/my-account-form/my-account-form.component\";\r\nimport {AccountInput} from \"src/stories/inputs/account-input/account-input.model\";\r\nimport {EventData} from \"src/app/_shared/event.class\";\r\nimport {EventBusService} from \"src/app/_shared/event-bus.service\";\r\nimport {throwError} from \"rxjs\";\r\nimport {TokenStorageService} from \"src/app/_services/token-storage.service\";\r\nimport {UserService} from \"src/app/_services/user.service\";\r\n\r\n\r\nexport interface MyAccountData {\r\n  currentUser: any;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'my-account-form2',\r\n  templateUrl: './my-account-form2.component.html',\r\n  styleUrls: ['./my-account-form2.component.css']\r\n})\r\nexport default class MyAccountForm2Component implements OnInit {\r\n  registerForm: FormGroup;\r\n  isRegSuccess = false;\r\n  isRegFailed = false;\r\n  submitted = false;\r\n  regErrorMessage: any;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  @ViewChild('username', { static: false }) userField?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  accountDetails: any;\r\n  closeResult = '';\r\n\r\n\r\n\r\n  @Output() validateMail: EventEmitter<String> = new EventEmitter();\r\n\r\n  storyInputsInOrder: AccountInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '1', title: this.data.currentUser.username, state: 'USER NAME', icon: '', type: 'enable-profile-picture', placeholder: '', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n  ];\r\n\r\n  constructor(private eventBusService: EventBusService,\r\n              private token: TokenStorageService,\r\n              private authService: AuthService,\r\n              private tokenStorageService: TokenStorageService,\r\n              private renderer: Renderer2,\r\n              public dialogRef: MatDialogRef<MyAccountFormComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: MyAccountData) {\r\n    this.registerForm = new FormGroup({\r\n      username: new FormControl(''),\r\n      email: new FormControl('email', Validators.email),\r\n      phone: new FormControl('0544444444', PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9 ]{8})\"), {requiresPhoneChars: true}))\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAccountDetails();\r\n    /*this.userService.getAccountDetails().subscribe(\r\n      data => { this.accountDetails = data; },\r\n      err => { this.accountDetails = JSON.parse(err.error).message; }\r\n    );*/\r\n  }\r\n\r\n  getAccountDetails(): void {\r\n\r\n    const token = this.token.getToken();\r\n    if (token)\r\n      this.authService.getAccountDetails(token).subscribe(accountDetails => {\r\n        this.accountDetails=(accountDetails);\r\n        this.setUsername(accountDetails.username);\r\n        this.setEmail(accountDetails.email);\r\n        this.setPhone(accountDetails.phone);\r\n        console.log('Account Details is received from server.');\r\n      }, (err) => {\r\n        console.log('Can not get user account details');\r\n        return throwError(err);\r\n      });\r\n\r\n  }\r\n\r\n  doLogout(): void {\r\n    console.log(\"logging out\")\r\n    this.eventBusService.emit(new EventData('logout', null));\r\n  }\r\n\r\n  openChangePassword() {\r\n    this.eventBusService.emit(new EventData('openChangePassword', null));\r\n  }\r\n\r\n  openUser() {\r\n    this.eventBusService.emit(new EventData('openConfiguration', null));\r\n    this.dialogRef.close('Open Configuration Tools');\r\n  }\r\n\r\n  displayConfigButton(): boolean {\r\n    console.log(\"isSupervisorAdmin: \"+this.tokenStorageService.isSupervisorAdmin())\r\n    return this.tokenStorageService.isSupervisorAdmin();\r\n  }\r\n\r\n\r\n  onSubmit(): void {\r\n    if (this.isRegSuccess) {\r\n      this.dialogRef.close('Registration Complete');\r\n    }\r\n    else {\r\n      this.submitted = true;\r\n      const { username, password, email, phone } = this.registerForm.getRawValue();\r\n\r\n      this.authService.registerForm(username, email, password, phone).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.isRegSuccess = true;\r\n          this.isRegFailed = false;\r\n          this.errorFieldSubmitted = {} ;\r\n          this.apiResponse.error = false;\r\n          this.apiResponse.message = 'Successful registration';\r\n        },\r\n        error => {\r\n          const errorResponse = JSON.parse(error.error);\r\n          this.apiResponse.error = true;\r\n          this.apiResponse.message = 'Registration error';\r\n          this.regErrorMessage = errorResponse;\r\n          this.isRegFailed = true;\r\n          if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n            this.errorFieldSubmitted = errorResponse.data;\r\n          }\r\n        },\r\n        () => {\r\n          console.log(\"Registration Complete\");}\r\n      );\r\n    }\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.registerForm.get('username')!;\r\n  }\r\n\r\n\r\n  setUsername(name: string): void {\r\n    this.registerForm.get('username')?.setValue(name)!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.registerForm.get('email')!;\r\n  }\r\n\r\n  setEmail(email: string): void {\r\n    return this.registerForm.get('email')?.setValue(email);\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.registerForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.registerForm.get('phone')!;\r\n  }\r\n\r\n  setPhone(phone: string): void {\r\n    return this.registerForm.get('phone')?.setValue(phone);\r\n  }\r\n\r\n}\r\n","\r\n<storybook-my-account-form #form\r\n  [isRegSuccess]=\"isRegSuccess\"\r\n  [isRegFailed]=\"isRegFailed\"\r\n  [regErrorMessage]=\"regErrorMessage\"\r\n  [storyInputs]=\"storyInputsInOrder\"\r\n  [displayToolButton]=\"displayConfigButton()\"\r\n  [mForm]=\"registerForm\"\r\n  (sendRegReq)=\"onSubmit()\"\r\n  (clickXButton)=\"this.dialogRef.close('xbutton')\"\r\n  (onLogout)=\"doLogout()\"\r\n  (changePassword)=\"openChangePassword()\"\r\n  (openUser)=\"openUser()\"\r\n></storybook-my-account-form>\r\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"src/app/_services/auth.service\";\nimport {TokenStorageService} from \"src/app/_services/token-storage.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AppConfig, workingModeConfiguration} from \"src/app/app.config\";\nimport {BehaviorSubject, Subscription, throwError} from \"rxjs\";\nimport {UserService} from \"src/app/_services/user.service\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ReplacePassForm2Component} from  \"src/app/login2/login-main/replace-pass-form2/replace-pass-form2.component\";\nimport {EventBusService} from \"src/app/_shared/event-bus.service\";\nimport MyAccountForm2Component from \"../my-account-form2/my-account-form2.component\";\nimport VerificationForm2Component from \"../../login-main/verification-form2/verification-form2.component\";\nimport {EventData} from \"src/app/_shared/event.class\";\n\n\n\n\nexport interface DialogData {\n  username: string;\n  password: string;\n}\n\n\n\n@Component({\n  selector: 'profile2',\n  templateUrl: './portal.component.html',\n  styleUrls: ['./portal.component.scss']\n})\nexport default class PortalComponent implements OnInit {\n\n  currentUser: any;\n  accessToken: any;\n  refreshToken: any;\n  windowObjectReference: any;\n  refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  public isLoading = false;\n  public appConfig: any;\n  private TOKEN_KEY: string;\n  eventBusSub?: Subscription;\n  permittedWebAppList = {\n    realtime: false,\n    scriptDesigner: false,\n    agent: false,\n    aeonixAdmin: false,\n    admin: false\n  };\n\n\n  isNotify(): boolean {\n   return (this.passExp < this.previousAlertPassExp);\n  }\n\n\n  constructor(private authService: AuthService,\n              private userService: UserService,\n              private token: TokenStorageService,\n              private eventBusService: EventBusService,\n              private router: Router,\n              private activatedRoute:ActivatedRoute,\n              public myAccountFormDialog: MatDialog,\n              public replacePassFormDialog: MatDialog,\n              public verificationFormDialog: MatDialog) {\n    this.TOKEN_KEY = AppConfig.endpoints.TOKEN_KEY;\n  }\n\n\n  openMyAccountForm() {\n    const myAccountFormDialogRef = this.myAccountFormDialog.open(MyAccountForm2Component, {\n      data: {currentUser: this.currentUser},\n    });\n\n    myAccountFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n    });\n\n    return myAccountFormDialogRef.afterClosed().toPromise();\n  }\n\n  openReplacePassForm() {\n    const replacePassFormDialogRef = this.replacePassFormDialog.open(ReplacePassForm2Component, {\n      data: {username: this.currentUser.username , password: ''},\n    });\n\n    replacePassFormDialogRef.beforeClosed().subscribe(result => {\n        console.log('The replace password form dialog before closed');\n      },\n      err => {\n        console.log(err.error.message);\n      });\n\n\n    replacePassFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The replace password form dialog after closed');\n      if (result.message === 'Replace Password Complete') {\n        console.log('Replace Password Complete');\n        this.setPassExpAlertData();\n      }\n    });\n\n    return replacePassFormDialogRef.afterClosed().toPromise();\n  }\n\n  openVerificationForm() {\n    const verificationFormDialogRef = this.verificationFormDialog.open(VerificationForm2Component, {\n      data: {username: this.currentUser.username , email: this.currentUser.email},\n    });\n\n    verificationFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n    });\n\n    return verificationFormDialogRef.afterClosed().toPromise();\n  }\n\n\n\n  public passExp: number = 0; // By Days\n  public previousAlertPassExp: number = 0; // By Days\n\n\n  ngOnInit(): void {\n    this.currentUser = this.token.getUser();\n    this.accessToken = this.currentUser.accessToken;\n    this.refreshToken = this.currentUser.refreshToken;\n    this.setPassExpAlertData();\n    this.setPermittedWebAppList();\n    this.is2SVRequired();\n\n    this.eventBusSub = this.eventBusService.on('openChangePassword', () => {\n      this.openReplacePassForm();\n    });\n\n    this.eventBusSub = this.eventBusService.on('openVerification', () => {\n      this.openVerificationForm();\n    });\n\n    this.eventBusSub = this.eventBusService.on('openConfiguration', () => {\n      this.configuratin();\n    });\n\n  }\n\n  is2SVRequired() {\n    this.eventBusService.emit(new EventData('is2SVRequired', null));\n  }\n\n  setPassExpAlertData(): void {\n\n    const token = this.token.getToken();\n    if (token)\n      this.authService.getPassExpireDate(token).subscribe(data => {\n        this.passExp = data.passExp;\n        this.previousAlertPassExp = data.previousAlertPassExp;\n        console.log('Password Expire Date: '+this.passExp);\n        console.log('previous Alert To Password Expire Date: '+this.previousAlertPassExp);\n      }, (err) => {\n        console.log('Password Expire Date: update failed');\n        return throwError(err);\n      });\n\n  }\n\n  setPermittedWebAppList(): void {\n    const token = this.token.getToken();\n    if (token)\n      this.authService.getPermittedWebAppList(token).subscribe(permittedWebAppList => {\n        this.permittedWebAppList=(permittedWebAppList);\n        console.log('Permitted web apps list is received from server.');\n      }, (err) => {\n        console.log('Can not get server data defining permitted web apps for user');\n        return throwError(err);\n      });\n  }\n\n  openapp(): void {\n    console.log('window.location.origin.toString():  '+window.location.origin.toString());\n\n    this.router.navigate([]).then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+'/accGCCS/'/*window.location.origin.toString()+\"/profile\"*/); });\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\n    var promise = new Promise((resolve, reject) => {this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML = \"new title\";});\n\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\n\n  }\n\n  public forseRefreshToken(): void {\n\n    if (!this.isLoading) {\n      this.isLoading = true;\n      const token = this.token.getRefreshToken();\n      if (token)\n        this.authService.refreshToken(token).subscribe(\n          data => {\n            this.isLoading = false;\n            this.token.saveToken(data.accessToken);\n            this.token.saveRefreshToken(data.refreshToken);\n            this.refreshTokenSubject.next(data.accessToken);\n            this.currentUser = this.token.getUser();\n            this.accessToken = this.token.getToken();\n            this.refreshToken = this.token.getRefreshToken();\n          },\n          (err) => {\n            this.isLoading = false;\n\n            this.token.signOut();\n            return throwError(err);\n          }\n        );\n    }\n  }\n\n  public async openNewTabForApp(appRequest: string[]) {\n    const [webapp, webappURLPrefix] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n\n    if (!this.isLoading) {\n      const token = this.token.getRefreshToken();\n      if (token) {\n\n        //const timeout = new Promise((res) => setTimeout(() => res(\"openNewTabForApp - timeout!\"), 5000));\n        const timeout = (prom: Promise<any>, time: number, exception: Symbol) => {\n          let timer: any;\n          return Promise.race([\n            prom,\n            new Promise((_r, rej) => timer = setTimeout(rej, time, exception))\n          ]).finally(() => clearTimeout(timer));\n        }\n\n\n        const promise = async () => {\n          new Promise<any>((resolve, reject) => {\n            console.log('Spinner Start.');\n            this.isLoading = true;\n            return this.authService.webapptab(token, webapp).toPromise()\n              .then((val: any) => {\n                console.log('Request approved by the server.');\n                newAccessToken = (val.accessToken);\n                newRefreshToken = (val.refreshToken);\n                newCurrentUser = (val);\n              })\n              .then((result) => {\n                  this.router.navigate([])\n                    .then(result => {\n                      this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers + webappURLPrefix);\n                    })\n                    .then((result) => {\n                        console.log('Plant the secret ingredient.');\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));\n                      },\n                      (err) => {\n                        console.log('failed loading the app webpage.');\n                        reject(throwError(err));\n                      })\n                },\n                (err) => {\n                  console.log('cant get a server request appropriate response for opening this webpage ')\n                  reject(throwError(err));\n                })\n              .then(() => {\n                  console.log('Spinner Stop.');\n                  this.isLoading = false;\n                  resolve(\"Success\");\n                },\n                (err) => {reject(throwError(err))});\n\n          });\n        }\n\n        const timeoutError = Symbol();\n        try {\n\n          await timeout(promise(), 5000, timeoutError)\n            .then(() => {\n              this.isLoading = false;\n              console.log('openNewTabForApp: open tab app successfully finished');\n            });\n        }catch (e) {\n          if (e === timeoutError) {\n            // handle timeout\n            console.log('timeoutError: '+e.error);\n          }else {\n            // other error\n            console.log('Error: '+e.error);\n            throw e;\n          }\n        }\n\n      }\n    }\n  }\n\n  public async openNewWinForApp(appRequest: string[]) {\n    const [webapp, webappURLPrefix] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n\n    if (!this.isLoading) {\n      const token = this.token.getRefreshToken();\n      if (token) {\n\n\n        const timeout = (prom: Promise<any>, time: number, exception: Symbol) => {\n          let timer: any;\n          return Promise.race([\n            prom,\n            new Promise((_r, rej) => timer = setTimeout(rej, time, exception))\n          ]).finally(() => clearTimeout(timer));\n        }\n\n\n        const promise = async () => {\n          new Promise<any>((resolve, reject) => {\n            console.log('Spinner Start.');\n            this.isLoading = true;\n            return this.authService.webapptab(token, webapp).toPromise()\n              .then((val: any) => {\n                console.log('Request approved by the server.');\n                newAccessToken = (val.accessToken);\n                newRefreshToken = (val.refreshToken);\n                newCurrentUser = (val);\n              })\n              .then((result) => {\n                  console.log('Opening new tab/win for the requested page.');\n                  this.router.navigate([])\n                    .then(result => {\n                      console.log('Insert url and loading the page.');\n                      this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix+'start.html',\n                        'C-Sharpcorner', 'scrollbars=no');\n                    })\n                    .then((result) => {\n                        console.log('Plant the secret ingredient.');\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));\n                      },\n                      (err) => {\n                        console.log('failed loading the app webpage.');\n                        reject(throwError(err));\n                      })\n                },\n                (err) => {\n                  console.log('cant get a server request appropriate response for opening this webpage ')\n                  reject(throwError(err));\n                })\n              .then(() => {\n                  console.log('Spinner Stop.');\n                  this.isLoading = false;\n                  resolve(\"Success\");\n                },\n                (err) => {reject(throwError(err))});\n          });\n        }\n\n\n        const timeoutError = Symbol();\n        try {\n          await timeout(promise(), 5000, timeoutError)\n        }catch (e) {\n          if (e === timeoutError) {\n            // handle timeout\n            console.log('timeoutError: ' + e.error);\n          } else {\n            // other error\n            console.log('Error: ' + e.error);\n            throw e;\n          }\n        }finally {\n          console.log('openNewTabForApp: open tab app successfully finished');\n        }\n\n\n\n      }\n    }\n  }\n\n  /*public openNewWinForApp(appRequest: string[]): void {\n    //webapp: string, webappURLPrefix: string\n    const [ webapp, webappURLPrefix ] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n    if (!this.isLoading) {\n      this.isLoading = true;\n      const token = this.token.getRefreshToken();\n      if (token)\n        this.authService.webapptab(token, webapp)\n          .subscribe(\n            data => {\n              let promise = new Promise<void>((resolve, reject) => {\n                newAccessToken = (data.accessToken);\n                newRefreshToken = (data.refreshToken);\n                newCurrentUser = (data);\n                setTimeout(() => {\n                  console.log(\"Failed open new window\");\n                  resolve();//() => {resolve();}\n                }, 5000);\n              })\n              promise.then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix+'start.html',\n                  'C-Sharpcorner', 'scrollbars=no');})\n                .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n                    this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n                    this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\n            (err) => { this.isLoading = false;\n              return throwError(err);})\n    },\n    (error) => {\n              this.isLoading = false;\n              return throwError(error.error);\n            }, () => {this.isLoading = false;})\n    }\n  }*/\n\n  configuratin(): void {\n    this.router.navigate(['../admin'], {relativeTo: this.activatedRoute});\n  }\n\n\n}\n\n","<html>\r\n<head>\r\n  <style>\r\n\r\n  </style>\r\n  <title></title>\r\n</head>\r\n<body>\r\n<storybook-background1></storybook-background1>\r\n\r\n<!--button mat-raised-button (click)=\"openVerificationForm()\">VerificationForm</button>\r\n<button mat-raised-button (click)=\"is2SVRequired()\">is2SVRequired</button-->\r\n<!--button mat-raised-button (click)=\"setPassExpAlertData()\">setPassExpAlertData</button-->\r\n\r\n\r\n<storybook-avatar\r\n  id=\"avatar\"\r\n  [label]=\"this.currentUser.username\"\r\n  [isNotify]=\"this.isNotify()\"\r\n  header=\"{{'Your password will expire in ' + this.passExp +' Days.'}}\"\r\n  (actionButton)=\"openReplacePassForm()\"\r\n  (click)=\"this.openMyAccountForm()\">\r\n</storybook-avatar>\r\n\r\n<!--this.setPassExpAlertData() -->\r\n\r\n\r\n<storybook-app-menu\r\n  [profileApps]=\"permittedWebAppList\"\r\n  [isLoading]=\"isLoading\"\r\n  (openNewWinForApp)=\"openNewWinForApp($event)\"\r\n  (openNewTabForApp)=\"openNewTabForApp($event)\">\r\n</storybook-app-menu>\r\n\r\n</body>\r\n</html>\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport PortalComponent from \"./portal/portal.component\";\nimport {AppRoutingGuard} from \"../../app-routing.guard\";\nimport {BoardUserComponent} from \"./board-user/board-user.component\";\nimport {BoardModeratorComponent} from \"./board-moderator/board-moderator.component\";\nimport {BoardAdminComponent} from \"./board-admin/board-admin.component\";\n\n\n\n\n\n\n\nconst routes: Routes = [\n  { path: 'user', component: BoardUserComponent },\n  { path: 'mod', component: BoardModeratorComponent },\n  { path: 'admin', component: BoardAdminComponent },\n  { path: 'profile2', component: PortalComponent, canActivate: [AppRoutingGuard] },\n  { path: '', redirectTo: 'profile2', pathMatch: 'full' },/**/\n  { path: '**', redirectTo: 'profile2', },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class Profile2RoutingModule { }\n","import { NgModule } from '@angular/core';\n\nimport { Profile2RoutingModule } from './profile2-routing.module';\nimport PortalComponent from './portal/portal.component';\nimport {StorybookModule} from \"src/app/storybook/storybook.module\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport MyAccountForm2Component from \"./my-account-form2/my-account-form2.component\";\nimport { BoardUserComponent } from './board-user/board-user.component';\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\n\n\n\n@NgModule({\n  declarations: [\n    PortalComponent,\n    MyAccountForm2Component,\n    BoardUserComponent, BoardAdminComponent, BoardModeratorComponent\n  ],\n  imports: [\n    Profile2RoutingModule,\n    StorybookModule,\n    MatDialogModule,\n    MatButtonModule,\n  ],\n  exports: [\n    PortalComponent,\n    MyAccountForm2Component\n  ],\n  bootstrap: []\n})\nexport class Profile2Module { }\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'apiErrorMessage'\r\n})\r\nexport class ApiErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'loginErrorMessage'\r\n})\r\nexport class LoginErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n","import {Injectable, Pipe, PipeTransform} from '@angular/core';\r\nimport {ApiErrorMessageService} from \"./api-error-message.service\";\r\n\r\n@Pipe({\r\n  name: 'apiErrorMessage',\r\n  pure: false,\r\n})\r\nexport class ApiErrorMessagePipe implements PipeTransform {\r\n    constructor(private apiErrorMessageService: ApiErrorMessageService) {}\r\n\r\n    transform(value: any, args?: any): any {\r\n      this.apiErrorMessageService.language = args.language;\r\n      return this.apiErrorMessageService.apiErrorMessage(value)    }\r\n\r\n/*    transform(message: string, ...args: unknown[]): unknown {\r\n      const dataToArray = message.split(',').map(item => {item.trim();\r\n        console.log('ApiErrorMessagePipe: '+item.toString() +'   '+ item.trim().toString());\r\n      });\r\n\r\n      // convert array to string replacing comma with new line\r\n      return dataToArray.join('\\n');\r\n    }\r\n*/\r\n}\r\n\r\n\r\n\r\n","import {Injectable} from \"@angular/core\";\r\nimport {first} from \"rxjs/operators\";\r\n\r\n\r\n@Injectable()\r\nexport class ApiErrorMessageService {\r\n  public languages = ['login-main', 'eng']\r\n\r\n  public language  = 'login-main'\r\n\r\n  private dictionary: { [key: string]: TranslationSet } = {\r\n    'login-main': {\r\n      languange: 'login-main',\r\n      values: {\r\n        \"example\": \"Beispiel\",\r\n        \"must be a well-formed email address\": \"must be a well-formed email address\",\r\n        \"Error: A registry process should be made!\": \"Error: A registry process should be made!\",\r\n        \"Error: A registry process un valid!\": \"Incorrect user name\",\r\n        \"VALIDATION_FAILED\": \"* A registry process un valid!\",\r\n        \"Bad credentials\": \"Incorrect user name or password\",\r\n        \"Password matches one of %1$s previous passwords.\": \"Try again with a password you haven’t used before\",\r\n        \"Passwords do not match!\": \"* Passwords do not match!\",\r\n        \"Error: Email is already in use!\": \"Email is already in use!\",\r\n        \"Error: Invalidate Pin-Code! User Not Approved\": \"* The Verification Code does not match\",\r\n      },\r\n    },\r\n    eng: {\r\n      languange: 'eng',\r\n      values: {\r\n        \"example\": \"Example\",\r\n      },\r\n    },\r\n\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  apiErrorMessage(key: string): any {\r\n    if (this.dictionary[this.language ] != null) {\r\n      return this.dictionary[this.language ].values[key];\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport class TranslationSet {\r\n  public languange?: any;\r\n  public values: { [key: string]: any } = {}\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n//import { BrowserModule } from '@angular/platform-browser';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\n\nimport {ButtonLanguageComponent} from \"../../stories/buttons/button-language/button-language.component\";\nimport {ButtonFortestComponent} from '../../stories/buttons/button-fortest/button-fortest.component';\nimport {ButtonGlobeComponent} from \"../../stories/buttons/button-globe/button-globe.component\";\nimport Background1Component from \"../../stories/pages/background1/background1Component\";\nimport {ButtonTadiranComponent} from \"../../stories/buttons/button-tadiran/button-tadiran.component\";\nimport CardComponent from \"../../stories/cards/card.component\";\nimport LoginFormComponent from \"../../stories/forms/login-form/login-form.component\";\nimport RegistryFormComponent from \"../../stories/forms/registry-form/registry-form.component\";\nimport {ButtonContinueComponent} from \"../../stories/buttons/button-continue/button-continue.component\";\nimport {ButtonExComponent} from \"../../stories/buttons/button-ex/button-ex.component\";\nimport {ButtonAppsComponent} from \"../../stories/buttons/button-apps/button-apps.component\";\nimport {ButtonSuccessfullyComponent} from \"../../stories/buttons/button-successfully/button-successfully.component\";\nimport Button from \"../../stories/buttons/button-example/button.component\";\nimport {AppMenuComponent} from \"../../stories/app-menu/app-menu.component\";\nimport {StoryInputComponent} from \"../../stories/inputs/input/story-input.component\";\nimport {HighlightDirective} from \"src/stories/buttons/button-fortest/custom-directive/Highlight.directive\";\nimport ReplacePassFormComponent from \"../../stories/forms/replace-pass-form/replace-pass-form.component\";\nimport PassStrengthComponent from \"../../stories/pass-strength/pass-strength.component\";\nimport {ApiErrorMessagePipe} from \"./pipes/api-error-message.pipe\";\nimport {AvatarComponent} from \"../../stories/avatars/avatar.component\";\nimport {AppComponent} from \"../app.component\";\nimport { DynamicCompDirective } from '../../stories/directive/dynamic-comp.directive';\nimport {PopoverDirective} from \"../../stories/directive/bubble-avatar/popover.directive\";\nimport { BubbleAvatarComponent } from '../../stories/directive/bubble-avatar/bubble-avatar.component';\nimport { ActionAvatarComponent } from '../../stories/actions/action-avatar/action-avatar.component';\nimport {PopoverInputDirective} from \"../../stories/directive/bubble-input/popover-input.directive\";\nimport { BubbleInputComponent } from '../../stories/directive/bubble-input/bubble-input.component';\nimport { ActionInputComponent } from '../../stories/actions/action-input/action-input.component';\nimport {MdbPopoverModule} from \"mdb-angular-ui-kit/popover\";\n\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {ButtonExclamationMarkComponent} from \"../../stories/buttons/button-exclamation-mark/button-exclamation-mark.component\"\nimport {ApiErrorMessageService} from \"./pipes/api-error-message.service\";\nimport {Spinner1Component} from \"../../stories/spinners/spinner1/spinner1.component\";\nimport VerificationFormComponent from \"../../stories/forms/verification-form/verification-form.component\";\nimport {DigitcodeInputComponent} from \"../../stories/inputs/digitcode-input/digitcode-input.component\";\nimport {CodeInputComponent} from \"../../stories/inputs/code-input/code-input.component\";\nimport MyAccountFormComponent from \"../../stories/forms/my-account-form/my-account-form.component\";\nimport {AccountInputComponent} from \"../../stories/inputs/account-input/account-input.component\";\nimport ForgotPassFormComponent from \"../../stories/forms/forgot-pass-form/forgot-pass-form.component\";\nimport ResetPassFormComponent from \"../../stories/forms/reset-pass-form/reset-pass-form.component\";\nimport {ButtonConfigurationComponent} from \"../../stories/buttons/button-configuration/button-configuration.component\";\n\n\n\n\n\n\n@NgModule({\n    declarations: [\n        ButtonGlobeComponent, Background1Component, ButtonTadiranComponent, ButtonLanguageComponent,\n        ButtonFortestComponent,\n        CardComponent,\n        LoginFormComponent, LoginFormComponent, RegistryFormComponent, VerificationFormComponent,\n        MyAccountFormComponent, ForgotPassFormComponent, ResetPassFormComponent,\n        ButtonContinueComponent, ButtonExComponent, ButtonAppsComponent, ButtonSuccessfullyComponent, Button,\n        ButtonConfigurationComponent,\n        AppMenuComponent,\n        StoryInputComponent, DigitcodeInputComponent, CodeInputComponent, AccountInputComponent,\n        HighlightDirective,\n        ReplacePassFormComponent,\n        PassStrengthComponent,\n        ApiErrorMessagePipe,\n        AvatarComponent,\n        DynamicCompDirective,\n        ActionAvatarComponent, PopoverDirective, BubbleAvatarComponent,\n        ActionInputComponent, PopoverInputDirective, BubbleInputComponent,\n        ButtonExclamationMarkComponent,\n        Spinner1Component,\n\n\n    ],\n  imports: [\n    CommonModule,\n    FormsModule, ReactiveFormsModule, MdbPopoverModule, MatButtonModule,\n  ],\n  providers: [ ApiErrorMessageService],\n  exports: [\n    ButtonGlobeComponent, Background1Component, ButtonTadiranComponent, ButtonLanguageComponent,\n    ButtonFortestComponent,\n    CardComponent,\n    LoginFormComponent, LoginFormComponent, RegistryFormComponent, VerificationFormComponent, MyAccountFormComponent, ForgotPassFormComponent,  ResetPassFormComponent,\n    ButtonContinueComponent, ButtonExComponent, ButtonAppsComponent, ButtonSuccessfullyComponent, Button,\n    ButtonConfigurationComponent,\n    AppMenuComponent,\n    StoryInputComponent, DigitcodeInputComponent, CodeInputComponent, AccountInputComponent,\n    CommonModule,\n    FormsModule, ReactiveFormsModule,\n    HighlightDirective,\n    ReplacePassFormComponent,\n    PassStrengthComponent,\n    AvatarComponent,\n    DynamicCompDirective,\n    ActionAvatarComponent   , PopoverDirective, BubbleAvatarComponent,\n    ActionInputComponent, PopoverInputDirective, BubbleInputComponent,\n    ButtonExclamationMarkComponent,\n    Spinner1Component,\n\n\n\n  ],\n  bootstrap: [AvatarComponent, ]\n})\nexport class StorybookModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\nimport {ActionInput} from \"../action-input/action-input.interface\";\r\n\r\n@Component({\r\n  selector: 'action-avatar',\r\n  templateUrl: './action-avatar.component.html',\r\n  styleUrls: ['./action-avatar.component.css']\r\n})\r\nexport class ActionAvatarComponent implements OnInit {\r\n\r\n  bubbleOn?: boolean;\r\n  actionHeader?: string = \"Your password will expire in 3 Days.\";\r\n\r\n  @Output() actionButton = new EventEmitter<any>();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public setHeader(actionHeader: string) {\r\n    this.actionHeader = actionHeader;\r\n  }\r\n\r\n  public setBubbleOn(bubbleOn: boolean) {\r\n    this.bubbleOn = bubbleOn;\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"password-alert-text\">\r\n<p>\r\n  {{this.actionHeader}}\r\n</p>\r\n<a [highlight]=\"'red'\" [colorName]=\"'red'\" (click)=\"this.actionButton.emit()\" class=\"action-text\" >Change it now ></a>\r\n</div>\r\n","<div class=\"password-alert-text\" Style=\"text-indent: 27px; padding-bottom: 15px\">\r\n<tr><strong>{{this.actionHeader}}</strong></tr>\r\n</div>\r\n<div >\r\n\r\n  <table >\r\n\r\n    <!--thead>\r\n\r\n    </thead-->\r\n    <tbody>\r\n      <tr *ngFor=\"let actionInput of actionInputs\">\r\n        <td  *ngIf=\"actionInput.isFulfilled\" Style=\"color: green\">✔</td>\r\n        <td  *ngIf=\"!actionInput.isFulfilled\" Style=\"color: red\">X</td>\r\n        <td Style=\"text-indent: 7px\">{{ actionInput.presentingMessage }}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n\r\n\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {ActionInput} from \"./action-input.interface\";\r\n\r\n\r\ninterface USERS {\r\n  conditionName: String;\r\n  presentingMessage: String;\r\n  isFulfilled: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'action-input',\r\n  templateUrl: './action-input.component.html',\r\n  styleUrls: ['./action-input.component.css']\r\n})\r\nexport class ActionInputComponent implements OnInit {\r\n\r\n  actionInputs?: ActionInput[];\r\n  actionHeader?: string = \"The password must contain:\";\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public setConditions(actionInputs: ActionInput[]) {\r\n    this.actionInputs = actionInputs;\r\n  }\r\n\r\n  public setHeader(actionHeader: string) {\r\n    this.actionHeader = actionHeader;\r\n  }\r\n}\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\" ></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <div class=\"Aeonix-App-Center\">\r\n      <a>Aeonix App Center</a>\r\n    </div>\r\n    <div><storybook-spinner1  *ngIf=\"isLoading\"></storybook-spinner1></div>\r\n\r\n    <div class=\"grid-container\">\r\n      <div class=\"item1\"><storybook-button-apps application=\"Agent\" label=\"Continue\" type=\"button\" [isDisabled]=\"!profileApps?.agent\"\r\n        id=\"openNewAgentTab\" (click)='this.openNewWinForApp.emit([\"AGENT\",\"/accAgent/\"])'  ></storybook-button-apps></div>\r\n      <div class=\"item2\"><storybook-button-apps application=\"WebRT\" label=\"Continue\" type=\"button\" [isDisabled]=\"!profileApps?.realtime\"\r\n        id=\"openNewWebRTTab\" (click)='this.openNewTabForApp.emit([\"ACCREALTIME\",\"/accRealTime/\"])' ></storybook-button-apps></div>\r\n      <div class=\"item3\"><storybook-button-apps application=\"Script-Designer\" label=\"Continue\" type=\"button\" [isDisabled]=\"!profileApps?.scriptDesigner\"\r\n        id=\"openNewGccsTab\" (click)='this.openNewTabForApp.emit([\"GCCS\",\"/accGCCS/\"])' ></storybook-button-apps></div>\r\n      <div class=\"item4\"><storybook-button-apps application=\"Admin\" label=\"Continue\" type=\"button\" [isDisabled]=\"!profileApps?.admin\"\r\n        ></storybook-button-apps></div>\r\n      <div class=\"item5\"><storybook-button-apps application=\"Aeonix-Admin\" label=\"Continue\" type=\"button\" [isDisabled]=\"!profileApps?.aeonixAdmin\"\r\n        id=\"openNewGccsTab2\" (click)='this.openNewTabForApp.emit([\"GCCS\",\"/accGCCS/\"])' ></storybook-button-apps></div>\r\n    </div>\r\n\r\n\r\n\r\n  </div>\r\n</div>\r\n\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../inputs/input/story-input.model\";\r\nimport { AuthService } from '../../app/_services/auth.service';\r\nimport {MdbModalRef} from \"mdb-angular-ui-kit/modal\";\r\n//import {Profile2Expose} from \"src/app/profile2/profile2.interface\";\r\n\r\nexport interface Profile2Expose {\r\n  agent: boolean;\r\n  realtime: boolean;\r\n  scriptDesigner: boolean;\r\n  admin: boolean;\r\n  aeonixAdmin: boolean;\r\n}\r\n\r\nexport interface AeonixAppCenterForm {\r\n  username: null, //new FormControl('ea2', Validators.min(2)),\r\n  password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-app-menu',\r\n  templateUrl: './app-menu.component.html',\r\n  styleUrls: ['./app-menu.css'],\r\n})\r\nexport class AppMenuComponent implements OnInit {\r\n\r\n  /*form: AeonixAppCenterForm = {\r\n    username: null,     //new FormControl('ea2', Validators.min(2)),\r\n    password: null      //new FormControl('zaqwsx', Validators.min(2))\r\n  };*/\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  constructor() {\r\n    this.validationForm = new FormGroup({\r\n      username: new FormControl('Telecom2', Validators.minLength(2)),\r\n      //email: new FormControl(null, Validators.email),\r\n      password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n      //phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  validationForm: FormGroup;\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() openNewWinForApp = new EventEmitter<any>();\r\n\r\n  @Output() openNewTabForApp = new EventEmitter<any>();\r\n\r\n  @Input() profileApps?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n    this.credentials.username=this.validationForm.get('username')?.value;\r\n    this.credentials.password=this.validationForm.get('password')?.value;\r\n\r\n    this.openNewWinForApp.emit(this.credentials);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n","\r\n<div [twPopover] = \"this.popover\" header=\"{{this.header}}\" [bubbleOn]=\"this.isNotify\" (actionButton)=\"this.actionButton.emit($event)\">\r\n<!-- a (mouseover)=\"popover.show()\" (mouseleave)=\"popover.hide()\"\r\n   class=\"form-check-label white-text\"   mdbPopoverTitle=\"Account recovery\" #popover=\"mdbPopover\"\r\n   mdbPopover=\"To help keep your account safe, we will make sure that it’s really you trying to sign in\">\r\n</a\r\n  Forgot password?-->\r\n\r\n\r\n<button class=\"main\" highlight=\"blue\" colorName=\"blue\"\r\n        type=\"button\"\r\n        (click)=\"onClick.emit($event)\"\r\n        [ngClass]=\"classes\"\r\n        [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n\r\n  <div class=\"circle\">\r\n\r\n    <img src=\"./assets/images/ProfileIcon-70.svg\" srcset=\"./assets/images/ProfileIcon-70@2x.png, ./assets/images/ProfileIcon-70@3x.png\"\r\n         class=\"Avatar-Icon\"  alt=\"profile-image\">\r\n\r\n  </div>\r\n  <storybook-button-exclamation-mark  *ngIf=\"this.isNotify\" class=\"exclamation-mark\" size=\"small\" ></storybook-button-exclamation-mark>\r\n  <div class=\"Avatar-Label\"><a class=\"font\">{{ label }}</a></div>\r\n</button>\r\n\r\n</div>\r\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n} from '@angular/core';\nimport {PopoverOptions} from \"../directive/popover.interface\";\nimport {ActionAvatarComponent} from \"../actions/action-avatar/action-avatar.component\";\n/**/\n@Component({\n  selector: 'storybook-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.scss'],\n})\nexport  class AvatarComponent {\n  popover: PopoverOptions = {\n    content: ActionAvatarComponent\n  };\n\n\n  @Output() actionButton: EventEmitter<any> = new EventEmitter<any> ();\n\n  /**\n   * Header contents\n   *\n   * @required\n   */\n  @Input()\n  header? = 'header';\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  isNotify: boolean = false;\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-avatar--primary' : 'storybook-avatar--secondary';\n\n    return ['storybook-avatar', `storybook-avatar--${this.size}`, mode];\n  }\n\n  ngOnInit(): void {\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-apps',\n  templateUrl: './button-apps.component.html',\n  styleUrls: ['./button-apps.component.scss']\n})\nexport class ButtonAppsComponent {\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  isDisabled: boolean = false;\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * What application should the button linked to?\n   */\n  @Input()\n  application: 'Agent' | 'WebRT' | 'Script-Designer' | 'Admin' | 'Aeonix-Admin' = 'Admin';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-apps--primary' : 'storybook-button-apps--secondary';\n\n    return ['storybook-button-apps', `storybook-button-apps--${this.application}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<button id=\"button-apps\" class=\"container\"  [disabled]=\"isDisabled\"  >\n<div id=\"circle\" class=\"circle\"   >\n\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/{{application?.toString()}}.png\" class=\"Apps-Button-Icon center\"  alt=\"apps-button-icon\"/>\n</div>\n\n<div class=\"Button-App-Label \">\n  <div class=\"center mfont\">\n\n    {{ application.toString() }}\n\n  </div>\n</div>\n\n</button>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-configuration',\n  templateUrl: './button-configuration.component.html',\n  styleUrls: ['./button-configuration.component.css']\n})\nexport class ButtonConfigurationComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-form--primary' : 'storybook-button-form--secondary';\n\n    return ['storybook-button-form', `storybook-language-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<button class=\"Vector\" (click)=\"onClick.emit($event)\" >\n  <label class=\"EnableProfilePicture\">Tools</label>\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/AacConfiguration.png\"\n       srcset=\"./assets/images/language-desktop-icon@2x.png 2x,\n             /assets/images/language-desktop-icon@3x.png 3x\"\n       class=\"Language-Desktop-Icon\"  alt=\"form-desktop-icon\"/>\n\n</button>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-continue',\n  templateUrl: './button-continue.component.html',\n  /*template: `<div class=\"storybook-button-continue\">\n    <img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n         src=\"./assets/images/img_2.png\" class=\"Language-Desktop-Icon\"  alt=\"form-desktop-icon\"/>\n  </div>`,*/\n  styleUrls: ['./button-continue.component.scss'],\n})\nexport class ButtonContinueComponent {\n\n  /**\n   * Is this gallery attribute are set?\n   */\n  @Input()\n  gallery = false;\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Continue';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-continue--primary' : 'storybook-button-continue--secondary';\n    const galleryMode = this.gallery ? 'storybook-button-continue--set-in' : 'storybook-button-continue--set-out';\n\n    return ['storybook-button-continue', `storybook-button-continue--${this.size}`, mode, galleryMode];\n  }\n\n\n}\n","<button id=\"login-button\" class=\"login-button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\" >\n{{label}}\n</button>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-ex',\n  templateUrl: './button-ex.component.html',\n  styleUrls: ['./button-ex.component.css']\n})\nexport class ButtonExComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-ex--primary' : 'storybook-button-ex--secondary';\n\n    return ['storybook-button-ex', `storybook-button-ex--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n<button class=\"Vector\" (click)=\"onClick.emit($event)\" >\n\n    <img  [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n       src=\"./assets/images/x_close.png\"\n           class=\"Ex-Icon\"  alt=\"Ex-Icon\"/>\n\n</button>\n\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-exclamation-mark',\n  templateUrl: './button-exclamation-mark.component.html',\n  styleUrls: ['./button-exclamation-mark.component.scss']\n})\nexport class ButtonExclamationMarkComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-exclamation-mark--primary' : 'storybook-button-exclamation-mark--secondary';\n\n    return ['storybook-button-exclamation-mark', `storybook-button-exclamation-mark--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"button-exclamation-mark\" class=\"container\">\n<div id=\"button-exclamation-mark-circle\" class=\"circle\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\n\n<img\n     src=\"./assets/images/Exclamation.png\" class=\"Exclamation-Mark-Icon center\" alt=\"exclamation-mark-button-icon\"/>\n</div>\n\n\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-fortest',\n  template: ` <p >Highlight Directive</p>\n    <button highlight=\"blue\" colorName=\"blue\"\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button-fortest.css'],\n})\nexport  class ButtonFortestComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n","import { Directive, ElementRef, HostListener, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[highlight]',\r\n})\r\nexport class HighlightDirective {\r\n  constructor(private eleRef: ElementRef) {}\r\n\r\n  @Input() highlight: any;\r\n  @Input() colorName: any;\r\n\r\n\r\n  @HostListener('mouseover') onMouseOver() {\r\n    this.eleRef.nativeElement.style.color = this.colorName;\r\n  }\r\n  @HostListener('mouseleave') onMouseLeave() {\r\n    this.eleRef.nativeElement.style.color = 'black';\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-globe',\n  templateUrl: './button-globe.component.html',\n  styleUrls: ['./button-globe.component.css']\n})\nexport class ButtonGlobeComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-tadiran--primary' : 'storybook-button-tadiran--secondary';\n\n    return ['storybook-button-tadiran', `storybook-tadiran-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"Vector\">\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/GlobeIcon.png\" class=\"Language-Desktop-Icon\"  alt=\"form-desktop-icon\"/>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-language',\n  templateUrl: './button-language.component.html',\n  styleUrls: ['./button-language.component.css']\n})\nexport class ButtonLanguageComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-form--primary' : 'storybook-button-form--secondary';\n\n    return ['storybook-button-form', `storybook-language-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"Vector\">\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/language-desktop-icon.png\"\n       srcset=\"./assets/images/language-desktop-icon@2x.png 2x,\n             /assets/images/language-desktop-icon@3x.png 3x\"\n       class=\"Language-Desktop-Icon\"  alt=\"form-desktop-icon\"/>\n\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-successfully',\n  templateUrl: './button-successfully.component.html',\n  styleUrls: ['./button-successfully.component.css']\n})\nexport class ButtonSuccessfullyComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-successfully--primary' : 'storybook-button-successfully--secondary';\n\n    return ['storybook-button-successfully', `storybook-button-successfully--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"button-successfully\" class=\"container\">\n<div class=\"circle\">\n\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n     src=\"./assets/images/Vee.png\" class=\"Vee-Icon center\" alt=\"successfully-button-icon\"/>\n</div>\n\n\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-tadiran',\n  /*templateUrl: './button-continue.component.html',*/\n  template: `<div class=\"storybook-button-tadiran\">\n    <img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n         src=\"./assets/images/img_2.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n  </div>`,\n  styleUrls: ['./button-tadiran.component.scss'],\n})\nexport class ButtonTadiranComponent {\n\n  /**\n   * Is this gallery attribute are set?\n   */\n  @Input()\n  gallery = false;\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-tadiran--primary' : 'storybook-button-tadiran--secondary';\n    const galleryMode = this.gallery ? 'storybook-button-tadiran--set-in' : 'storybook-button-tadiran--set-out';\n\n    return ['storybook-button-tadiran', `storybook-button-tadiran--${this.size}`, mode, galleryMode];\n  }\n\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.css']\r\n})\r\nexport default class CardComponent  {\r\n\r\n\r\n\r\n  /**\r\n   * Is this the principal call to action on the login-main?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large'  = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-card--primary' : 'storybook-card--secondary';\r\n\r\n    return ['storybook-card', `storybook-card--${this.size}`, mode];\r\n  }\r\n\r\n\r\n\r\n}\r\n","\r\n  <div class=\"card\">\r\n\r\n  </div>\r\n\r\n\r\n","<div class=\"tooltip\" [ngClass]=\"{'tooltip-display' : show}\">\r\n  <!--button (click)=\"loadCarComponent()\">Load Car Component</button-->\r\n  <span *ngIf=\"!isDynamic\">{{popover}}</span>\r\n  <ng-template    appDynamicComp>\r\n  </ng-template>\r\n\r\n</div>\r\n\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  OnInit,\r\n  AfterViewInit,\r\n  ComponentFactoryResolver,\r\n  ChangeDetectionStrategy,\r\n  ApplicationRef,\r\n  Output,\r\n  EventEmitter,\r\n  Type, ComponentRef\r\n} from '@angular/core';\r\nimport { DynamicCompDirective } from '../dynamic-comp.directive';\r\nimport { PopoverOptions } from '../popover.interface'\r\nimport {ActionAvatarComponent} from \"src/stories/actions/action-avatar/action-avatar.component\";\r\n\r\n\r\n@Component({\r\n  selector: 'bubble-avatar',\r\n    templateUrl: './bubble-avatar.component.html',\r\n  styleUrls: ['./bubble-avatar.component.scss']\r\n})\r\nexport class BubbleAvatarComponent implements OnInit, AfterViewInit{\r\n  @Input() display: any;\r\n  @Input() popover: any;\r\n  @Input() bubbleOn?: boolean;\r\n  @Input() header?: string;\r\n  @Input()  options?: PopoverOptions;\r\n  show: boolean = false;\r\n  isDynamic: boolean = false;\r\n  @ViewChild(DynamicCompDirective, {static: true}) content!: DynamicCompDirective;\r\n  @Output() triggerDetectionChange: EventEmitter<void> = new EventEmitter<void> ();\r\n  @Output() actionButton: EventEmitter<any> = new EventEmitter<any> ();\r\n  actionAvatarComponentRef?: ComponentRef<any>;\r\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    if (this.options && typeof this.options.content !== \"string\") {\r\n      this.isDynamic = true;\r\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.options.content);\r\n      const viewContainerRef = this.content.viewContainerRef;\r\n      viewContainerRef.clear();\r\n      this.actionAvatarComponentRef = viewContainerRef.createComponent(componentFactory);\r\n      this.actionAvatarComponentRef.instance.setHeader(this.header);\r\n      this.actionAvatarComponentRef.instance.setBubbleOn(this.bubbleOn);\r\n      this.actionAvatarComponentRef.instance.actionButton.subscribe(($event: any) => {\r\n        this.actionButton.emit($event);\r\n        console.log(\"Click: Change it now\");\r\n      });\r\n    }\r\n  }\r\n  ngAfterViewInit(): void {}\r\n\r\n  showPopup() {\r\n    if (this.bubbleOn) {\r\n      this.show = true;\r\n      this.triggerDetectionChange.emit();\r\n    }\r\n  }\r\n\r\n  hidePopup() {\r\n    this.show = false;\r\n    this.triggerDetectionChange.emit();\r\n  }\r\n\r\n  setHeader(header: string) {\r\n    this.header = header;\r\n    this.actionAvatarComponentRef?.instance.setHeader(this.header);\r\n  }\r\n\r\n  setBubbleOn(bubbleOn: boolean) {\r\n    this.bubbleOn = bubbleOn;\r\n  }\r\n\r\n  loadCarComponent(){\r\n    const _viewContainerRef = this.content.viewContainerRef;\r\n\r\n    //removes all views in that container\r\n    _viewContainerRef.clear();\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.options?.content);\r\n\r\n    //Create an instance of the component\r\n    const carComponentRef = _viewContainerRef.createComponent<ActionAvatarComponent>(componentFactory);\r\n/*\r\n    //Pass data to the component\r\n    carComponentRef.instance.image = 'https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80';\r\n*/\r\n  }\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  ElementRef, EventEmitter,\r\n  HostListener,\r\n  Input, Output,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { PopoverOptions } from '../popover.interface';\r\nimport {BubbleAvatarComponent} from \"./bubble-avatar.component\";\r\n\r\n@Directive({\r\n  selector: '[twPopover]',\r\n})\r\nexport class PopoverDirective {\r\n  @Input(\"twPopover\") popover?: PopoverOptions;\r\n\r\n  popoverComponentRef?: ComponentRef<BubbleAvatarComponent>;\r\n  @HostListener('mouseover', ['$event']) onMouseOver($event: any){\r\n    this.popoverComponentRef?.instance.setHeader(this.header);\r\n    this.popoverComponentRef?.instance.setBubbleOn(this.bubbleOn);\r\n    this.popoverComponentRef?.instance.showPopup();\r\n    //this.eleRef.nativeElement.style.color = 'blue';\r\n  }\r\n\r\n  @HostListener('mouseleave', ['$event']) onLeave($event: any){\r\n    this.popoverComponentRef?.instance.hidePopup();\r\n  }\r\n\r\n  @HostListener('click', ['$event']) onClick($event: any){\r\n    this.popoverComponentRef?.instance.setHeader(this.header);\r\n    this.popoverComponentRef?.instance.setBubbleOn(this.bubbleOn);\r\n    this.popoverComponentRef?.instance.showPopup();\r\n  }\r\n\r\n\r\n\r\n\r\n  constructor(private eleRef: ElementRef,\r\n              private el: ElementRef,\r\n              private viewContainer: ViewContainerRef,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  @Input() highlight: any;\r\n  @Input() header: string = '';\r\n  @Input() bubbleOn: boolean = false;\r\n  @Output() actionButton: EventEmitter<any> = new EventEmitter<any> ();\r\n  @Output() avatarButton: EventEmitter<any> = new EventEmitter<any> ();\r\n\r\n\r\n/*\r\n  @HostListener('mouseover') onMouseOver() {\r\n    this.popoverComponentRef?.instance.showPopup();\r\n    this.eleRef.nativeElement.style.color = this.colorName;\r\n  }*/\r\n\r\n\r\n  ngOnInit(): void {\r\n    const factory =  this.componentFactoryResolver.resolveComponentFactory(BubbleAvatarComponent);\r\n\r\n    const comp = factory.create(this.viewContainer.injector);\r\n    comp.instance.display = \"I test some content\";\r\n    comp.instance.popover = this.popover?.content;\r\n    comp.instance.options = this.popover;\r\n    comp.instance.header = this.header;\r\n    comp.instance.bubbleOn = this.bubbleOn;\r\n\r\n    this.popoverComponentRef = comp;\r\n    this.el.nativeElement.classList.add(\"wrapper\");\r\n    this.el.nativeElement.appendChild(comp.location.nativeElement);\r\n\r\n    comp.hostView.detectChanges();\r\n\r\n    comp.instance.triggerDetectionChange.subscribe(() =>  {\r\n      comp.hostView.detectChanges();\r\n    });\r\n\r\n    comp.instance.actionButton.subscribe(($event: any) => {\r\n      this.actionButton.emit($event);\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"tooltip\" [ngClass]=\"{'tooltip-display' : show}\">\r\n  <!--button (click)=\"loadCarComponent()\">Load Car Component</button-->\r\n  <span *ngIf=\"!isDynamic\">{{popover}}</span>\r\n  <ng-template appDynamicComp>\r\n  </ng-template>\r\n\r\n</div>\r\n\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  OnInit,\r\n  AfterViewInit,\r\n  ComponentFactoryResolver,\r\n  ChangeDetectionStrategy,\r\n  ApplicationRef,\r\n  Output,\r\n  EventEmitter,\r\n  Type, ComponentRef\r\n} from '@angular/core';\r\nimport { DynamicCompDirective } from '../dynamic-comp.directive';\r\nimport { PopoverOptions } from '../popover.interface'\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"../../actions/action-input/action-input.interface\";\r\n\r\n\r\n@Component({\r\n  selector: 'bubble-input',\r\n    templateUrl: './bubble-input.component.html',\r\n  styleUrls: ['./bubble-input.component.scss']\r\n})\r\nexport class BubbleInputComponent implements OnInit, AfterViewInit{\r\n  @Input() display: any;\r\n  @Input() popover: any;\r\n  @Input() data?: ActionInput[];\r\n  @Input() header?: string;\r\n  @Input()  options?: PopoverOptions;\r\n  show: boolean = false;\r\n  isDynamic: boolean = false;\r\n  @ViewChild(DynamicCompDirective, {static: true}) content!: DynamicCompDirective;\r\n  @Output() triggerDetectionChange: EventEmitter<void> = new EventEmitter<void> ();\r\n  actionInputComponentRef?: ComponentRef<any>;\r\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    if (this.options && typeof this.options.content !== \"string\") {\r\n      this.isDynamic = true;\r\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.options.content);\r\n      const viewContainerRef = this.content.viewContainerRef;\r\n      viewContainerRef.clear();\r\n      this.actionInputComponentRef = viewContainerRef.createComponent(componentFactory);\r\n      this.actionInputComponentRef.instance.setConditions(this.data);\r\n      this.actionInputComponentRef.instance.setHeader(this.header);\r\n    }\r\n\r\n  }\r\n  ngAfterViewInit(): void {}\r\n\r\n  showPopup() {\r\n    if (this.data != undefined && this.data?.length > 0) {\r\n      this.show = true;\r\n      this.triggerDetectionChange.emit();\r\n    }\r\n  }\r\n\r\n  hidePopup() {\r\n    this.show = false;\r\n    this.triggerDetectionChange.emit();\r\n  }\r\n\r\n  setData(data: ActionInput[]) {\r\n    this.data = data;\r\n    this.actionInputComponentRef?.instance.setConditions(this.data);\r\n  }\r\n\r\n  setHeader(header: string) {\r\n    this.header = header;\r\n    this.actionInputComponentRef?.instance.setHeader(this.header);\r\n  }\r\n\r\n  /*   loadCarComponent(){\r\n     const _viewContainerRef = this.content.viewContainerRef;\r\n\r\n     //removes all views in that container\r\n     _viewContainerRef.clear();\r\n\r\n     const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.options?.content);\r\n\r\n     //Create an instance of the compo\r\n     /*    const carComponentRef = _viewContainerRef.createComponent<ActionInputComponent>(componentFactory);\r\n\r\n         //Pass data to the component\r\n         carComponentRef.instance.image = 'https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80';\r\n\r\n   }*/\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { PopoverOptions } from '../popover.interface';\r\nimport {BubbleInputComponent} from \"./bubble-input.component\";\r\nimport {ActionInput} from \"../../actions/action-input/action-input.interface\";\r\n\r\n@Directive({\r\n  selector: '[inputPopover]',\r\n})\r\nexport class PopoverInputDirective {\r\n  @Input(\"inputPopover\") popover?: PopoverOptions;\r\n\r\n  popoverComponentRef?: ComponentRef<BubbleInputComponent>;\r\n  @HostListener('mouseover', ['$event']) onMouseOver($event: any){\r\n    this.popoverComponentRef?.instance.setData(this.data!);\r\n    this.popoverComponentRef?.instance.showPopup();\r\n    //this.eleRef.nativeElement.style.color = 'blue';\r\n  }\r\n\r\n  @HostListener('mouseleave', ['$event']) onLeave($event: any){\r\n    this.popoverComponentRef?.instance.hidePopup();\r\n  }\r\n\r\n  @HostListener('click', ['$event']) onClick($event: any){\r\n    this.popoverComponentRef?.instance.setData(this.data!);\r\n    this.popoverComponentRef?.instance.showPopup();\r\n  }\r\n\r\n  @HostListener('keyup', ['$event']) onDataChange($event: any) {\r\n    this.popoverComponentRef?.instance.setData(this.data!);\r\n    this.popoverComponentRef?.instance.showPopup();\r\n  }\r\n\r\n\r\n  constructor(private eleRef: ElementRef,\r\n              private el: ElementRef,\r\n              private viewContainer: ViewContainerRef,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  @Input() highlight: any;\r\n  @Input() data?: ActionInput[] | undefined;\r\n  @Input() header?: string = '';\r\n\r\n/*\r\n  @HostListener('mouseover') onMouseOver() {\r\n    this.popoverComponentRef?.instance.showPopup();\r\n    this.eleRef.nativeElement.style.color = this.colorName;\r\n  }*/\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n    const factory =  this.componentFactoryResolver.resolveComponentFactory(BubbleInputComponent);\r\n\r\n    const comp = factory.create(this.viewContainer.injector);\r\n    comp.instance.display = \"I test some content\";\r\n    comp.instance.popover = this.popover?.content;\r\n    comp.instance.options = this.popover;\r\n    comp.instance.data = this.data;\r\n    comp.instance.header = this.header;\r\n\r\n    this.popoverComponentRef = comp;\r\n    this.el.nativeElement.classList.add(\"wrapper\");\r\n    this.el.nativeElement.appendChild(comp.location.nativeElement);\r\n\r\n    comp.hostView.detectChanges();\r\n\r\n    comp.instance.triggerDetectionChange.subscribe(() =>  {\r\n      comp.hostView.detectChanges();\r\n    });\r\n  }\r\n\r\n}\r\n","import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appDynamicComp]'\r\n})\r\nexport class DynamicCompDirective {\r\n\r\n  constructor(public viewContainerRef: ViewContainerRef) {}\r\n\r\n}\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\" (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div  #formHeader class=\"form-header\">\r\n      Forgot Password?\r\n    </div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n    <form name=\"currentForm\" [formGroup]=\"mForm\">\r\n      <div  class=\"Vector\">\r\n\r\n\r\n\r\n        <div class=\"second-header\" style=\"top: 5px;\">\r\n          <p class=\"second-header-text\"  #secondHeader href=\"#/login\" style=\"position: relative; top: 5px; text-align: left\">\r\n            {{ 'Please enter your User Name:'}}<br>\r\n          </p>\r\n        </div>\r\n\r\n\r\n        <div #formFields id=\"button-successfully\" style=\"\">\r\n          <storybook-button-successfully  *ngIf=\"status.isRecSuccess\"  style=\"position: relative; top: 15px\"></storybook-button-successfully>\r\n          <ng-template  *ngIf=\"status.isVerSuccess\"  appDynamicComp>\r\n\r\n          </ng-template>\r\n\r\n          <storybook-input  style=\"\" *ngIf=\"!status.isRecSuccess\"\r\n                           [storyInput]=\"storyInputsInOrder[0]\"\r\n                           (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                           (onPinInput)=\"onPinInput.emit($event)\"\r\n                           [currentForm]=\"mForm\">\r\n          </storybook-input>\r\n          <!--code-input *ngIf=\"!status.isVerSuccess\"\r\n                      #codeInput\r\n                      [codeLength]=\"codeLength\"\r\n                      (codeChanged)=\"onCodeChanged($event)\"\r\n                      (codeCompleted)=\"onCodeCompleted($event)\">\r\n          </code-input-->\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div class=\"login-button\">\r\n          <div class=\"login-failed-message\" role=\"alert\" style=\"position: relative; top: 15px\">\r\n            <table *ngIf=\"this.status?.isVerFailed\">\r\n              <tr>{{ this.status?.verErrorMessage.toString()  | apiErrorMessage: param }}</tr>\r\n              <tr  *ngFor=\"let message of this.status?.verErrorMessage.data?.confirmPassword.split(', ')\">{{message.trim() | apiErrorMessage: param }}</tr>\r\n            </table>\r\n          </div>\r\n\r\n          <storybook-button-continue #formButton size=\"small\" [label]=\"this.formButtonLabel\" type=\"button\"\r\n                                     (onClick)=\"this.onSubmit()\" style=\"position: relative; top: 15px\"></storybook-button-continue>\r\n\r\n\r\n          <a *ngIf=\"status.isRecSuccess && !status.isVerSuccess\" class=\"resend-verification\"  (click)=\"generateNewCodeFor2SV.emit()\" style=\"position: relative; top: 40px;\">\r\n            {{ 'Send me a reset password once again'  }}\r\n          </a>\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n","import {\r\n  Component, ComponentFactoryResolver, ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges, Type,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {CodeInputComponent} from \"../../inputs/code-input/code-input.component\";\r\nimport {DynamicCompDirective} from \"../../directive/dynamic-comp.directive\";\r\nimport {PopoverOptions} from \"../../directive/popover.interface\";\r\n\r\n\r\nexport interface AdComponent {\r\n  content: any;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-forgot-pass-form',\r\n  templateUrl: './forgot-pass-form.component.html',\r\n  styleUrls: ['./forgot-pass-form.component.scss'],\r\n})\r\nexport default class ForgotPassFormComponent implements OnInit {\r\n\r\n  codeLength: number = 4;\r\n  code: string = '';\r\n  param = {language: 'login-main'};\r\n  formButtonLabel: string = 'Send me a Verification Code';\r\n  formButtonClick: string = 'generateNewCodeFor2SV.emit()';\r\n\r\n  @Input() status?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() sendVerificationReq: EventEmitter<string> = new EventEmitter();\r\n\r\n  @Output() generateNewCodeFor2SV: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild(DynamicCompDirective, {static: true}) appDynamicComp!: DynamicCompDirective;\r\n  //@ViewChild('codeInput') codeInput!: CodeInputComponent;\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild('secondHeader', { static: false }) secondHeader?: ElementRef;\r\n\r\n  @ViewChild('formHeader', { static: false }) formHeader?: ElementRef;\r\n\r\n  @ViewChild('formFields', { static: false }) formFields?: ElementRef;\r\n\r\n  @ViewChild('formButton', { static: false }) formButton?: ElementRef;\r\n\r\n  @Input() isVerSuccess = false;\r\n\r\n  @Input() isRecSuccess = false;\r\n\r\n  constructor(private renderer: Renderer2,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  changeLog: string[] = [];\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRecSuccess) {\r\n      if (!changes.isRecSuccess.previousValue &&  changes.isRecSuccess.currentValue) {\r\n        console.warn('Identify Request Succeeded!');\r\n        this.movToVerifyState();\r\n      }\r\n    }\r\n\r\n    if (changes.isVerSuccess) {\r\n      if (!changes.isVerSuccess.previousValue &&  changes.isVerSuccess.currentValue) {\r\n        console.warn('Verify Request Succeeded!');\r\n        //this.changeFormToPinCodeState();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  onSubmit(): void {\r\n    if (!this.isRecSuccess) {this.generateNewCodeFor2SV.emit();}\r\n    /*else if (!this.isVerSuccess) {\r\n      console.info('Send Verification Request!');\r\n      this.sendVerificationReq.emit(this.code);\r\n      if (!this.status.isVerSuccess) {this.codeInputComponentRef?.instance.reset();}\r\n    }*/\r\n    else {this.clickXButton.emit();}\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of Inputs\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup = new FormGroup({});\r\n\r\n  // this called every time when user changed the code\r\n  onCodeChanged(code: string) {\r\n    this.code = code;\r\n    //console.log('code entered: '+ this.code);\r\n  }\r\n\r\n  // this called only if user entered full code\r\n  onCodeCompleted(code: string) {\r\n    //\r\n  }\r\n\r\n  popoverOptions: AdComponent = {\r\n    content: CodeInputComponent\r\n  };\r\n\r\n  codeInputComponentRef?: ComponentRef<any>;\r\n\r\n  movToVerifyState(){\r\n    this.renderer.setProperty(this.formHeader?.nativeElement ,'innerHTML',\r\n      'Reset Password');\r\n\r\n    this.renderer.setProperty(this.secondHeader?.nativeElement ,'innerHTML',\r\n      'A new temporary password has been sent to<br>your email address'); //+\r\n      //'Once received, use the temporary password to log in<br>' +\r\n      //'You will be required to create a new secure password once logged in<br>'\r\n\r\n    this.formButtonLabel = 'Continue';\r\n\r\n    this.formButtonClick = '\"onSubmit()\"';\r\n\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.popoverOptions.content);\r\n    const viewContainerRef = this.appDynamicComp.viewContainerRef;\r\n    viewContainerRef.clear();\r\n    this.codeInputComponentRef = viewContainerRef.createComponent(componentFactory);\r\n    this.codeInputComponentRef.instance.codeChanged.subscribe(($event: string) => {\r\n      this.onCodeChanged($event);\r\n      console.log(\"Code Changed\");\r\n    });\r\n\r\n\r\n  }\r\n}\r\n\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <div class=\"form-header\">\r\n      <a>Aeonix App Center</a>\r\n    </div>\r\n    <div><storybook-spinner1  *ngIf=\"isLoading\"></storybook-spinner1></div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n      <div  *ngIf=\"!isLoggedIn\" class=\"Vector\">\r\n\r\n        <div class=\"login-button\">\r\n\r\n            <div *ngIf=\"isLoggedIn\">isRegSuccess</div>\r\n            <div *ngIf=\"!isLoggedIn && storyInputsInOrder.length === 0\">empty</div>\r\n            <storybook-input\r\n              [storyInput]=\"storyInputsInOrder[0]\"\r\n              (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n              (onPinInput)=\"onPinInput.emit($event)\"\r\n              [currentForm]=\"mForm\">\r\n            </storybook-input>\r\n\r\n            <storybook-input\r\n              [storyInput]=\"storyInputsInOrder[1]\"\r\n              (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n              (onPinInput)=\"onPinInput.emit($event)\"\r\n              [currentForm]=\"mForm\">\r\n            </storybook-input>\r\n\r\n\r\n            <br>\r\n            <div class=\"thematic-break\"></div>\r\n            <div class=\"login-failed-message\" role=\"alert\" >\r\n              <p *ngIf=\"isLoginFailed\">*  {{ loginErrorMessage | apiErrorMessage: param }}</p>\r\n            </div>\r\n\r\n\r\n            <a (click)=\"this.openForgetPassForm.emit();\" class=\"forgot-password\"  >\r\n              {{ 'Forgot password?'  }}\r\n            </a>\r\n\r\n            <storybook-button-continue size=\"medium\" label=\"Continue \" type=\"button\" (click)=\"onSubmit()\" ></storybook-button-continue>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../../inputs/input/story-input.model\";\r\nimport { AuthService } from '../../../app/_services/auth.service';\r\n//import {ApiErrorMessageService} from \"../../../app/storybook/pipes/api-error-message.service\";\r\n//import {ApiErrorMessageService} from \"../../../app/storybook/pipes/api-error-message.service\";\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-login-form',\r\n  templateUrl: './login-form.component.html',\r\n  styleUrls: ['./login-form.css'],\r\n})\r\nexport default class LoginFormComponent implements OnInit {\r\n\r\n\r\n  param = {language: 'login-main'};\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  @Input() isLoginFailed = false;\r\n\r\n  @Input() loginErrorMessage = '';\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  constructor(/*private apiErrorMessage: ApiErrorMessageService*/) {\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of Inputs\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup = new FormGroup({});\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() sendLoginReq = new EventEmitter();\r\n\r\n  @Output() openForgetPassForm = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n\r\n    this.sendLoginReq.emit();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.mForm?.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.mForm?.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\" (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <button id=\"button-log-out\" (click)=\"this.doLogout($event)\" >Log out</button>\r\n    <label style=\"top: 1px; display: inline;\">Log out</label>\r\n    <div class=\"form-header\">\r\n      <a class=\"main-form-header\" #formHeader>My Account</a>\r\n      <br>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n      <div class=\"Vector\">\r\n\r\n\r\n        <div *ngIf=\"isRegSuccess\" id=\"button-successfully\" style=\"\">\r\n          <storybook-button-successfully   style=\"position: relative; margin-bottom: 50px;\"></storybook-button-successfully>\r\n        </div>\r\n\r\n        <div class=\"login-button\">\r\n            <div *ngIf=\"!isRegSuccess && storyInputsInOrder.length === 0\">empty</div>\r\n            <div *ngIf=\"!isRegSuccess\">\r\n              <storybook-account-input\r\n                [storyInput]=\"storyInputsInOrder[0]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-account-input>\r\n              <div class=\"thematic-break\"></div>\r\n              <storybook-account-input\r\n                [storyInput]=\"storyInputsInOrder[1]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\"\r\n                [conditionList]=\"['requiresPhone']\">\r\n              </storybook-account-input>\r\n              <div class=\"thematic-break\"></div>\r\n              <storybook-account-input\r\n                [storyInput]=\"storyInputsInOrder[2]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\"\r\n                [conditionList]=\"['requiresEmail']\">\r\n              </storybook-account-input>\r\n              <div class=\"thematic-break\"></div>\r\n              <storybook-account-input\r\n                [storyInput]=\"storyInputsInOrder[3]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (changePassword)=\"changePassword.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-account-input>\r\n\r\n            </div>\r\n\r\n            <div class=\"login-failed-message\" role=\"alert\" >\r\n              <p *ngIf=\"isRegFailed\">*  {{ this.regErrorMessage['message'] | apiErrorMessage: param }}</p>\r\n            </div>\r\n\r\n            <!--storybook-button-continue  hidden size=\"small\"\r\n                                       label=\"Continue\" type=\"button\" (click)=\"onSubmit()\" >\r\n            </storybook-button-continue-->\r\n\r\n            <storybook-button-configuration *ngIf=\"displayToolButton\" class=\"button-configuration\" size=\"large\"\r\n                                            (click)=\"this.openUser.emit()\">\r\n            </storybook-button-configuration>\r\n        </div>\r\n      </div>\r\n\r\n    </form>\r\n  </div>\r\n  </div>\r\n</div>\r\n\r\n","import {\r\n  AfterViewChecked,\r\n  Component, Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input, OnChanges,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  Renderer2, SimpleChanges, ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {ApiErrorMessageService} from \"../../../app/storybook/pipes/api-error-message.service\";\r\nimport {AccountInput} from \"../../inputs/account-input/account-input.model\";\r\n//import {BehaviorSubject} from \"rxjs\";\r\n//import {AccountInputComponent} from \"../inputs/input/story-input.component\";\r\n\r\n/*\r\n@Directive({selector: 'storybook-input'})\r\nexport class AccountInput {\r\n  @Input() storyInput!: AccountInput;\r\n}\r\n*/\r\n@Component({\r\n  selector: 'storybook-my-account-form',\r\n  templateUrl: './my-account-form.component.html',\r\n  styleUrls: ['./my-account-form.css'],\r\n})\r\nexport default class MyAccountFormComponent implements OnInit, AfterViewChecked, OnChanges {\r\n\r\n  @Output() onLogout = new EventEmitter<Event>();\r\n\r\n  @Output() openUser = new EventEmitter<Event>();\r\n\r\n  doLogout(event: Event) {\r\n    this.onLogout.emit(event);\r\n    this.clickXButton.emit();\r\n  }\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  @Input() isRegFailed = false;\r\n  @Input() regErrorMessage: any = {};\r\n  @Input() displayToolButton: boolean = false;\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\r\n  @ViewChild('storybook-input', { static: false }) storybookInput?: ElementRef;\r\n\r\n\r\n  param = {language: 'login-main'};\r\n\r\n  constructor(private renderer: Renderer2) {\r\n  }\r\n\r\n  storyInputsInOrder: AccountInput[] = [];\r\n\r\n  @Input() mForm: FormGroup  = new FormGroup({});\r\n  /*username: new FormControl('', Validators.minLength(2)),\r\n  password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n  email: new FormControl('', Validators.email),\r\n  phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))*/\r\n\r\n  changeLog: string[] = [];\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRegSuccess) {\r\n      if (!changes.isRegSuccess.previousValue &&  changes.isRegSuccess.currentValue) {\r\n        console.warn('Register Request Succeeded!');\r\n        this.loadSuccessfullyLoggedIn();\r\n      }\r\n    }\r\n    /*if (changes.isRegFailed || changes.regErrorMessage) {\r\n      console.log('isRegFailed' + this.regErrorMessage['message'])\r\n    }*/\r\n  }\r\n\r\n\r\n\r\n  @Input() isRegSuccess = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() sendRegReq: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() changePassword: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: AccountInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t =>  t.state === 'PASSWORD' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION');\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Registry Request Sent!');\r\n    this.sendRegReq.emit();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.mForm?.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.mForm?.get('phone')!;\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    //console.log(this.childComp?.length)\r\n  }\r\n\r\n  loadSuccessfullyLoggedIn(){\r\n    this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully complete your registeration!');\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\" (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div class=\"form-header\">\r\n      <a class=\"main-form-header\" #formHeader>Complete Registration</a>\r\n      <br>\r\n      <a *ngIf=\"!isRegSuccess\" class=\"sub-form-header\">complete the registration by filling the missing info:</a>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n      <div class=\"Vector\">\r\n\r\n\r\n        <div *ngIf=\"isRegSuccess\" id=\"button-successfully\" style=\"\">\r\n          <storybook-button-successfully   style=\"position: relative; margin-bottom: 50px;\"></storybook-button-successfully>\r\n        </div>\r\n\r\n        <div class=\"login-button\">\r\n            <div *ngIf=\"!isRegSuccess && storyInputsInOrder.length === 0\">empty</div>\r\n            <div *ngIf=\"!isRegSuccess\">\r\n              <storybook-input\r\n                [storyInput]=\"storyInputsInOrder[0]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-input>\r\n              <storybook-input\r\n                [storyInput]=\"storyInputsInOrder[1]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-input>\r\n              <storybook-input\r\n                [storyInput]=\"storyInputsInOrder[2]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\"\r\n                [conditionList]=\"['requiresPhone']\">\r\n              </storybook-input>\r\n              <storybook-input\r\n                [storyInput]=\"storyInputsInOrder[3]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\"\r\n                [conditionList]=\"['requiresEmail']\">\r\n              </storybook-input>\r\n              <!--storybook-input\r\n                *ngFor=\"let storyInput of storyInputsInOrder\"\r\n                [storyInput]=\"storyInput\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-input-->\r\n            </div>\r\n\r\n            <div *ngIf=\"!isRegSuccess\" class=\"thematic-break\"></div>\r\n            <div class=\"login-failed-message\" role=\"alert\" >\r\n              <p *ngIf=\"isRegFailed\">*  {{ this.regErrorMessage['message'] | apiErrorMessage: param }}</p>\r\n            </div>\r\n\r\n            <storybook-button-continue [label]=\"isRegSuccess ? 'Continue' :'Complete Rgistration'\"  size=\"small\"\r\n                                       label=\"Continue\" type=\"button\" (click)=\"onSubmit()\" >\r\n            </storybook-button-continue>\r\n        </div>\r\n        </div>\r\n\r\n    </form>\r\n  </div>\r\n  </div>\r\n</div>\r\n\r\n","import {\r\n  AfterViewChecked,\r\n  Component, Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input, OnChanges,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  Renderer2, SimpleChanges, ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {ApiErrorMessageService} from \"../../../app/storybook/pipes/api-error-message.service\";\r\n//import {BehaviorSubject} from \"rxjs\";\r\n//import {AccountInputComponent} from \"../inputs/input/story-input.component\";\r\n\r\n/*\r\n@Directive({selector: 'storybook-input'})\r\nexport class AccountInput {\r\n  @Input() storyInput!: AccountInput;\r\n}\r\n*/\r\n@Component({\r\n  selector: 'storybook-registry-form',\r\n  templateUrl: './registry-form.component.html',\r\n  styleUrls: ['./registry-form.css'],\r\n})\r\nexport default class RegistryFormComponent implements OnInit, AfterViewChecked, OnChanges {\r\n\r\n/*\r\n  @ViewChild('storybook-input')\r\n  set mStoryInput(v: AccountInput) {\r\n    setTimeout(() => {\r\n      this.selectedPane = v.id;\r\n      console.log('this.selectedPane'+this.selectedPane.toString())\r\n    }, 30);\r\n  }\r\n  selectedPane: string = '';\r\n  shouldShow = true;\r\n  toggle() {\r\n    this.shouldShow = !this.shouldShow;\r\n  }\r\n*/\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  @Input() isRegFailed = false;\r\n\r\n  @Input() regErrorMessage: any = {};\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\r\n  @ViewChild('storybook-input', { static: false }) storybookInput?: ElementRef;\r\n\r\n\r\n  param = {language: 'login-main'};\r\n\r\n  constructor(private renderer: Renderer2) {\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup  = new FormGroup({});\r\n  /*username: new FormControl('', Validators.minLength(2)),\r\n  password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n  email: new FormControl('', Validators.email),\r\n  phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))*/\r\n\r\n  changeLog: string[] = [];\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRegSuccess) {\r\n      if (!changes.isRegSuccess.previousValue &&  changes.isRegSuccess.currentValue) {\r\n        console.warn('Register Request Succeeded!');\r\n        this.loadSuccessfullyLoggedIn();\r\n      }\r\n    }\r\n    /*if (changes.isRegFailed || changes.regErrorMessage) {\r\n      console.log('isRegFailed' + this.regErrorMessage['message'])\r\n    }*/\r\n  }\r\n\r\n\r\n\r\n  @Input() isRegSuccess = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() sendRegReq: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION');\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Registry Request Sent!');\r\n\r\n    //this.renderer.setAttribute(this.storybookInput?.nativeElement ,'hidden', 'true');\r\n    //this.renderer.setAttribute(this.mainHeader?.nativeElement ,'hidden', 'true');\r\n    //this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully complete your registeration!');\r\n\r\n\r\n    //this.renderer.setAttribute(this.storybookInput?.nativeElement ,'innerHTML','true');\r\n    this.sendRegReq.emit();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.mForm?.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.mForm?.get('phone')!;\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    //console.log(this.childComp?.length)\r\n  }\r\n\r\n  loadSuccessfullyLoggedIn(){\r\n    this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully complete your registeration!');\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\" (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div class=\"form-header\">\r\n      <a class=\"main-form-header\" #formHeader>Change Password</a>\r\n      <br>\r\n\r\n      <br>\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n        <div class=\"Vector\">\r\n\r\n          <div *ngIf=\"status.isRepSuccess\" id=\"button-successfully\" style=\"\">\r\n            <storybook-button-successfully   style=\"position: relative; margin-bottom: 50px;\"></storybook-button-successfully>\r\n          </div>\r\n\r\n          <div class=\"login-button\">\r\n              <div *ngIf=\"!status.isRepSuccess && storyInputsInOrder.length === 0\">empty</div>\r\n              <div *ngIf=\"!status.isRepSuccess\">\r\n                <storybook-input\r\n                  [storyInput]=\"storyInputsInOrder[0]\"\r\n                  (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                  (onPinInput)=\"onPinInput.emit($event)\"\r\n                  [currentForm]=\"mForm\">\r\n                </storybook-input>\r\n\r\n                <div *ngIf=\"!status.isRepSuccess\" class=\"thematic-break\"></div>\r\n\r\n                <storybook-input\r\n                  [storyInput]=\"storyInputsInOrder[1]\"\r\n                  (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                  (onPinInput)=\"onPinInput.emit($event)\"\r\n                  [currentForm]=\"mForm\"\r\n                  [conditionList]=\"['minLength','requiresUppercase','requiresLowercase','requiresDigit','requiresSpecialChars']\">\r\n                </storybook-input>\r\n\r\n\r\n                <div></div>\r\n                <storybook-input\r\n                  [storyInput]=\"storyInputsInOrder[2]\"\r\n                  (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                  (onPinInput)=\"onPinInput.emit($event)\"\r\n                  [currentForm]=\"mForm\"\r\n                  [conditionList]=\"['minLength','requiresUppercase','requiresLowercase','requiresDigit','requiresSpecialChars']\">\r\n                </storybook-input>\r\n              </div>\r\n\r\n              <br>\r\n                <div class=\"login-failed-message\" role=\"alert\" >\r\n                  <table *ngIf=\"this.status?.isRepFailed\">\r\n                    <tr>{{ this.status?.repErrorMessage['message'] | apiErrorMessage: param }}</tr>\r\n                    <tr  *ngFor=\"let message of this.status?.repErrorMessage.data?.confirmPassword.split(', ')\">{{message.trim() | apiErrorMessage: param }}</tr>\r\n                  </table>\r\n                </div>\r\n              <storybook-button-continue [label]=\"status.isRepSuccess ? 'Continue' :'Change Password'\" size=\"small\"\r\n                                         label=\"Continue\" type=\"button\" (click)=\"onSubmit()\" >\r\n              </storybook-button-continue>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n","import {\r\n  AfterViewChecked,\r\n  Component, Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input, OnChanges,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  Renderer2, SimpleChanges, ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {PopoverOptions} from \"../../directive/popover.interface\";\r\nimport {ActionInputComponent} from \"../../actions/action-input/action-input.component\";\r\n//import {BehaviorSubject} from \"rxjs\";\r\n//import {AccountInputComponent} from \"../inputs/input/story-input.component\";\r\n\r\n/*\r\n@Directive({selector: 'storybook-input'})\r\nexport class AccountInput {\r\n  @Input() storyInput!: AccountInput;\r\n}\r\n*/\r\n@Component({\r\n  selector: 'storybook-replace-pass-form',\r\n  templateUrl: './replace-pass-form.component.html',\r\n  styleUrls: ['./replace-pass-form.css'],\r\n})\r\nexport default class ReplacePassFormComponent implements OnInit, AfterViewChecked, OnChanges {\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  param = {language: 'login-main'};\r\n\r\n\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  @Input() isRepFailed = false;\r\n\r\n  @Input() isRepSuccess = false;\r\n\r\n\r\n  @Input() repErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\r\n  @ViewChild('storybook-input', { static: false }) storybookInput?: ElementRef;\r\n\r\n\r\n\r\n  constructor(private renderer: Renderer2) {\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup  = new FormGroup({});\r\n\r\n\r\n  changeLog: string[] = [];\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRepSuccess) {\r\n      if (!changes.isRepSuccess.previousValue &&  changes.isRepSuccess.currentValue) {\r\n        console.warn('ReplacePassForm Request Succeeded!');\r\n        this.loadSuccessfullyLoggedIn();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input() status?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() sendRegReq: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION');\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('ReplacePassForm Request Sent!');\r\n\r\n    //this.renderer.setAttribute(this.storybookInput?.nativeElement ,'hidden', 'true');\r\n    //this.renderer.setAttribute(this.mainHeader?.nativeElement ,'hidden', 'true');\r\n    //this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully complete your registeration!');\r\n\r\n\r\n    //this.renderer.setAttribute(this.storybookInput?.nativeElement ,'innerHTML','true');\r\n    this.sendRegReq.emit();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get oldPassword(): AbstractControl {\r\n    return this.mForm?.get('oldPassword')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get confirmPassword(): AbstractControl {\r\n    return this.mForm?.get('confirmPassword')!;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  ngAfterViewChecked(): void {\r\n    //console.log(this.childComp?.length)\r\n  }\r\n\r\n  loadSuccessfullyLoggedIn(){\r\n    this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully changed your password!');\r\n  }\r\n\r\n}\r\n\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\"  (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div class=\"form-header\">\r\n      <a #formHeader>Forgot Password?</a>\r\n    </div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n    <form name=\"currentForm\" [formGroup]=\"mForm\">\r\n      <div  class=\"Vector\">\r\n\r\n        <br>\r\n        <br>\r\n        <br>\r\n\r\n        <div class=\"second-header\" style=\"top: 82px;\">\r\n          <a class=\"second-header-text\"  #secondHeader href=\"#/login\" style=\"position: relative; top: 10px; text-align: left\">\r\n            {{ 'Please enter your User Name:'}}<br>\r\n          </a>\r\n        </div>\r\n\r\n\r\n        <div #formFields id=\"button-successfully\" style=\"\">\r\n          <storybook-button-successfully  *ngIf=\"status.isVerSuccess\"  style=\"position: relative; top: 15px\"></storybook-button-successfully>\r\n          <ng-template  *ngIf=\"status.isVerSuccess\"  appDynamicComp>\r\n\r\n          </ng-template>\r\n\r\n          <storybook-input *ngIf=\"!status.isRecSuccess\"\r\n                           [storyInput]=\"storyInputsInOrder[0]\"\r\n                           (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                           (onPinInput)=\"onPinInput.emit($event)\"\r\n                           [currentForm]=\"mForm\">\r\n          </storybook-input>\r\n          <!--code-input *ngIf=\"!status.isVerSuccess\"\r\n                      #codeInput\r\n                      [codeLength]=\"codeLength\"\r\n                      (codeChanged)=\"onCodeChanged($event)\"\r\n                      (codeCompleted)=\"onCodeCompleted($event)\">\r\n          </code-input-->\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div class=\"login-button\">\r\n          <div class=\"login-failed-message\" role=\"alert\" style=\"position: relative; top: 15px\">\r\n            <table *ngIf=\"this.status?.isVerFailed\">\r\n              <tr>{{ this.status?.verErrorMessage.toString()  | apiErrorMessage: param }}</tr>\r\n              <tr  *ngFor=\"let message of this.status?.verErrorMessage.data?.confirmPassword.split(', ')\">{{message.trim() | apiErrorMessage: param }}</tr>\r\n            </table>\r\n          </div>\r\n\r\n          <storybook-button-continue #formButton size=\"small\" [label]=\"this.formButtonLabel\" type=\"button\"\r\n                                     (onClick)=\"this.onSubmit()\" style=\"position: relative; top: 15px\"></storybook-button-continue>\r\n\r\n\r\n          <a *ngIf=\"status.isRecSuccess && !status.isVerSuccess\" class=\"resend-verification\"  (click)=\"generateNewCodeFor2SV.emit()\" style=\"position: relative; top: 40px;\">\r\n            {{ 'resend the verification code'  }}\r\n          </a>\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n","import {\r\n  Component, ComponentFactoryResolver, ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges, Type,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {CodeInputComponent} from \"../../inputs/code-input/code-input.component\";\r\nimport {DynamicCompDirective} from \"../../directive/dynamic-comp.directive\";\r\nimport {PopoverOptions} from \"../../directive/popover.interface\";\r\n\r\n\r\nexport interface AdComponent {\r\n  content: any;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-reset-pass-form',\r\n  templateUrl: './reset-pass-form.component.html',\r\n  styleUrls: ['./reset-pass-form.component.scss'],\r\n})\r\nexport default class ResetPassFormComponent implements OnInit {\r\n\r\n  codeLength: number = 4;\r\n  code: string = '';\r\n  param = {language: 'login-main'};\r\n  formButtonLabel: string = 'Send me a Verification Code';\r\n  formButtonClick: string = 'generateNewCodeFor2SV.emit()';\r\n\r\n  @Input() status?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() sendVerificationReq: EventEmitter<string> = new EventEmitter();\r\n\r\n  @Output() generateNewCodeFor2SV: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild(DynamicCompDirective, {static: true}) appDynamicComp!: DynamicCompDirective;\r\n  //@ViewChild('codeInput') codeInput!: CodeInputComponent;\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild('secondHeader', { static: false }) secondHeader?: ElementRef;\r\n\r\n  @ViewChild('formHeader', { static: false }) formHeader?: ElementRef;\r\n\r\n  @ViewChild('formFields', { static: false }) formFields?: ElementRef;\r\n\r\n  @ViewChild('formButton', { static: false }) formButton?: ElementRef;\r\n\r\n  @Input() isVerSuccess = false;\r\n\r\n  @Input() isRecSuccess = false;\r\n\r\n  constructor(private renderer: Renderer2,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  changeLog: string[] = [];\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRecSuccess) {\r\n      if (!changes.isRecSuccess.previousValue &&  changes.isRecSuccess.currentValue) {\r\n        console.warn('Identify Request Succeeded!');\r\n        this.movToVerifyState();\r\n      }\r\n    }\r\n\r\n    if (changes.isVerSuccess) {\r\n      if (!changes.isVerSuccess.previousValue &&  changes.isVerSuccess.currentValue) {\r\n        console.warn('Verify Request Succeeded!');\r\n        //this.changeFormToPinCodeState();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  onSubmit(): void {\r\n    if (!this.isRecSuccess) {this.generateNewCodeFor2SV.emit();}\r\n    else if (!this.isVerSuccess) {\r\n      console.info('Send Verification Request!');\r\n      this.sendVerificationReq.emit(this.code);\r\n      if (!this.status.isVerSuccess) {this.codeInputComponentRef?.instance.reset();/*this.codeInput.reset();*/}\r\n    }\r\n    else {}\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of Inputs\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup = new FormGroup({});\r\n\r\n  // this called every time when user changed the code\r\n  onCodeChanged(code: string) {\r\n    this.code = code;\r\n    //console.log('code entered: '+ this.code);\r\n  }\r\n\r\n  // this called only if user entered full code\r\n  onCodeCompleted(code: string) {\r\n    //\r\n  }\r\n\r\n  popoverOptions: AdComponent = {\r\n    content: CodeInputComponent\r\n  };\r\n\r\n  codeInputComponentRef?: ComponentRef<any>;\r\n\r\n  movToVerifyState(){\r\n    this.renderer.setProperty(this.secondHeader?.nativeElement ,'innerHTML',\r\n      'Please enter the Verification Code<br>you received in your mail:');\r\n\r\n    this.renderer.setProperty(this.formHeader?.nativeElement ,'innerHTML',\r\n      'Change Password');\r\n\r\n\r\n    this.formButtonLabel = 'Continue';\r\n\r\n    this.formButtonClick = '\"onSubmit()\"';\r\n\r\n    //this.renderer.setAttribute(this.formButton.  nativeElement, 'onClick', '\"onSubmit()\"' );\r\n\r\n    /*this.renderer.setProperty(this.formFields?.nativeElement ,'innerHTML',\r\n      '<code-input #codeInput [codeLength]=\"codeLength\" (codeChanged)=\"onCodeChanged($event)\" (codeCompleted)=\"onCodeCompleted($event)\"> </code-input>'\r\n    );*/\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.popoverOptions.content);\r\n    const viewContainerRef = this.appDynamicComp.viewContainerRef;\r\n    viewContainerRef.clear();\r\n    this.codeInputComponentRef = viewContainerRef.createComponent(componentFactory);\r\n    this.codeInputComponentRef.instance.codeChanged.subscribe(($event: string) => {\r\n      this.onCodeChanged($event);\r\n      console.log(\"Code Changed\");\r\n    });\r\n\r\n\r\n    /*\r\n    this.renderer.setAttribute(this.formButton?.nativeElement, 'label', 'Continue' );\r\n\r\n\r\n\r\n    const viewContainerRef = this.appDynamicComp.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const componentRef = viewContainerRef.createComponent<CodeInputComponent>(this.popover.content);\r\n    componentRef.instance.reset()\r\n*/\r\n    //this.codeInput = this.formFields?.nativeElement.codeInput.getElement();\r\n  }\r\n}\r\n\r\n","\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\"  (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div class=\"form-header\">\r\n      <a >Aeonix App Center</a>\r\n    </div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\" >\r\n      <div  class=\"Vector\">\r\n\r\n\r\n\r\n            <!--div *ngIf=\"isLoggedIn\">isRegSuccess</div>\r\n            <div *ngIf=\"!isLoggedIn && storyInputsInOrder.length === 0\">empty</div>\r\n            <storybook-input\r\n              [storyInput]=\"storyInputsInOrder[0]\"\r\n              (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n              (onPinInput)=\"onPinInput.emit($event)\"\r\n              [currentForm]=\"mForm\">\r\n            </storybook-input>\r\n\r\n            <storybook-input\r\n              [storyInput]=\"storyInputsInOrder[1]\"\r\n              (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n              (onPinInput)=\"onPinInput.emit($event)\"\r\n              [currentForm]=\"mForm\">\r\n            </storybook-input-->\r\n\r\n        <div class=\"second-header\" style=\"top: 5px;\">\r\n          <a class=\"second-header-text\"  href=\"#/login\" style=\"position: relative; top: 5px; text-align: left\">\r\n            {{ 'Please enter the Verification Code'}}<br>\r\n            {{ 'you received in your mail:'  }}\r\n          </a>\r\n      </div>\r\n\r\n\r\n      <div id=\"button-successfully\" style=\"\">\r\n            <storybook-button-successfully  *ngIf=\"status.isVerSuccess\"  style=\"position: relative; top: 15px\"></storybook-button-successfully>\r\n            <code-input *ngIf=\"!status.isVerSuccess\"\r\n                        #codeInput\r\n                        [codeLength]=\"codeLength\"\r\n                        (codeChanged)=\"onCodeChanged($event)\"\r\n                        (codeCompleted)=\"onCodeCompleted($event)\">\r\n            </code-input>\r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n      <div class=\"login-button\">\r\n            <div class=\"login-failed-message\" role=\"alert\" style=\"position: relative; top: 15px\">\r\n              <table *ngIf=\"this.status?.isVerFailed\">\r\n                <tr>{{ this.status?.verErrorMessage.toString()  | apiErrorMessage: param }}</tr>\r\n                <tr  *ngFor=\"let message of this.status?.verErrorMessage.data?.confirmPassword.split(', ')\">{{message.trim() | apiErrorMessage: param }}</tr>\r\n              </table>\r\n            </div>\r\n\r\n            <storybook-button-continue size=\"medium\" label=\"Login \" type=\"button\" (click)=\"onSubmit()\" style=\"position: relative; top: 15px\"></storybook-button-continue>\r\n\r\n\r\n            <a *ngIf=\"!status.isVerSuccess\" class=\"resend-verification\"  (click)=\"generateNewCodeFor2SV.emit()\" style=\"position: relative; top: 40px;\">\r\n              {{ 'resend the verification code'  }}\r\n            </a>\r\n\r\n      </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {CodeInputComponent} from \"../../inputs/code-input/code-input.component\";\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-verification-form',\r\n  templateUrl: './verification-form.component.html',\r\n  styleUrls: ['./verification-form.component.scss'],\r\n})\r\nexport default class VerificationFormComponent implements OnInit {\r\n\r\n  codeLength: number = 4;\r\n  code: string = '';\r\n  param = {language: 'login-main'};\r\n\r\n  @Input() status?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() sendVerificationReq: EventEmitter<string> = new EventEmitter();\r\n\r\n  @Output() generateNewCodeFor2SV: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild('codeInput') codeInput !: CodeInputComponent;\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  onSubmit(): void {\r\n    console.warn('Send Verification Request!');\r\n\r\n    this.sendVerificationReq.emit(this.code);\r\n    if (!this.status.isVerSuccess) {this.codeInput.reset();}\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n\r\n  // this called every time when user changed the code\r\n  onCodeChanged(code: string) {\r\n    this.code = code;\r\n    //console.log('code entered: '+ this.code);\r\n  }\r\n\r\n  // this called only if user entered full code\r\n  onCodeCompleted(code: string) {\r\n    //\r\n  }\r\n\r\n\r\n}\r\n\r\n","<div id=\"parent3\"  [hidden]=\"storyInput?.hide\" [ngClass]=\"classes\"  >\r\n  <div id=\"parent1\" >\r\n    <div class=\"main\"  [formGroup]=\"this.currentForm\">\r\n      <div>\r\n        <a class=\"user-name D-Caps-Regular\">{{storyInput?.state}}</a>\r\n\r\n        <br>\r\n        <span [ngSwitch]=\"storyInput?.type\">\r\n          <span *ngSwitchCase=\"'password'\" >\r\n            <storybook-button-continue   size=\"small\" label=\"Change Password\" type=\"button\" (onClick)=\"this.changePassword.emit()\" >\r\n            </storybook-button-continue>\r\n          </span>\r\n          <span *ngSwitchCase=\"'enable-profile-picture'\" >\r\n            <label class=\"UserNameType\" >{{storyInput?.title}}  </label>\r\n            <div class=\"user-checkbox-header\">\r\n            <input  style=\"position: relative; margin: 0 2px 0 2px;   top: 1px; right: 3px;\"  type=\"checkbox\"/>\r\n            <label class=\"EnableProfilePicture\" >Enable Profile Picture</label>\r\n\r\n              <!--img src=\"./assets/images/EditIconA.png\" class=\"icon-input-edit\" alt=\"icon input type\" /-->\r\n\r\n            </div>\r\n          </span>\r\n          <span *ngSwitchDefault >\r\n            <label  [attr.aria-label]=\"storyInput?.id + ''\" for=\"{{ storyInput?.title }}\" class=\"Vector2 \">\r\n              <img src=\"{{ storyInput?.icon }}\" class=\"icon-input\" alt=\"icon input userName\"  name=\"{{ storyInput?.title }}\" />\r\n              <div [inputPopover] = \"this.popover\" [data]=\"this.getErrorList(this.conditionList)\" [header]=\"this.getErrorHeader(this.storyInput.title)\">\r\n                <input\r\n                  type=\"{{storyInput?.type}}\"\r\n                  id=\"{{ storyInput?.id }}\"\r\n                  class=\"inputField\"\r\n                  name=\"{{storyInput?.title}}\"\r\n                  formControlName=\"{{storyInput?.title}}\"\r\n                  placeholder=\"{{storyInput?.placeholder}}\"\r\n                  required />\r\n              </div>\r\n\r\n\r\n              <br>\r\n\r\n\r\n            </label>\r\n\r\n            <button  class=\"icon-input-edit\"  type=\"button\">\r\n              <img src=\"./assets/images/EditIconA.png\" class=\"icon-input-edit\" alt=\"icon input type\" />\r\n            </button>\r\n          </span>\r\n        </span>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n</div>\r\n","import {Component, EventEmitter, HostBinding, Inject, Injector, Input, OnInit, Output} from '@angular/core';\r\nimport { AccountInput } from './account-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-account-input',\r\n  templateUrl: './account-input.component.html',\r\n  styleUrls: ['./account-input.scss']\r\n})\r\nexport class AccountInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: AccountInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Output() changePassword: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n    return this.currentForm.get(this.storyInput?.title.toString())!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n","import {InjectionToken} from '@angular/core';\r\n\r\nexport const CodeInputComponentConfigToken = new InjectionToken<CodeInputComponentConfig>('CodeInputComponentConfig');\r\n\r\nexport interface CodeInputComponentConfig {\r\n  codeLength?: number;\r\n  inputType?: string;\r\n  inputMode?: string;\r\n  initialFocusField?: number;\r\n  isCharsCode?: boolean;\r\n  isCodeHidden?: boolean;\r\n  isPrevFocusableAfterClearing?: boolean;\r\n  isFocusingOnLastByClickIfFilled?: boolean;\r\n  code?: string | number;\r\n  disabled?: boolean;\r\n  autocapitalize?: string;\r\n}\r\n\r\nexport const defaultComponentConfig: CodeInputComponentConfig = {\r\n  codeLength: 4,\r\n  inputType: 'tel',\r\n  inputMode: 'numeric',\r\n  initialFocusField: undefined,\r\n  isCharsCode: false,\r\n  isCodeHidden: false,\r\n  isPrevFocusableAfterClearing: true,\r\n  isFocusingOnLastByClickIfFilled: false,\r\n  code: undefined,\r\n  disabled: false,\r\n  autocapitalize: undefined\r\n};\r\n","<span *ngFor=\"let holder of placeholders; index as i; let first = first; let last = last;\"\n      [class.code-hidden]=\"isCodeHidden\"  >\n  <storybook-digitcode-input\n    #storyInput\n    (onClick)=\"onClick($event)\"\n    (onPaste)=\"onPaste($event,i)\"\n    (onInput)=\"onInput($event, i)\"\n    (onKeydown)=\"onKeydown($event, i)\"\n    [inputType]=\"inputType\"\n    [disabled]=\"disabled\"\n    [inputMode]=\"inputMode\"\n    [autocapitalize]=\"autocapitalize\"\n    [isFirst]=\"first\"\n    [isLast]=\"last\">\n  </storybook-digitcode-input>\n\n</span>\n","import {\n  AfterViewChecked,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChildren\n} from '@angular/core';\nimport {\n  CodeInputComponentConfig,\n  CodeInputComponentConfigToken,\n  defaultComponentConfig\n} from './code-input.component.config';\nimport { Subscription } from 'rxjs';\nimport {DigitcodeInputComponent} from \"../digitcode-input/digitcode-input.component\";\n\nenum InputState {\n  ready = 0,\n  reset = 1\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\ninterface GenericEvent<T> extends Omit<Event, 'target'> {\n  target: T;\n}\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: ['./code-input.component.scss']\n})\nexport class CodeInputComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy, AfterViewChecked, CodeInputComponentConfig {\n\n  @ViewChildren('storyInput') storyInputsList !: QueryList<ElementRef>;\n  @ViewChildren('storyInput') inputsList !: QueryList<DigitcodeInputComponent>;\n  //inputsList !: List<ElementRef>;\n  //= this.storyInputsList.map((e) => { e.nativeElement.input});\n\n\n  @Input() codeLength !: number;\n  @Input() inputType !: string;\n  @Input() inputMode !: string;\n  @Input() initialFocusField?: number;\n  /** @deprecated Use isCharsCode prop instead. */\n  @Input() isNonDigitsCode = false;\n  @Input() isCharsCode !: boolean;\n  @Input() isCodeHidden !: boolean;\n  @Input() isPrevFocusableAfterClearing !: boolean;\n  @Input() isFocusingOnLastByClickIfFilled !: boolean;\n  @Input() code ?: string | number;\n  @Input() disabled !: boolean;\n  @Input() autocapitalize ?: string;\n\n  @Output() readonly codeChanged = new EventEmitter<string>();\n  @Output() readonly codeCompleted = new EventEmitter<string>();\n\n  public placeholders: number[] = [];\n\n  private inputs: HTMLInputElement[] = [];\n  private inputsStates: InputState[] = [];\n  private inputsListSubscription !: Subscription;\n\n  // tslint:disable-next-line:variable-name\n  private _codeLength !: number;\n  private state = {\n    isFocusingAfterAppearingCompleted: false,\n    isInitialFocusFieldEnabled: false\n  };\n\n  constructor(@Optional() @Inject(CodeInputComponentConfigToken) config?: CodeInputComponentConfig) {\n    Object.assign(this, defaultComponentConfig);\n\n    if (!config) {\n      return;\n    }\n\n    // filtering for only valid config props\n    for (const prop in config) {\n      if (!config.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      if (!defaultComponentConfig.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      // @ts-ignore\n      this[prop] = config[prop];\n    }\n  }\n\n  /**\n   * Life cycle\n   */\n\n  ngOnInit(): void {\n    // defining the state\n    this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\n    // initiating the code\n    this.onCodeLengthChanges();\n  }\n\n  ngAfterViewInit(): void {\n    // initiation of the inputs\n    this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\n    this.onInputsListChanges(this.inputsList);\n  }\n\n  ngAfterViewChecked(): void {\n    this.focusOnInputAfterAppearing();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.code) {\n      this.onInputCodeChanges();\n    }\n    if (changes.codeLength) {\n      this.onCodeLengthChanges();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.inputsListSubscription) {\n      this.inputsListSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Methods\n   */\n\n  reset(isChangesEmitting = false): void {\n    // resetting the code to its initial value or to an empty value\n    this.onInputCodeChanges();\n\n    if (this.state.isInitialFocusFieldEnabled) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.focusOnField(this.initialFocusField!);\n    }\n\n    if (isChangesEmitting) {\n      this.emitChanges();\n    }\n  }\n\n  focusOnField(index: number): void {\n    if (index >= this._codeLength) {\n      throw new Error('The index of the focusing input box should be less than the codeLength.');\n    }\n\n    this.inputs[index].focus();\n  }\n\n  onClick(e: any): void {\n    // handle click events only if the the prop is enabled\n    if (!this.isFocusingOnLastByClickIfFilled) {\n      return;\n    }\n\n    const target = e.target;\n    const last = this.inputs[this._codeLength - 1];\n    // already focused\n    if (target === last) {\n      return;\n    }\n\n    // check filling\n    const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\n    if (!isFilled) {\n      return;\n    }\n\n    // focusing on the last input if is filled\n    setTimeout(() => last.focus());\n  }\n\n\n\n  onInput(e: GenericEvent<HTMLInputElement>, i: number): void {\n    const target = e.target;\n    const value = /*e.data ||*/ target.value;\n\n    if (this.isEmpty(value)) {\n      return;\n    }\n\n    // only digits are allowed if isCharsCode flag is absent/false\n    if (!this.canInputValue(value)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setInputValue(target, null);\n      this.setStateForInput(target, InputState.reset);\n      return;\n    }\n\n    const values = value.toString().trim().split('');\n    for (let j = 0; j < values.length; j++) {\n      const index = j + i;\n      if (index > this._codeLength - 1) {\n        break;\n      }\n\n      this.setInputValue(this.inputs[index], values[j]);\n    }\n    this.emitChanges();\n\n    const next = i + values.length;\n    if (next > this._codeLength - 1) {\n      target.blur();\n      return;\n    }\n\n    this.inputs[next].focus();\n  }\n\n  onPaste(e: ClipboardEvent, i: number): void {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\n\n    if (this.isEmpty(data)) {\n      return;\n    }\n\n    // Convert paste text into iterable\n    // tslint:disable-next-line:no-non-null-assertion\n    const values = data!.split('');\n    let valIndex = 0;\n\n    for (let j = i; j < this.inputs.length; j++) {\n      // The values end is reached. Loop exit\n      if (valIndex === values.length) {\n        break;\n      }\n\n      const input = this.inputs[j];\n      const val = values[valIndex];\n\n      // Cancel the loop when a value cannot be used\n      if (!this.canInputValue(val)) {\n        this.setInputValue(input, null);\n        this.setStateForInput(input, InputState.reset);\n        return;\n      }\n\n      this.setInputValue(input, val.toString());\n      valIndex++;\n    }\n\n    this.inputs[i].blur();\n    this.emitChanges();\n  }\n\n  async onKeydown(e: any, i: number): Promise<void> {\n    const target = e.target;\n    const isTargetEmpty = this.isEmpty(target.value);\n    const prev = i - 1;\n\n    // processing only the backspace and delete key events\n    const isBackspaceKey = await this.isBackspaceKey(e);\n    const isDeleteKey = this.isDeleteKey(e);\n    if (!isBackspaceKey && !isDeleteKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this.setInputValue(target, null);\n    if (!isTargetEmpty) {\n      this.emitChanges();\n    }\n\n    // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\n    if (prev < 0 || isDeleteKey) {\n      return;\n    }\n\n    if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\n      this.inputs[prev].focus();\n    }\n  }\n\n  private onInputCodeChanges(): void {\n    if (!this.inputs.length) {\n      return;\n    }\n\n    if (this.isEmpty(this.code)) {\n      this.inputs.forEach((input: HTMLInputElement) => {\n        this.setInputValue(input, null);\n      });\n      return;\n    }\n\n    // tslint:disable-next-line:no-non-null-assertion\n    const chars = this.code!.toString().trim().split('');\n    // checking if all the values are correct\n    let isAllCharsAreAllowed = true;\n    for (const char of chars) {\n      if (!this.canInputValue(char)) {\n        isAllCharsAreAllowed = false;\n        break;\n      }\n    }\n\n    this.inputs.forEach((input: HTMLInputElement, index: number) => {\n      const value = isAllCharsAreAllowed ? chars[index] : null;\n      this.setInputValue(input, value);\n    });\n  }\n\n  private onCodeLengthChanges(): void {\n    if (!this.codeLength) {\n      return;\n    }\n\n    this._codeLength = this.codeLength;\n    if (this._codeLength > this.placeholders.length) {\n      const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\n      this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\n    }\n    else if (this._codeLength < this.placeholders.length) {\n      this.placeholders.splice(this._codeLength);\n    }\n  }\n\n  private onInputsListChanges(list: QueryList<DigitcodeInputComponent>): void {\n    if (list.length > this.inputs.length) {\n      const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\n      this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.input.nativeElement));\n      const states = Array(inputsToAdd.length).fill(InputState.ready);\n      this.inputsStates.splice(this.inputsStates.length, 0, ...states);\n    }\n    else if (list.length < this.inputs.length) {\n      this.inputs.splice(list.length);\n      this.inputsStates.splice(list.length);\n    }\n\n    // filling the inputs after changing of their count\n    this.onInputCodeChanges();\n  }\n\n  private focusOnInputAfterAppearing(): void {\n    if (!this.state.isInitialFocusFieldEnabled) {\n      return;\n    }\n\n    if (this.state.isFocusingAfterAppearingCompleted) {\n      return;\n    }\n\n    // tslint:disable-next-line:no-non-null-assertion\n    this.focusOnField(this.initialFocusField!);\n    // tslint:disable-next-line:no-non-null-assertion\n    //this.state.isFocusingAfterAppearingCompleted = (document.activeElement === this.inputs[this.initialFocusField!]);\n  }\n\n  private emitChanges(): void {\n    setTimeout(() => this.emitCode(), 50);\n  }\n\n  private emitCode(): void {\n    const code = this.getCurrentFilledCode();\n\n    this.codeChanged.emit(code);\n\n    if (code.length >= this._codeLength) {\n      this.codeCompleted.emit(code);\n    }\n  }\n\n  private getCurrentFilledCode(): string {\n    let code = '';\n\n    for (const input of this.inputs) {\n      if (!this.isEmpty(input.value)) {\n        code += input.value;\n      }\n    }\n\n    return code;\n  }\n\n  private isBackspaceKey(e: any): Promise<boolean> {\n    const isBackspace = (e.key && e.key.toLowerCase() === 'backspace') || (e.keyCode && e.keyCode === 8);\n    if (isBackspace) {\n      return Promise.resolve(true);\n    }\n\n    // process only key with placeholder keycode on android devices\n    if (!e.keyCode || e.keyCode !== 229) {\n      return Promise.resolve(false);\n    }\n\n    return new Promise<boolean>((resolve) => {\n      setTimeout(() => {\n        const input = e.target;\n        const isReset = this.getStateForInput(input) === InputState.reset;\n        if (isReset) {\n          this.setStateForInput(input, InputState.ready);\n        }\n        // if backspace key pressed the caret will have position 0 (for single value field)\n        resolve(input.selectionStart === 0 && !isReset);\n      });\n    });\n  }\n\n  private isDeleteKey(e: any): boolean {\n    return (e.key && e.key.toLowerCase() === 'delete') || (e.keyCode && e.keyCode === 46);\n  }\n\n  private setInputValue(input: HTMLInputElement, value: any): void {\n    const isEmpty = this.isEmpty(value);\n    const valueClassCSS = 'has-value';\n    const emptyClassCSS = 'empty';\n    if (isEmpty) {\n      input.value = '';\n      input.classList.remove(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement!.classList.add(emptyClassCSS);\n    }\n    else {\n      input.value = value;\n      input.classList.add(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement!.classList.remove(emptyClassCSS);\n    }\n  }\n\n  private canInputValue(value: any): boolean {\n    if (this.isEmpty(value)) {\n      return false;\n    }\n\n    const isDigitsValue = /^[0-9]+$/.test(value.toString());\n    return isDigitsValue || (this.isCharsCode || this.isNonDigitsCode);\n  }\n\n  private setStateForInput(input: HTMLInputElement, state: InputState): void {\n    const index = this.inputs.indexOf(input);\n    if (index < 0) {\n      return;\n    }\n\n    this.inputsStates[index] = state;\n  }\n\n  private getStateForInput(input: HTMLInputElement): InputState | undefined {\n    const index = this.inputs.indexOf(input);\n    return this.inputsStates[index];\n  }\n\n  private isEmpty(value: any): boolean {\n    return  value === null || value === undefined || !value.toString().length;\n  }\n}\n","import {\r\n  Component, ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  OnInit,\r\n  Output, ViewChild,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { DigitcodeInput } from './digitcode-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-digitcode-input',\r\n  templateUrl: './digitcode-input.component.html',\r\n  styleUrls: ['./digitcode-input.scss']\r\n})\r\nexport class DigitcodeInputComponent implements OnInit{\r\n\r\n  @Input() digitInput?: DigitcodeInput;\r\n\r\n  @ViewChild('input') public input!: ElementRef<HTMLInputElement>;\r\n  @Input() inputType !: string;\r\n  @Input() inputMode !: string;\r\n  @Input() disabled !: boolean;\r\n  @Input() autocapitalize ?: string;\r\n  @Input() isFirst ?: boolean;\r\n  @Input() isLast ?: boolean;\r\n  @Output() onClick: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() onPaste: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onKeydown: EventEmitter<Event> = new EventEmitter<Event>();\r\n  value: string = '';\r\n\r\n\r\n  public get classes(): string[] {\r\n\r\n    //const isFirst = (this.index === 1) ? 'storybook-digitcode-input--first' : 'storybook-digitcode-input--notFirst';\r\n\r\n    return ['storybook-digitcode-input'];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n}\r\n","\r\n\r\n<label class=\"Vector2\" [ngStyle]=\"{'margin-left': isFirst ? '0' : '10px',  'margin-right': isLast ? '0' : '10px'}\">\r\n\r\n   <input #input\r\n         (click)=\"onClick.emit($event)\"\r\n         (paste)=\"onPaste.emit($event)\"\r\n         (input)=\"onInput.emit($event)\"\r\n         (keydown)=\"onKeydown.emit($event)\"\r\n         [type]=\"this.inputType\"\r\n         [disabled]=\"disabled\"\r\n         [attr.inputmode]=\"inputMode\"\r\n         [attr.autocapitalize]=\"autocapitalize\"\r\n         [value]=\"value\"\r\n         autocomplete=\"one-time-code\"\r\n         class=\"digit\"/>\r\n</label>\r\n","<div id=\"parent3\"  [hidden]=\"storyInput?.hide\" [ngClass]=\"classes\"  >\r\n<div id=\"parent1\" >\r\n  <div class=\"main\"  [formGroup]=\"this.currentForm\">\r\n  <div>\r\n  <a class=\"user-name D-Caps-Regular\">{{storyInput?.state}}</a>\r\n\r\n  <br>\r\n  <label [attr.aria-label]=\"storyInput?.id + ''\" for=\"{{ storyInput?.title }}\" class=\"Vector2 \">\r\n    <img src=\"{{ storyInput?.icon }}\" class=\"icon-input\" alt=\"icon input userName\"  name=\"{{ storyInput?.title }}\" />\r\n    <div [inputPopover] = \"this.popover\" [data]=\"this.getErrorList(this.conditionList)\" [header]=\"this.getErrorHeader(this.storyInput.title)\">\r\n    <input\r\n      type=\"{{storyInput?.type}}\"\r\n      id=\"{{ storyInput?.id }}\"\r\n      class=\"DanK203\"\r\n      name=\"{{storyInput?.title}}\"\r\n      formControlName=\"{{storyInput?.title}}\"\r\n      placeholder=\"{{storyInput?.placeholder}}\"\r\n      required />\r\n    </div>\r\n\r\n    <button *ngIf=\"this.isPasswordTextHide\" class=\"icon-input-showpass\" type=\"button\" (click)=\"showPassChange()\">\r\n      <img src=\"./assets/images/EyeIcon.png\" class=\"icon-input-showpass\" alt=\"icon input type\" />\r\n\r\n    </button>\r\n\r\n\r\n\r\n  <br>\r\n\r\n  <span hidden [ngSwitch]=\"storyInput?.title\" class=\"D-Caps-Regular\"  style=\"line-height: 0\" >\r\n      <span  class=\"position-absolute\"  *ngIf=\"formControler?.invalid && (formControler?.dirty || formControler?.touched)\"  >\r\n          <span *ngSwitchCase=\"'username'\"><br>{{storyInput?.state}} is required!</span>\r\n          <span *ngSwitchCase=\"'password'\">\r\n            <br>\r\n            {{storyInput?.state}} is required!\r\n            <!--div *ngIf=\"password.errors.required\">Password is required</div>\r\n            <div *ngIf=\"password.errors.minlength\">Password must be at least 1 characters</div-->\r\n          </span>\r\n          <span *ngSwitchCase=\"'email'\"   ><br>{{storyInput?.state}} is required!</span>\r\n          <span *ngSwitchCase=\"'phone'\"   ><br>{{storyInput?.state}} is required!</span>\r\n\r\n      </span>\r\n      <div   *ngIf=\"formControler?.valid && (formControler?.dirty || formControler?.touched)\">\r\n        <div *ngSwitchCase=\"'username'\">ok!</div>\r\n        <div *ngSwitchCase=\"'password'\">ok!</div>\r\n        <div *ngSwitchCase=\"'email'\"   >ok!</div>\r\n        <div *ngSwitchCase=\"'phone'\"   >ok!</div>\r\n      </div>\r\n\r\n </span>\r\n\r\n  </label>\r\n\r\n\r\n\r\n  </div>\r\n  </div>\r\n</div>\r\n\r\n<div id=\"parent2\"  *ngIf=\"storyInput?.state === 'NEW PASSWORD'\">\r\n  <div class=\"absolute\">\r\n    <storybook-pass-strength id=\"pass-strength\" [passwordToCheck]=\"password?.value\" ></storybook-pass-strength>\r\n  </div>\r\n</div>\r\n\r\n</div>\r\n","import {Component, EventEmitter, HostBinding, Inject, Injector, Input, OnInit, Output} from '@angular/core';\r\nimport { StoryInput } from './story-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-input',\r\n  templateUrl: './story-input.component.html',\r\n  styleUrls: ['./story-input.scss']\r\n})\r\nexport class StoryInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: StoryInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  showPassChange(): void {\r\n    this.storyInput.type = (this.storyInput?.type == 'password' ? 'text' : 'password')\r\n  }\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n    return this.currentForm.get(this.storyInput?.title.toString())!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\n\n\n\n@Component({\n  selector: 'storybook-background1',\n  templateUrl: './background1Component.html',\n  styleUrls: ['./background1Component.scss']\n})\nexport default class Background1Component {\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = true;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  background?: string;\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Page2Component';\n\n  /*user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n\n  }*/\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-background1--primary' : 'storybook-background1--secondary';\n\n    return ['storybook-background1', mode];\n  }\n\n  constructor() {}\n\n\n\n\n}\n\n","\r\n<figure class=\"Desktop-1Login-1\"  [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': background }\" >\r\n  <!--div [ngStyle]=\"{ 'background-color': background }\" ></div-->\r\n  <img src=\"assets/images/icon-1.webp\" srcset=\"./assets/images/icon-1@2x.webp 2x, /assets/images/icon-1@3x.webp 3x\"\r\n       alt=\"icon-1\" />\r\n\r\n  <img src=\"assets/images/icon-2.webp\" srcset=\"./assets/images/icon-2@2x.webp 2x, /assets/images/icon-2@3x.webp 3x\"\r\n       class=\"icon-2  \" alt=\"icon-2fdf\" />\r\n\r\n\r\n</figure>\r\n\r\n<storybook-button-language size=\"large\"></storybook-button-language>\r\n<storybook-button-tadiran></storybook-button-tadiran>\r\n<storybook-button-globe hidden ></storybook-button-globe>\r\n","import {Component, OnChanges, Input, SimpleChange} from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-pass-strength',\r\n  templateUrl: './pass-strength.component.html',\r\n  styleUrls: ['./pass-strength.scss']\r\n})\r\nexport default class PassStrengthComponent implements OnChanges  {\r\n\r\n  /**\r\n   * Is this the principal call to action on the login-main?\r\n   */\r\n  @Input() primary: boolean = false;\r\n\r\n\r\n  /**\r\n   * The password strength in percentage.\r\n   */\r\n  @Input() strength: number = 0;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input() backgroundColor?: string;\r\n\r\n  /**\r\n   * The password to measure.\r\n   */\r\n  @Input() passwordToCheck?: string;\r\n\r\n  private static measureStrength(pass: string) {\r\n    let score = 0;\r\n    // award every unique letter until 5 repetitions\r\n    let letters: any = {};\r\n    for (let i = 0; i< pass.length; i++) {\r\n      letters[pass[i]] = (letters[pass[i]] || 0) + 1;\r\n      score += 5.0 / letters[pass[i]];\r\n    }\r\n    // bonus points for mixing it up\r\n    let variations: any = {\r\n      digits: /\\d/.test(pass),\r\n      lower: /[a-z]/.test(pass),\r\n      upper: /[A-Z]/.test(pass),\r\n      nonWords: /\\W/.test(pass),\r\n    };\r\n\r\n    let variationCount = 0;\r\n    for (let check in variations) {\r\n      variationCount += (variations[check]) ? 1 : 0;\r\n    }\r\n    score += (variationCount - 1) * 10;\r\n    return Math.trunc(score);\r\n  }\r\n\r\n  public strengthColor(strength: number) {\r\n\r\n    if (strength < 10) return 0;\r\n    if (strength < 20) return 10;\r\n    if (strength < 30) return 20;\r\n    if (strength < 40) return 30;\r\n    if (strength < 50) return 40;\r\n    if (strength < 60) return 50;\r\n    if (strength < 70) return 60;\r\n    if (strength < 90) return 70;\r\n    if (strength < 99) return 90;\r\n\r\n    return 100;\r\n  }\r\n\r\n  ngOnChanges(changes: {[propName: string]: SimpleChange}): void {\r\n    var password = changes['passwordToCheck'].currentValue;\r\n    if (password) {\r\n      this.strength = PassStrengthComponent.measureStrength(password);\r\n    }\r\n  }\r\n\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-pass-strength--primary' : 'storybook-pass-strength--secondary';\r\n\r\n    return ['storybook-pass-strength', `storybook-pass-strength--${this.strengthColor(this.strength)}`, mode];\r\n  }\r\n\r\n}\r\n\r\n","\r\n<div id=\"PassStrength\" [ngClass]=\"classes\"   class=\"storybook-pass-strength  \" >\r\n  <div class=\"center\"><a class=\"mfont\">Strength : {{this.strength?.toString()}}%</a>\r\n  </div>\r\n</div>\r\n\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-spinner1',\n  templateUrl: './spinner1.component.html',\n  styleUrls: ['./spinner1.component.css']\n})\nexport class Spinner1Component {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-ex--primary' : 'storybook-button-ex--secondary';\n\n    return ['storybook-button-ex', `storybook-button-ex--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n<button class=\"Vector\" (click)=\"onClick.emit($event)\" >\n\n    <img  [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n       src=\"./assets/images/Spinner1.gif\"\n           class=\"Ex-Icon\"  alt=\"Ex-Icon\"/>\n\n</button>\n\n","<div class=\"list-items\">\r\n  <storybook-task\r\n    *ngFor=\"let task of tasksInOrder\"\r\n    [task]=\"task\"\r\n    (onArchiveTask)=\"onArchiveTask.emit($event)\"\r\n    (onPinTask)=\"onPinTask.emit($event)\">\r\n  </storybook-task>\r\n  <div *ngIf=\"tasksInOrder.length === 0 && !loading\" class=\"wrapper-message\">\r\n    <span class=\"icon-check\"></span>\r\n    <p class=\"title-message\">You have no tasks</p>\r\n    <p class=\"subtitle-message\">Sit back and relax</p>\r\n  </div>\r\n  <div *ngIf=\"loading\">\r\n    <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\r\n      <span class=\"glow-checkbox\"></span>\r\n      <span class=\"glow-text\">\r\n           <span>Loading</span> <span>cool</span> <span>state</span>\r\n         </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n","\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Task } from '../task/task.model';\r\n\r\n@Component({\r\n  selector: 'app-task-list',\r\n  templateUrl: './task-list.component.html',\r\n})\r\nexport class TaskListComponent {\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  tasksInOrder: Task[] = [];\r\n\r\n  @Input() loading = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Input()\r\n  set tasks(arr: Task[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'TASK_PINNED'),\r\n      ...arr.filter(t => t.state !== 'TASK_PINNED'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n    );\r\n    this.tasksInOrder = filteredTasks.filter(\r\n      t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n    );\r\n  }\r\n}\r\n","<div class=\"list-item {{ task?.state }}\">\r\n  <label [attr.aria-label]=\"'archiveTask-' + task.id\" for=\"checked-{{ task?.id }}\" class=\"checkbox\">\r\n    <input\r\n      type=\"checkbox\"\r\n      disabled=\"true\"\r\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\r\n      name=\"checked-{{ task?.id }}\"\r\n      id=\"checked-{{ task?.id }}\"\r\n    />\r\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\r\n  </label>\r\n  <label [attr.aria-label]=\"task.title + ''\" for=\"title-{{ task?.id }}\" class=\"title\">\r\n    <input type=\"text\" [value]=\"task.title\" readonly=\"true\" id=\"title-{{ task?.id }}\" name=\"title-{{ task?.id }}\" placeholder=\"Input title\"/>\r\n  </label>\r\n  <button *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" class=\"pin-button\" [attr.aria-label]=\"'pinTask-' + task.id\" (click)=\"onPin(task.id)\">\r\n    <span class=\"icon-star\"></span>\r\n  </button>\r\n</div>\r\n\r\n\r\n<div class=\"list-item {{ task?.state }}\">\r\n  <label [attr.aria-label]=\"'archiveTask-' + task.id\" for=\"checked-{{ task?.id }}\" class=\"checkbox\">\r\n    <input\r\n      type=\"checkbox\"\r\n      disabled=\"true\"\r\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\r\n      name=\"checked-{{ task?.id }}\"\r\n      id=\"checked-{{ task?.id }}\"\r\n    />\r\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\r\n  </label>\r\n  <label [attr.aria-label]=\"task.title + ''\" for=\"title-{{ task?.id }}\" class=\"title\">\r\n    <input type=\"text\" [value]=\"task.title\" readonly=\"true\" id=\"title-{{ task?.id }}\" name=\"title-{{ task?.id }}\" placeholder=\"Input title\"/>\r\n  </label>\r\n  <button *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" class=\"pin-button\" [attr.aria-label]=\"'pinTask-' + task.id\" (click)=\"onPin(task.id)\">\r\n    <span class=\"icon-star\"></span>\r\n  </button>\r\n</div>\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { Task } from './task.model';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-task',\r\n  templateUrl: './task.component.html',\r\n  styleUrls: ['./task.css']\r\n})\r\nexport class TaskComponent {\r\n  @Input() task!: Task;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinTask = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveTask = new EventEmitter<Event>();\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinTask.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveTask.emit(id);\r\n  }\r\n}\r\n"]}