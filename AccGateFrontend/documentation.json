{
    "pipes": [
        {
            "name": "ApiErrorMessagePipe",
            "id": "pipe-ApiErrorMessagePipe-e27b9d00b22143e685037a9654fe41822e19122811c481bc47516a875d90990084d28d56a89001c2871177c9cea94cc1d4bb20b77435af37339089e31e58fdae",
            "file": "src/app/pipes/api-error-message.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "apiErrorMessage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'apiErrorMessage'\r\n})\r\nexport class ApiErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "LoginErrorMessagePipe",
            "id": "pipe-LoginErrorMessagePipe-a507640bc8dcc22ad7782e272d8a4bca4ecd487e9e00d564738ca3ff86e4140246290a87785913426ef62ef636422d9ee29e6f4070cfc3d9be8d072f9fd298f4",
            "file": "src/app/pipes/login-error-message.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "loginErrorMessage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'loginErrorMessage'\r\n})\r\nexport class LoginErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "AeonixAppCenterForm",
            "id": "interface-AeonixAppCenterForm-f35874b1bfbbbad71ac591050a4c21ea7f0c914e1c76b70c023a92ef8092f37f609bb859f6fd514576311daef574a3e6e3068cf41747d212f9ffc63350c9bdec",
            "file": "src/stories/app-menu/app-menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../inputs/story-input.model\";\r\nimport { AuthService } from '../../app/_services/auth.service';\r\nimport {MdbModalRef} from \"mdb-angular-ui-kit/modal\";\r\n\r\n\r\nexport interface AeonixAppCenterForm {\r\n  username: null, //new FormControl('ea2', Validators.min(2)),\r\n  password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-app-menu',\r\n  templateUrl: './app-menu.component.html',\r\n  styleUrls: ['./app-menu.css'],\r\n})\r\nexport class AppMenuComponent implements OnInit {\r\n\r\n  /*form: AeonixAppCenterForm = {\r\n    username: null,     //new FormControl('ea2', Validators.min(2)),\r\n    password: null      //new FormControl('zaqwsx', Validators.min(2))\r\n  };*/\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassFormComponent);\r\n  }\r\n\r\n  constructor() {\r\n    this.validationForm = new FormGroup({\r\n      username: new FormControl('Telecom2', Validators.minLength(2)),\r\n      //email: new FormControl(null, Validators.email),\r\n      password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n      //phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  validationForm: FormGroup;\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() newItemEvent = new EventEmitter<any>();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n    this.credentials.username=this.validationForm.get('username')?.value;\r\n    this.credentials.password=this.validationForm.get('password')?.value;\r\n\r\n    this.newItemEvent.emit(this.credentials);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AeonixAppCenterForm",
            "id": "interface-AeonixAppCenterForm-53f498b721f42da96a058d2f420bf10a4342b2edd36b7e92665432e637d9acaa957ac0dfa1b10b08afb51c5f550a95b76f5aa5a2dce6464760bf5cb32f084ac4-1",
            "file": "src/stories/forms/form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../inputs/story-input.model\";\r\nimport { AuthService } from '../../app/_services/auth.service';\r\nimport {MdbModalRef} from \"mdb-angular-ui-kit/modal\";\r\n\r\n\r\nexport interface AeonixAppCenterForm {\r\n  username: null, //new FormControl('ea2', Validators.min(2)),\r\n  password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.css'],\r\n})\r\nexport class FormComponent implements OnInit {\r\n\r\n  /*form: AeonixAppCenterForm = {\r\n    username: null,     //new FormControl('ea2', Validators.min(2)),\r\n    password: null      //new FormControl('zaqwsx', Validators.min(2))\r\n  };*/\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassFormComponent);\r\n  }\r\n\r\n  constructor() {\r\n    this.validationForm = new FormGroup({\r\n      username: new FormControl('Telecom2', Validators.minLength(2)),\r\n      //email: new FormControl(null, Validators.email),\r\n      password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n      //phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  validationForm: FormGroup;\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() newItemEvent = new EventEmitter<any>();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n    this.credentials.username=this.validationForm.get('username')?.value;\r\n    this.credentials.password=this.validationForm.get('password')?.value;\r\n\r\n    this.newItemEvent.emit(this.credentials);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AeonixAppCenterForm-1"
        },
        {
            "name": "GroupForm",
            "id": "interface-GroupForm-31c86f8f4839f71fad1062f90999b6c3ea7998d9d30b2c91cc1f1beeda6f7531221ced9c3534623c674ab574e3abaee50321a6932a6f923d1e7e21f75e8de51b",
            "file": "src/stories/inputs/story-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport { StoryInput } from './story-input.model'\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-input',\r\n  templateUrl: './story-input.component.html',\r\n  styleUrls: ['./story-input.scss']\r\n})\r\nexport class StoryInputComponent {\r\n\r\n  @Input() storyInput!: StoryInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n\r\n  showPassChange(): void {\r\n    this.storyInput.type = (this.storyInput?.type == 'password' ? 'text' : 'password')\r\n  }\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  /*validationForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n\r\n    let alertType = this.storyInput?.title.toString();\r\n\r\n    switch (alertType) {\r\n      case \"username\":\r\n        return this.currentForm.get('username')!;\r\n      case \"password\":\r\n        return this.currentForm.get('password')!;\r\n      default:\r\n        console.log('N');\r\n        break;\r\n    }\r\n    return this.currentForm.get('username')!;\r\n  }\r\n/*\r\n*/\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StoryInput",
            "id": "interface-StoryInput-e19300e29a6d4629051a4591f8aded25e3863ab2a689e0f83ddc9ee26e8b21c912f5300f6509a39cd3d1571358a823949deb9803e6519c26763f7a068bf8d6b6",
            "file": "src/stories/inputs/story-input.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StoryInput {\r\n  id: string;\r\n  title: string;\r\n  state: string;\r\n  icon:  string;\r\n  type:  'text' | 'password' | 'phone' | 'email';\r\n  placeholder: string;\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"text\" | \"password\" | \"phone\" | \"email\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Task",
            "id": "interface-Task-d4d37e919bf153b85cd73cf76b3d81234228b20ae5a9a500ccf0118c584fdae333a8448d8becdbaa20c0fdaf47fd111516c76691ee76980e2a62f442b656bd75",
            "file": "src/stories/task/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id: string;\r\n  title: string;\r\n  state: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "ValidationForm",
            "id": "interface-ValidationForm-31c86f8f4839f71fad1062f90999b6c3ea7998d9d30b2c91cc1f1beeda6f7531221ced9c3534623c674ab574e3abaee50321a6932a6f923d1e7e21f75e8de51b",
            "file": "src/stories/inputs/story-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport { StoryInput } from './story-input.model'\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-input',\r\n  templateUrl: './story-input.component.html',\r\n  styleUrls: ['./story-input.scss']\r\n})\r\nexport class StoryInputComponent {\r\n\r\n  @Input() storyInput!: StoryInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n\r\n  showPassChange(): void {\r\n    this.storyInput.type = (this.storyInput?.type == 'password' ? 'text' : 'password')\r\n  }\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  /*validationForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n\r\n    let alertType = this.storyInput?.title.toString();\r\n\r\n    switch (alertType) {\r\n      case \"username\":\r\n        return this.currentForm.get('username')!;\r\n      case \"password\":\r\n        return this.currentForm.get('password')!;\r\n      default:\r\n        console.log('N');\r\n        break;\r\n    }\r\n    return this.currentForm.get('username')!;\r\n  }\r\n/*\r\n*/\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "validationForm2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupForm",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-ae205f7804c7b2940ea501a53db26f62a3a683c69870ee695ffc9241640af0155fbb30e039c16460ad60fa79c955643a9f8efca495a47a8c5d8edc4c9b8e0669",
            "file": "src/app/_services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getToken",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roles",
                            "type": "Array<String>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roles",
                            "type": "Array<String>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerForm",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replacePassForm",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oldPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confirmPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "confirmPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "webapptab",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "webapp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "webapp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AppConfig} from \"../app.config\";\r\n\r\n\r\nconst AUTH_API = AppConfig.accServer.ACCWEBServers+'/accGate/auth/';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signin', {\r\n      username,\r\n      password\r\n    }, httpOptions);\r\n  }\r\n\r\n  registerForm(username: string, email: string, password: string, phone: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'register-form', {\r\n      username,\r\n      email,\r\n      password,\r\n      phone,\r\n    }, {responseType: 'text'});\r\n  }\r\n\r\n  replacePassForm(username: string, oldPassword: string, password: string, confirmPassword: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'replace-pass-form', {\r\n      username,\r\n      oldPassword,\r\n      password,\r\n      confirmPassword,\r\n    }, {responseType: 'text'});\r\n  }\r\n\r\n  register(username: string, email: string, password: string, roles: Array<String>): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signup', {\r\n      username,\r\n      email,\r\n      password,\r\n      roles,\r\n    }, httpOptions);\r\n  }\r\n\r\n  getToken(url: string, username: string, email: string, password: string): Observable<any> {\r\n    return this.http.post(url, {\r\n      username,\r\n      email,\r\n      password\r\n    }, httpOptions);\r\n  }\r\n\r\n  // login, register\r\n  refreshToken(token: string): Observable<any>  {\r\n    return this.http.post(AUTH_API + 'refreshtoken', {\r\n      refreshToken: token\r\n    }, httpOptions);\r\n  }\r\n\r\n  // login, register\r\n  webapptab(token: string, webapp: string): Promise<any>  {\r\n    return this.http.post(AUTH_API + 'webapptab', {\r\n      refreshToken: token,\r\n      webApp: webapp\r\n    }, httpOptions).toPromise();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EventBusService",
            "id": "injectable-EventBusService-4f7a4321cd72961b5eb291bf86a7afbbd7b6aefcec29488c86084e25348621557644034fa964099ca4799aef8afacfa67a8393c08255fa9acc101a407904f263",
            "file": "src/app/_shared/event-bus.service.ts",
            "properties": [
                {
                    "name": "subject$",
                    "defaultValue": "new Subject<EventData>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "emit",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "on",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { EventData } from './event.class';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventBusService {\r\n  private subject$ = new Subject<EventData>();\r\n  constructor() { }\r\n  emit(event: EventData) {\r\n    this.subject$.next(event);\r\n  }\r\n  on(eventName: string, action: any): Subscription {\r\n    return this.subject$.pipe(\r\n      filter((e: EventData) => e.name === eventName),\r\n      map((e: EventData) => e[\"value\"])).subscribe(action);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "TokenStorageService",
            "id": "injectable-TokenStorageService-375b4e6105bbe030dcb969e4f19358c24930270d97cc713637a3c0aa671b07c2feac91acab2ba4daba91db2d811fec29e4f32b1ae7414e0cceb5e9d63b27ed30",
            "file": "src/app/_services/token-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "saveRefreshToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nconst TOKEN_KEY = 'token';\r\nconst REFRESHTOKEN_KEY = 'auth-refreshtoken';\r\nconst USER_KEY = 'user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenStorageService {\r\n  constructor() { }\r\n\r\n  signOut(): void {\r\n    window.sessionStorage.clear();\r\n  }\r\n\r\n  public saveToken(token: string): void {\r\n    window.sessionStorage.removeItem(TOKEN_KEY);\r\n    window.sessionStorage.setItem(TOKEN_KEY, token);\r\n    const user = this.getUser();\r\n    if (user.id) {\r\n      this.saveUser({ ...user, accessToken: token });\r\n    }\r\n  }\r\n\r\n  public getToken(): string | null {\r\n    return window.sessionStorage.getItem(TOKEN_KEY);\r\n  }\r\n\r\n  public saveRefreshToken(token: string): void {\r\n    window.sessionStorage.removeItem(REFRESHTOKEN_KEY);\r\n    window.sessionStorage.setItem(REFRESHTOKEN_KEY, token);\r\n    const user = this.getUser();\r\n    if (user.id) {\r\n      user.refreshToken = token;\r\n      this.saveUser(user);\r\n    }\r\n  }\r\n  public getRefreshToken(): string | null {\r\n    return window.sessionStorage.getItem(REFRESHTOKEN_KEY);\r\n  }\r\n\r\n  public saveUser(user: any): void {\r\n    window.sessionStorage.removeItem(USER_KEY);\r\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\r\n  }\r\n\r\n  public getUser(): any {\r\n    const user = window.sessionStorage.getItem(USER_KEY);\r\n    if (user) {\r\n      return JSON.parse(user);\r\n    }\r\n    return {};\r\n  }\r\n\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-0e51142ead8a3b0436c8633a592502bb5843d2078fff13338d723d147e90b505f7b5ac3ed6813c0446614aebc43ba619a8387231ab3631d99ea1dda38debf709",
            "file": "src/app/_services/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAccVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAdminBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getModeratorBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPublicContent",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AppConfig} from \"../app.config\";\r\n\r\nconst API_URL = AppConfig.accServer.ACCWEBServers+'/accGate/test/';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getPublicContent(): Observable<any> {\r\n    return this.http.get(API_URL + 'all', { responseType: 'text' });\r\n  }\r\n\r\n  getAccVersion(): Observable<any> {\r\n    return this.http.get(API_URL + 'accversion', { responseType: 'text' });\r\n  }\r\n\r\n  getUserBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'user', { responseType: 'text' });\r\n  }\r\n\r\n  getModeratorBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'mod', { responseType: 'text' });\r\n  }\r\n\r\n  getAdminBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'admin', { responseType: 'text' });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AppRoutingGuard",
            "id": "injectable-AppRoutingGuard-2f9d507a9358ab637253f075dfd92840449bd935d3ce0ffed34293d46b1d162dcabaf090d7354b5161c2db22dd2bc44b2bd0748141ea6a5f136dce16393d909b",
            "file": "src/app/app-routing.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "childRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "childRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canDeactivate",
                    "args": [
                        {
                            "name": "component",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nextState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canLoad",
                    "args": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "segments",
                            "type": "UrlSegment[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "segments",
                            "type": "UrlSegment[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isApproved",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanDeactivate, CanLoad, Route, RouterStateSnapshot, UrlSegment, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AppComponent } from './app.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppRoutingGuard implements CanActivate, CanActivateChild, CanDeactivate<unknown>, CanLoad {\r\n\r\n  constructor(private app: AppComponent) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n  canActivateChild(\r\n    childRoute: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n  canDeactivate(\r\n    component: unknown,\r\n    currentRoute: ActivatedRouteSnapshot,\r\n    currentState: RouterStateSnapshot,\r\n    nextState?: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n  canLoad(\r\n    route: Route,\r\n    segments: UrlSegment[]): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n\r\n  private isApproved(): boolean {\r\n    console.log('isLoggedIn?   '+this.app.isLoggedIn);\r\n    if (!this.app.isLoggedIn) {\r\n      console.log(!this.app.isLoggedIn);\r\n      //this.router.navigateByUrl(\"/login\");\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "app",
                        "type": "AppComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "app",
                        "type": "AppComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-75ce968203e6a1db4b5caeafc478ef358cd1b3d3750f0b1d9f095f98e76afb47e135e9042f8575e990959b5edba6c61697c2432c37955c4cedce2ac6860ace07",
            "file": "src/app/_helpers/auth.interceptor.ts",
            "properties": [
                {
                    "name": "isRefreshing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "refreshTokenSubject",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTokenHeader",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forseRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handle401Error",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HTTP_INTERCEPTORS, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\n\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\r\n\r\n const TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\r\n//const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  private isRefreshing = false;\r\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  constructor(private tokenService: TokenStorageService, private authService: AuthService) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    let authReq = req;\r\n    const token = this.tokenService.getToken();\r\n    if (token != null) {\r\n      authReq = this.addTokenHeader(req, token);\r\n      // for Spring Boot back-end\r\n      // authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n\r\n      // for Node.js Express back-end\r\n      //authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\r\n    }\r\n    return next.handle(authReq).pipe(catchError(error => {\r\n      if (error instanceof HttpErrorResponse && !authReq.url.includes('auth/signin') && error.status === 401) {\r\n        return this.handle401Error(authReq, next);\r\n      }\r\n      return throwError(error);\r\n    }));\r\n  }\r\n\r\n\r\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshTokenSubject.next(null);\r\n      const token = this.tokenService.getRefreshToken();\r\n      if (token)\r\n        return this.authService.refreshToken(token).pipe(\r\n          switchMap((token: any) => {\r\n            this.isRefreshing = false;\r\n            this.tokenService.saveToken(token.accessToken);\r\n            this.tokenService.saveRefreshToken(token.refreshToken);\r\n            this.refreshTokenSubject.next(token.accessToken);\r\n\r\n            return next.handle(this.addTokenHeader(request, token.accessToken));\r\n          }),\r\n          catchError((err) => {\r\n            this.isRefreshing = false;\r\n\r\n            this.tokenService.signOut();\r\n            return throwError(err);\r\n          })\r\n        );\r\n    }\r\n    return this.refreshTokenSubject.pipe(\r\n      filter(token => token !== null),\r\n      take(1),\r\n      switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n    );\r\n  }\r\n  private addTokenHeader(request: HttpRequest<any>, token: string) {\r\n    /* for Spring Boot back-end */\r\n     return request.clone({ headers: request.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n    /* for Node.js Express back-end */\r\n    //return request.clone({ headers: request.headers.set(TOKEN_HEADER_KEY, token) });\r\n  }\r\n/*\r\n  public forseRefreshToken2() {\r\n    const token = this.tokenService.getRefreshToken();\r\n    if (token)\r\n      this.authService.refreshToken(token).pipe(\r\n        switchMap((token: any) => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.saveToken(token.accessToken);\r\n          this.refreshTokenSubject.next(token.accessToken);\r\n\r\n          filter(token => token !== null),\r\n            take(1),\r\n            switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n        }),\r\n        catchError((err) => {\r\n          this.isRefreshing = false;\r\n\r\n          this.tokenService.signOut();\r\n          return throwError(err);\r\n        })\r\n      );\r\n  }\r\n*/\r\n  public forseRefreshToken(): void {\r\n    const token = this.tokenService.getRefreshToken();\r\n    if (token)\r\n      this.authService.refreshToken(token).subscribe(\r\n        data => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.saveToken(data.accessToken);\r\n          this.refreshTokenSubject.next(data.accessToken);\r\n\r\n\r\n        },\r\n        (err) => {\r\n          this.isRefreshing = false;\r\n\r\n          this.tokenService.signOut();\r\n          return throwError(err);\r\n        }\r\n      );\r\n  }\r\n}\r\n\r\nexport const authInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n];\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tokenService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "tokenService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "EventData",
            "id": "class-EventData-8925370f157c2f4d909b2cf58dccc2eca15e46b80c594223d867bedf9dd2a8cb0e44aa5947e26ed06f27efd18e65f263c2a1b44b89e1ee16fb6fcc21d07e4b8d",
            "file": "src/app/_shared/event.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class EventData {\r\n  name: string;\r\n  value: any;\r\n  constructor(name: string, value: any) {\r\n    this.name = name;\r\n    this.value = value;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-7df20d43becc873174270583059427b74e7b307a5874fff0bcba027c581376b70d4e646d6a853ca2b39708fd62840a06124b266db578afa171f64fdd292d5dbb",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eventBusSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "showAdminBoard",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "showModeratorBoard",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy  } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { TokenStorageService } from './_services/token-storage.service';\r\nimport { EventBusService } from './_shared/event-bus.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  private roles: string[] = [];\r\n  public isLoggedIn = false;\r\n  showAdminBoard = false;\r\n  showModeratorBoard = false;\r\n  username?: string;\r\n  eventBusSub?: Subscription;\r\n  title?: 'accGate';\r\n\r\n  constructor(private tokenStorageService: TokenStorageService, private eventBusService: EventBusService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\r\n\r\n    if (this.isLoggedIn) {\r\n      const user = this.tokenStorageService.getUser();\r\n      this.roles = user.roles;\r\n\r\n      this.showAdminBoard = (this.roles.includes('Admin') || this.roles.includes('SupervisorAdmin'));\r\n      this.showModeratorBoard = this.roles.includes('SupervisorMonitor');\r\n\r\n      this.username = user.username;\r\n    }\r\n    this.eventBusSub = this.eventBusService.on('logout', () => {\r\n      this.logout();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.eventBusSub)\r\n      this.eventBusSub.unsubscribe();\r\n  }\r\n\r\n  logout(): void {\r\n    this.tokenStorageService.signOut();\r\n    this.isLoggedIn = false;\r\n    this.roles = [];\r\n    this.showAdminBoard = false;\r\n    this.showModeratorBoard = false;\r\n    //window.location.reload();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tokenStorageService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "tokenStorageService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\r\n<router-outlet  id=\"app\" ></router-outlet>\r\n\r\n<!--div id=\"app\">\r\n  <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\r\n\r\n    <a href=\"#\" class=\"navbar-brand\">\r\n      <img _ngcontent-c0=\"accGate\" class=\"nav-img\" srcset=\"./assets/images/TadiranTelecom2.webp\"  width=\"56\"\r\n           height=\"56\"><label>accGate</label>\r\n    </a>\r\n    <ul class=\"navbar-nav mr-auto\" routerLinkActive=\"active\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/login2\" class=\"nav-link\" routerLink=\"login2\">Page </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/home\" class=\"nav-link\" routerLink=\"home\">Home </a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showAdminBoard\">\r\n        <a href=\"/admin\" class=\"nav-link\" routerLink=\"admin\">Admin Board</a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showModeratorBoard\">\r\n        <a href=\"/mod\" class=\"nav-link\" routerLink=\"mod\">Moderator Board</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/user\" class=\"nav-link\" *ngIf=\"isLoggedIn\" routerLink=\"user\">User</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"!isLoggedIn\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/register\" class=\"nav-link\" routerLink=\"register\">Sign Up</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/login\" class=\"nav-link\" routerLink=\"login\">Login</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"isLoggedIn\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/profile\" class=\"nav-link\" routerLink=\"profile\">{{ username }}</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href class=\"nav-link\" (click)=\"logout()\">LogOut</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div-->\r\n"
        },
        {
            "name": "AppMenuComponent",
            "id": "component-AppMenuComponent-f35874b1bfbbbad71ac591050a4c21ea7f0c914e1c76b70c023a92ef8092f37f609bb859f6fd514576311daef574a3e6e3068cf41747d212f9ffc63350c9bdec",
            "file": "src/stories/app-menu/app-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-app-menu",
            "styleUrls": [
                "./app-menu.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "AuthService",
                    "decorators": []
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "storyInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "StoryInput[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "newItemEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "credentials",
                    "defaultValue": "{\r\n    username: null,\r\n    password: null\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isLoginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "loginErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "validationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openReplacePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../inputs/story-input.model\";\r\nimport { AuthService } from '../../app/_services/auth.service';\r\nimport {MdbModalRef} from \"mdb-angular-ui-kit/modal\";\r\n\r\n\r\nexport interface AeonixAppCenterForm {\r\n  username: null, //new FormControl('ea2', Validators.min(2)),\r\n  password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-app-menu',\r\n  templateUrl: './app-menu.component.html',\r\n  styleUrls: ['./app-menu.css'],\r\n})\r\nexport class AppMenuComponent implements OnInit {\r\n\r\n  /*form: AeonixAppCenterForm = {\r\n    username: null,     //new FormControl('ea2', Validators.min(2)),\r\n    password: null      //new FormControl('zaqwsx', Validators.min(2))\r\n  };*/\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassFormComponent);\r\n  }\r\n\r\n  constructor() {\r\n    this.validationForm = new FormGroup({\r\n      username: new FormControl('Telecom2', Validators.minLength(2)),\r\n      //email: new FormControl(null, Validators.email),\r\n      password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n      //phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  validationForm: FormGroup;\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() newItemEvent = new EventEmitter<any>();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n    this.credentials.username=this.validationForm.get('username')?.value;\r\n    this.credentials.password=this.validationForm.get('password')?.value;\r\n\r\n    this.newItemEvent.emit(this.credentials);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n/*\r\n.form {\r\n  position: absolute;\r\n  left: 3.18%;\r\n  right: 14.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n*/\r\n\r\n.card-container.card {\r\n  max-width: 1000px !important;\r\n  padding: 10px 10px;\r\n  /*top: 5.18%;\r\n  bottom: 4.78%;*/\r\n\r\n}\r\n/*\r\n.col-md-12{\r\n  position: center;\r\n  width: 42.65%;\r\n  height: 89.35%;\r\n  left: calc(50% - 42.65%/2 - 0px);\r\n  top: calc(50% - 89.35%/2 - 0px);\r\n}\r\n*/\r\n\r\n.col-md-12{\r\n  position: center;\r\n  width: 965px;\r\n  height: 819px;\r\n  left: calc(50% - 965px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n  border-radius: 32px;\r\n\r\n}\r\n\r\n.Aeonix-App-Center {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  /*width: 447px;*/\r\n  height: 82px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n",
                    "styleUrl": "./app-menu.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 40
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "storyInputs": {
                    "name": "storyInputs",
                    "setSignature": {
                        "name": "storyInputs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 96
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 100
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 104
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 108
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"\" ></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <div class=\"Aeonix-App-Center\">\r\n      <a>Aeonix App Center</a>\r\n    </div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isLoggedIn\"-->\r\n\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "Background1Component",
            "id": "component-Background1Component-0d4842f685bbb9c8ec9e3d581b7b6986c7dea2170e97e6dd3bd5aa2f688f5b8c2bc26319c560d8bbe4735f35dcdab1aec47f9936750954d2203099b2001418c4",
            "file": "src/stories/pages/background1/background1Component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-background1",
            "styleUrls": [
                "./background1Component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./background1Component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "background",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Page2Component'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 571,
                            "end": 584,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 572,
                                "end": 580,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n\n\n@Component({\n  selector: 'storybook-background1',\n  templateUrl: './background1Component.html',\n  styleUrls: ['./background1Component.scss']\n})\nexport default class Background1Component implements OnInit {\n\n\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  @Input()\n  primary = true;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  background?: string;\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Page2Component';\n\n  /*user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n\n  }*/\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-background1--primary' : 'storybook-background1--secondary';\n\n    return ['storybook-background1', mode];\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {};\n\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.storybook-background1 {\r\n  position: absolute;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n.Desktop-1Login-1 {\r\n  width: 100%;\r\n  height: 100%;\r\n  flex-grow: 0;\r\n}\r\n\r\n\r\ndiv.relative {\r\n  position: relative;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n\r\n\r\n\r\n.Frame-1 {\r\n  width: 1920px;\r\n  height: 1080px;\r\n  flex-grow: 0;\r\n}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\nimg.icon-1 {\r\n  position: absolute;\r\n  width: 305.7px;\r\n  height: 309px;\r\n  transform: rotate(0deg);\r\n  background-position: bottom;\r\n}\r\n\r\nimg.icon-2 {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 372px;\r\n  height: 343px;\r\n  flex-grow: 0;\r\n}\r\n\r\n\r\n.storybook-background1--primary {\r\n\r\n  background: linear-gradient(228.37deg, #EFF8FF 22.25%, #B0DCFF 88.18%);\r\n}\r\n",
                    "styleUrl": "./background1Component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 59
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 55
                    }
                }
            },
            "templateData": "\r\n<figure class=\"Desktop-1Login-1\"  [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': background }\" >\r\n  <!--div [ngStyle]=\"{ 'background-color': background }\" ></div-->\r\n  <img src=\"assets/images/icon-1.webp\" srcset=\"./assets/images/icon-1@2x.webp 2x, /assets/images/icon-1@3x.webp 3x\"\r\n       alt=\"icon-1\" />\r\n\r\n  <img src=\"assets/images/icon-2.webp\" srcset=\"./assets/images/icon-2@2x.webp 2x, /assets/images/icon-2@3x.webp 3x\"\r\n       class=\"icon-2  \" alt=\"icon-2fdf\" />\r\n\r\n\r\n</figure>\r\n\r\n<storybook-button-language size=\"large\"></storybook-button-language>\r\n<storybook-button-tadiran></storybook-button-tadiran>\r\n<storybook-button-globe></storybook-button-globe>\r\n"
        },
        {
            "name": "BoardAdminComponent",
            "id": "component-BoardAdminComponent-710ed0cde07df53a297e2e580dd5584ef0ff61c4e617a319f1e3a7ef22c8acef836421f018099aecebd8cac9ca9d722f98f2c387ceaa80f6af07944eeb197824",
            "file": "src/app/board-admin/board-admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-admin",
            "styleUrls": [
                "./board-admin.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "form",
                    "defaultValue": "{\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null,\r\n    roles: null,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isSignUpFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isSuccessful",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "rolesList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\nimport {AuthService} from \"../_services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'app-board-admin',\r\n  templateUrl: './board-admin.component.html',\r\n  styleUrls: ['./board-admin.component.css']\r\n})\r\nexport class BoardAdminComponent implements OnInit {\r\n  content?: string;\r\n  form: any = {\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null,\r\n    roles: null,\r\n  };\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  errorMessage = '';\r\n  rolesList: Array<String> = [];\r\n\r\n  constructor(private userService: UserService, private authService: AuthService) {\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getAdminBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, email, password, roles } = this.form;\r\n    this.rolesList.push(roles);\r\n\r\n    this.authService.register(username, email, password, this.rolesList).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isSignUpFailed = true;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "label {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 40px 40px;\r\n}\r\n\r\n.card {\r\n  background-color: #f7f7f7;\r\n  padding: 20px 25px 30px;\r\n  margin: 0 auto 25px;\r\n  margin-top: 50px;\r\n  -moz-border-radius: 2px;\r\n  -webkit-border-radius: 2px;\r\n  border-radius: 2px;\r\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.profile-img-card {\r\n  width: 96px;\r\n  height: 96px;\r\n  margin: 0 auto 10px;\r\n  display: block;\r\n  -moz-border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  border-radius: 50%;\r\n}\r\n",
                    "styleUrl": "./board-admin.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <header class=\"jumbotron\">\r\n    <p>{{ content }}</p>\r\n  </header>\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card card-container\">\r\n      <img\r\n        id=\"profile-img\"\r\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n        class=\"profile-img-card\"\r\n      />\r\n      <form\r\n        *ngIf=\"!isSuccessful\"\r\n        name=\"form\"\r\n        (ngSubmit)=\"f.form.valid && onSubmit()\"\r\n        #f=\"ngForm\"\r\n        novalidate\r\n      >\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"form.username\"\r\n                 required minlength=\"3\" maxlength=\"20\" #username=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"username.errors && f.submitted\">\r\n            <div *ngIf=\"username.errors.required\">Username is required</div>\r\n            <div *ngIf=\"username.errors.minlength\">\r\n              Username must be at least 3 characters\r\n            </div>\r\n            <div *ngIf=\"username.errors.maxlength\">\r\n              Username must be at most 20 characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"email\">Email</label>\r\n          <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\"\r\n                 required email #email=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\r\n            <div *ngIf=\"email.errors.required\">Email is required</div>\r\n            <div *ngIf=\"email.errors.email\">\r\n              Email must be a valid email address\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"form.password\"\r\n                 required minlength=\"6\" #password=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"password.errors && f.submitted\">\r\n            <div *ngIf=\"password.errors.required\">Password is required</div>\r\n            <div *ngIf=\"password.errors.minlength\">\r\n              Password must be at least 6 characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"privilege\">Privilege Level</label>\r\n          <select type=\"privilege\" class=\"form-control\" name=\"privilege\" id=\"pet-select\"\r\n                  [(ngModel)]=\"form.roles\" required #roles=\"ngModel\">\r\n            <option value=\"\">--Please choose an option--</option>\r\n            <option value=\"admin\">Admin</option>\r\n            <option value=\"mod\">Moderator</option>\r\n            <option value=\"user\">User</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <button class=\"btn btn-primary btn-block\">Sign Up</button>\r\n        </div>\r\n\r\n        <div class=\"alert alert-warning\" >\r\n          Roles: <br />{{ rolesList.toString() }}\r\n        </div>\r\n        <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\r\n          Signup failed!<br />{{ errorMessage }}\r\n        </div>\r\n      </form>\r\n\r\n      <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n        Your registration is successful!\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "BoardModeratorComponent",
            "id": "component-BoardModeratorComponent-fb71cf8596ff69b2db19b1fda7a4346604ff4792458bf23b57d89e361f52d904cd7e2c1742426ef637ec1857f64b8ad2be5f1211173cfca1e5e2dbc686df9647",
            "file": "src/app/board-moderator/board-moderator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-moderator",
            "styleUrls": [
                "./board-moderator.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-moderator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-board-moderator',\r\n  templateUrl: './board-moderator.component.html',\r\n  styleUrls: ['./board-moderator.component.css']\r\n})\r\nexport class BoardModeratorComponent implements OnInit {\r\n  content?: string;\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getModeratorBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./board-moderator.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <header class=\"jumbotron\">\r\n    <p>{{ content }}</p>\r\n  </header>\r\n</div>\r\n"
        },
        {
            "name": "BoardUserComponent",
            "id": "component-BoardUserComponent-e378ebe662679f2ee295bedb7b7efb6d8bda1f803838b28a77e0e2c04e71d74e64abd507e11acdc8e38d9e32754927dbab23ed4df43125b7d62e92e3be29f6f1",
            "file": "src/app/board-user/board-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-user",
            "styleUrls": [
                "./board-user.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\nimport { EventBusService } from '../_shared/event-bus.service';\r\nimport { EventData } from '../_shared/event.class';\r\n\r\n@Component({\r\n  selector: 'app-board-user',\r\n  templateUrl: './board-user.component.html',\r\n  styleUrls: ['./board-user.component.css']\r\n})\r\nexport class BoardUserComponent implements OnInit {\r\n  content?: string;\r\n\r\n  constructor(private userService: UserService, private eventBusService: EventBusService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getUserBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = err.error.message || err.error || err.message;\r\n        if (err.status === 403)\r\n          this.eventBusService.emit(new EventData('logout', null));\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.font_0 {\r\n  font-size:44px;\r\n  text-align:left;\r\n  color:#FFFFFF;\r\n}\r\n\r\n.alert, .alert-success {\r\n  width: 50%;\r\n}\r\n\r\n\r\n.background {\r\n  background-size: cover;\r\n  background-origin: border-box;\r\n  background-image: url(../_services/assets/images/Background.webp);\r\n  /*linear-gradient(to right, rgba(30, 75, 115, 1), rgba(255, 255, 255, 0));*/\r\n  background-repeat: no-repeat;\r\n  background-position: top left;\r\n\r\n}\r\n\r\n/*\r\niframe {\r\n  border: 1px solid black;\r\n  width: 100%;\r\n}\r\n\r\n.output {\r\n  background: #eee;\r\n}\r\n*/\r\n",
                    "styleUrl": "./board-user.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <br>\r\n  <header class=\"background jumbotron  \">\r\n    <h1 class=\"font_0\">\r\n      <span class=\"\" style=\"font-size:44px;\">\r\n        <span>{{ content }}</span>\r\n      </span>\r\n    </h1>\r\n  </header>\r\n\r\n  <embed type=\"text/html\" src=\"https://www.tadirantele.com/\" height=\"300px\" width=\"100%\" >\r\n\r\n  <h2>Iframe - Target for a Link</h2>\r\n.\r\n  <iframe src=\"https://localhost:8445/accRealTime\" sandbox=\"allow-top-navigation-by-user-activation allow-same-origin allow-scripts allow-popups allow-forms\"  name=\"iframe_a\" height=\"300px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe>\r\n\r\n\r\n\r\n\r\n  <p><a href=\"https://172.28.8.245:8443/aeonix/mainForm.jsf\" target=\"iframe_a\">aeonix</a></p>\r\n  <p><a href=\"https://en.wikipedia.org/wiki/Avocado\" id=\"testid\" target=\"iframe_a\">wikipedia</a></p>\r\n  <p><a href=\"https://172.28.1.130:8445/accRealTime\" target=\"iframe_a\">accRealTime</a></p>\r\n  <p>When the target attribute of a link matches the name of an iframe, the link will open in the iframe.</p>\r\n\r\n    <!--iframe src=\"https://172.28.1.130:8445/accRealTime\" name=\"iframe_a\" height=\"300px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe-->\r\n</div>\r\n"
        },
        {
            "name": "ButtonAppsComponent",
            "id": "component-ButtonAppsComponent-9f2175f43417ed0b6a327c19f5738e24690abcdbd60a37e0695465a2155a9a2c207e4f31045a28dbe13d4bf721626d0cdb290f0a2f161734025ba90336471f04",
            "file": "src/stories/buttons/button-apps/button-apps.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-globe",
            "styleUrls": [
                "./button-apps.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button-apps.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 587,
                            "end": 600,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 588,
                                "end": 596,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-globe',\n  templateUrl: './button-apps.component.html',\n  styleUrls: ['./button-apps.component.css']\n})\nexport class ButtonAppsComponent {\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-tadiran--primary' : 'storybook-button-tadiran--secondary';\n\n    return ['storybook-button-tadiran', `storybook-tadiran-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: absolute;\r\n  bottom: 49px;\r\n  left: 247px;\r\n  width: 123px;\r\n  height: 45px;\r\n}\r\n\r\nimg.Language-Desktop-Icon {\r\n  position: absolute;\r\n  bottom: 1px;\r\n  left: 1px;\r\n  width: 123px;\r\n  height: 45px;\r\n  object-fit: contain;\r\n  /*box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n}\r\n",
                    "styleUrl": "./button-apps.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"Vector\">\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/GlobeIcon.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-cbca7fd78d5c631500fe8bc8f95d6a8126cf3c7d0c3a9047dfa55c90f5ccef5ea1861f940f03f0bcd7705154336cb5a7500be01e7aab5c36c1fdd9e0c89fc30f",
            "file": "src/stories/buttons/button-example/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 713,
                            "end": 726,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 714,
                                "end": 722,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonContinueComponent",
            "id": "component-ButtonContinueComponent-02fccd96b6ffe546970145bda672c5627458698fc59725ace654778adf38aef77d54f011f8ccb4fec78ff194c21afa66d87fd227373e32f3b08033eb7d51b724",
            "file": "src/stories/buttons/button-continue/button-continue.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-continue",
            "styleUrls": [
                "./button-continue.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-continue.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "gallery",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this gallery attribute are set?\n",
                    "description": "<p>Is this gallery attribute are set?</p>\n",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Continue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 970,
                            "end": 983,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 971,
                                "end": 979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 36,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-continue',\n  templateUrl: './button-continue.component.html',\n  /*template: `<div class=\"storybook-button-continue\">\n    <img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n         src=\"./assets/images/img_2.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n  </div>`,*/\n  styleUrls: ['./button-continue.component.scss'],\n})\nexport class ButtonContinueComponent {\n\n  /**\n   * Is this gallery attribute are set?\n   */\n  @Input()\n  gallery = false;\n\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Continue';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-continue--primary' : 'storybook-button-continue--secondary';\n    const galleryMode = this.gallery ? 'storybook-button-continue--set-in' : 'storybook-button-continue--set-out';\n\n    return ['storybook-button-continue', `storybook-button-continue--${this.size}`, mode, galleryMode];\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button-continue {\r\n    width: 446px;\r\n    height: 63px;\r\n    margin: 26px 0 0 1px;\r\n    padding: 17px 136px 17px 139px;\r\n    border-radius: 7px;\r\n    background-image: linear-gradient(180deg, #3D8ECF 0%, #58A6E4 100%);\r\n\r\n    font-family: 'Noto Sans', ui-serif;\r\n    font-style: normal;\r\n    font-weight: 700;\r\n    font-size: 21px;\r\n    line-height: 11px;\r\n}\r\n\r\n/*\r\n.storybook-button-continue--primary {\r\n  top: 50px;\r\n  bottom: unset;\r\n  left: 30px;\r\n}\r\n\r\n.storybook-button-continue--secondary {\r\n  top: unset;\r\n  bottom: 50px;\r\n  left: 30px;\r\n}\r\n*/\r\n\r\n.storybook-button-continue--small {\r\n  font-size: 16px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button-continue--medium {\r\n  font-size: 21px;\r\n  padding: 17px 136px 17px 139px;\r\n}\r\n.storybook-button-continue--large {\r\n  font-size: 28px;\r\n  padding: 17px 136px;\r\n}\r\n",
                    "styleUrl": "./button-continue.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 52
                    }
                }
            },
            "templateData": "<button class=\"login-button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\" >\n{{label}}\n</button>\n"
        },
        {
            "name": "ButtonGlobeComponent",
            "id": "component-ButtonGlobeComponent-b14209e1489815abebb1095c3935a068977f23db357e641e58f11494d86c904ed4e91caf96d304b82ae82c901f68206ecd2fbae9ae7dde00e020cfdfb3d883ac",
            "file": "src/stories/buttons/button-globe/button-globe.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-globe",
            "styleUrls": [
                "./button-globe.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button-globe.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 590,
                            "end": 603,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 591,
                                "end": 599,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-globe',\n  templateUrl: './button-globe.component.html',\n  styleUrls: ['./button-globe.component.css']\n})\nexport class ButtonGlobeComponent {\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-tadiran--primary' : 'storybook-button-tadiran--secondary';\n\n    return ['storybook-button-tadiran', `storybook-tadiran-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: absolute;\r\n  bottom: 49px;\r\n  left: 247px;\r\n  width: 123px;\r\n  height: 45px;\r\n}\r\n\r\nimg.Language-Desktop-Icon {\r\n  position: absolute;\r\n  bottom: 1px;\r\n  left: 1px;\r\n  width: 123px;\r\n  height: 45px;\r\n  object-fit: contain;\r\n  /*box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n}\r\n",
                    "styleUrl": "./button-globe.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"Vector\">\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/GlobeIcon.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n</div>\n"
        },
        {
            "name": "ButtonLanguageComponent",
            "id": "component-ButtonLanguageComponent-86240fa0848467178a57c67a4ed57bab666bcb6e6b2d5d1748e3c092cc5387f9cf81f00f648f8f3ec45c9657544acc5e1ac4400924f64932839fc421d7287ce9",
            "file": "src/stories/buttons/button-language/button-language.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-language",
            "styleUrls": [
                "./button-language.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button-language.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 602,
                            "end": 615,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 603,
                                "end": 611,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-language',\n  templateUrl: './button-language.component.html',\n  styleUrls: ['./button-language.component.css']\n})\nexport class ButtonLanguageComponent {\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-language--primary' : 'storybook-button-language--secondary';\n\n    return ['storybook-button-language', `storybook-language-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: absolute;\r\n  top: 54px;\r\n  right: 68px;\r\n  width: 26px;\r\n  height: 26px;\r\n}\r\n\r\nimg.Language-Desktop-Icon {\r\n  position: absolute;\r\n  top: 1px;\r\n  right: 1px;\r\n  width: 26px;\r\n  height: 26px;\r\n  object-fit: contain;\r\n  box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);\r\n}\r\n",
                    "styleUrl": "./button-language.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"Vector\">\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/language-desktop-icon.png\"\n       srcset=\"./assets/images/language-desktop-icon@2x.png 2x,\n             /assets/images/language-desktop-icon@3x.png 3x\"\n       class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n\n</div>\n"
        },
        {
            "name": "ButtonTadiranComponent",
            "id": "component-ButtonTadiranComponent-6de6edc7e05a2347fad4329bc22ed9fe9a146e3887c5f8f8c5535a65ee0b7e1b8fc38d50aea285d8c00bff2608a2bec49eeac1fa4fa40152e1c9a8c4d5f7b5c5",
            "file": "src/stories/buttons/button-tadiran/button-tadiran.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-tadiran",
            "styleUrls": [
                "./button-tadiran.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"storybook-button-tadiran\">    <img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n         src=\"./assets/images/img_2.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "gallery",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this gallery attribute are set?\n",
                    "description": "<p>Is this gallery attribute are set?</p>\n",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 966,
                            "end": 979,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 967,
                                "end": 975,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 36,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-tadiran',\n  /*templateUrl: './button-continue.component.html',*/\n  template: `<div class=\"storybook-button-tadiran\">\n    <img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n         src=\"./assets/images/img_2.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n  </div>`,\n  styleUrls: ['./button-tadiran.component.scss'],\n})\nexport class ButtonTadiranComponent {\n\n  /**\n   * Is this gallery attribute are set?\n   */\n  @Input()\n  gallery = false;\n\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-tadiran--primary' : 'storybook-button-tadiran--secondary';\n    const galleryMode = this.gallery ? 'storybook-button-tadiran--set-in' : 'storybook-button-tadiran--set-out';\n\n    return ['storybook-button-tadiran', `storybook-button-tadiran--${this.size}`, mode, galleryMode];\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button-tadiran {\r\n  position: absolute;\r\n  bottom: 50px;\r\n  left: 30px;\r\n  width: 151px;\r\n  height: 39px;\r\n}\r\n\r\nimg.Language-Desktop-Icon {\r\n  position: absolute;\r\n  bottom: 1px;\r\n  left: 1px;\r\n  width: 151px;\r\n  height: 39px;\r\n  object-fit: contain;\r\n  /*box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n}\r\n\r\n\r\n.storybook-button-tadiran--primary {\r\n  top: 50px;\r\n  bottom: unset;\r\n  left: 30px;\r\n}\r\n\r\n.storybook-button-tadiran--secondary {\r\n  top: unset;\r\n  bottom: 50px;\r\n  left: 30px;\r\n}\r\n",
                    "styleUrl": "./button-tadiran.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 52
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-3a8744b652ebc96f9f9eef966d9bd5ee2cb430c08a7879e65a8600f31f72e94ed11e65a560b610571fc66a9f00bf5665941c5ab96bb2a0e2fe04a4da0a6e6b17",
            "file": "src/stories/cards/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-card",
            "styleUrls": [
                "./card.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 594,
                            "end": 608,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 595,
                                "end": 603,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.css']\r\n})\r\nexport default class CardComponent  {\r\n\r\n\r\n\r\n  /**\r\n   * Is this the principal call to action on the login2?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large'  = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-card--primary' : 'storybook-card--secondary';\r\n\r\n    return ['storybook-card', `storybook-card--${this.size}`, mode];\r\n  }\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: absolute;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.card {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  /* Width: 42.65625%;\r\n  left: 28.671875%;\r\n   right: 28.671875%;\r\n   Width: 42.65625%;*/\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #FFFFFF;/**/\r\n}\r\n\r\n\r\n\r\n.storybook-card {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-card--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-card--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-card--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-card--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-card--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./card.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 45
                    }
                }
            },
            "templateData": "\r\n  <div class=\"card\">\r\n\r\n  </div>\r\n\r\n\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-53f498b721f42da96a058d2f420bf10a4342b2edd36b7e92665432e637d9acaa957ac0dfa1b10b08afb51c5f550a95b76f5aa5a2dce6464760bf5cb32f084ac4",
            "file": "src/stories/forms/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-form",
            "styleUrls": [
                "./form.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "AuthService",
                    "decorators": []
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "storyInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "StoryInput[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "newItemEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "credentials",
                    "defaultValue": "{\r\n    username: null,\r\n    password: null\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isLoginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "loginErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "validationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openReplacePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../inputs/story-input.model\";\r\nimport { AuthService } from '../../app/_services/auth.service';\r\nimport {MdbModalRef} from \"mdb-angular-ui-kit/modal\";\r\n\r\n\r\nexport interface AeonixAppCenterForm {\r\n  username: null, //new FormControl('ea2', Validators.min(2)),\r\n  password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.css'],\r\n})\r\nexport class FormComponent implements OnInit {\r\n\r\n  /*form: AeonixAppCenterForm = {\r\n    username: null,     //new FormControl('ea2', Validators.min(2)),\r\n    password: null      //new FormControl('zaqwsx', Validators.min(2))\r\n  };*/\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassFormComponent);\r\n  }\r\n\r\n  constructor() {\r\n    this.validationForm = new FormGroup({\r\n      username: new FormControl('Telecom2', Validators.minLength(2)),\r\n      //email: new FormControl(null, Validators.email),\r\n      password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n      //phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  validationForm: FormGroup;\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() newItemEvent = new EventEmitter<any>();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n    this.credentials.username=this.validationForm.get('username')?.value;\r\n    this.credentials.password=this.validationForm.get('password')?.value;\r\n\r\n    this.newItemEvent.emit(this.credentials);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: relative;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.form {\r\n  position: absolute;\r\n  left: 3.18%;\r\n  right: 14.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 10px 10px;\r\n}\r\n.col-md-12{\r\n  position: center;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.card {\r\n  position: absolute;\r\n  left: 5.18%;\r\n  right: 4.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n.Aeonix-App-Center {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  width: 447px;\r\n  height: 82px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n.login-button {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n}\r\n\r\n\r\n.forgot-password {\r\n  /* D UnderLine Regular */\r\n\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n\r\n.thematic-break {\r\n  margin: 45px 2px 71px 2.5px;\r\n  background-color: #3d8ecf;\r\n  border-top-width: 1px;\r\n  border-top-color: rgb(61, 142, 207);\r\n  border-top-style: solid;\r\n}\r\n\r\n",
                    "styleUrl": "./form.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 40
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "storyInputs": {
                    "name": "storyInputs",
                    "setSignature": {
                        "name": "storyInputs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 96
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 100
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 104
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 108
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <div class=\"Aeonix-App-Center\">\r\n      <a>Aeonix App Center</a>\r\n    </div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isLoggedIn\"-->\r\n      <form name=\"currentForm\"   [formGroup]=\"validationForm\">\r\n      <div  *ngIf=\"!isLoggedIn\" class=\"Vector\">\r\n\r\n\r\n\r\n            <div *ngIf=\"isLoggedIn\">isLoggedIn</div>\r\n            <div *ngIf=\"!isLoggedIn && storyInputsInOrder.length === 0\">empty</div>\r\n            <storybook-input\r\n              *ngFor=\"let storyInput of storyInputsInOrder\"\r\n              [storyInput]=\"storyInput\"\r\n              (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n              (onPinInput)=\"onPinInput.emit($event)\"\r\n              [currentForm]=\"validationForm\">\r\n            </storybook-input>\r\n\r\n\r\n        <div class=\"login-button\">\r\n          <!--/div>\r\n          <div class=\"Vector\"-->\r\n            <br>\r\n            <div class=\"thematic-break\"></div>\r\n\r\n\r\n\r\n              <a (click)=\"openReplacePassword()\"\r\n                 class=\"forgot-password\"  href=\"#/login\" >\r\n                Forgot password?\r\n              </a>\r\n            <!-- (click)=\"\" openReplacePassword()-->\r\n\r\n              <storybook-button-continue size=\"medium\" label=\"Continue\" type=\"button\" (click)=\"onSubmit()\" ></storybook-button-continue>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n          <div class=\"form-group\">\r\n              <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"isLoginFailed\">\r\n                Login failed: {{ loginErrorMessage }}\r\n              </div>\r\n          </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-6e4a7dd91969f07e43f9454ed35393fc8883046c91ddf54b9e38a837d4e59e3dcfee5467c2b37d0c678e7d7b5dcecf7e8f866f49aa01eaf142fcbe67a19f6e26",
            "file": "src/stories/headers/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\" fill=\"#FFF\" />\n            <path d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\" fill=\"#555AB9\"/>\n            <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\"/>\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b>!\n          </span>\n          <storybook-button *ngIf=\"user\" size=\"small\" (onClick)=\"onLogout.emit($event)\" label=\"Log out\"></storybook-button>\n          <storybook-card *ngIf=\"user\" size=\"small\" (onClick)=\"onLogout.emit($event)\" label=\"Log out\"></storybook-card>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button *ngIf=\"!user\" size=\"small\" class=\"margin-left\" (onClick)=\"onLogin.emit($event)\" label=\"Log in\"></storybook-button>\n          <storybook-button *ngIf=\"!user\" primary size=\"small\" primary=\"true\" class=\"margin-left\" (onClick)=\"onCreateAccount.emit($event)\" label=\"Sign up\"></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from '../User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\" fill=\"#FFF\" />\n            <path d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\" fill=\"#555AB9\"/>\n            <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\"/>\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b>!\n          </span>\n          <storybook-button *ngIf=\"user\" size=\"small\" (onClick)=\"onLogout.emit($event)\" label=\"Log out\"></storybook-button>\n          <storybook-card *ngIf=\"user\" size=\"small\" (onClick)=\"onLogout.emit($event)\" label=\"Log out\"></storybook-card>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button *ngIf=\"!user\" size=\"small\" class=\"margin-left\" (onClick)=\"onLogin.emit($event)\" label=\"Log in\"></storybook-button>\n          <storybook-button *ngIf=\"!user\" primary size=\"small\" primary=\"true\" class=\"margin-left\" (onClick)=\"onCreateAccount.emit($event)\" label=\"Sign up\"></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-3d531f29d4583841b7509229fdb4516780cc74136c3730dd3b46ccd75aa4cff54ea52d594f2576171a31d6d08ad01ffdc947242f4f9f36719d7497d08354c8ea",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ACC_VERSION",
                    "defaultValue": "'ACC_VERSION'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "defaultValue": "'Aeonix | Tadiran Telecom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  public ACC_VERSION: string = 'ACC_VERSION';\r\n  content?: string = 'Aeonix | Tadiran Telecom';\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getPublicContent().subscribe(\r\n      data => { this.content = data; },\r\n      err => { this.content = JSON.parse(err.error).message; }\r\n    );\r\n    this.userService.getAccVersion().subscribe(\r\n      data => { this.ACC_VERSION = data; },\r\n      err => { this.ACC_VERSION = JSON.parse(err.error).message; }\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "._1Q9if, ._2Hij5 {\r\n  word-wrap: break-word;\r\n  overflow-wrap: break-word;\r\n  text-align: start;\r\n  pointer-events: none;\r\n}\r\n\r\n._3SQN-, ._3wnIc {\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.multi-bg-example {\r\n  width: 980px;\r\n  height: 289px;\r\n  object-fit: cover;\r\n  object-position: 50% 50%;\r\n}\r\n\r\n.font_0 {\r\n  font-size:44px;\r\n  text-align:left;\r\n  color:#FFFFFF;\r\n}\r\n\r\n.alert, .alert-success {\r\n  width: 48%;\r\n}\r\n\r\n\r\n.background {\r\n  background-size: cover;\r\n  background-origin: border-box;\r\n  background-image: url(../_services/assets/images/Background.webp);\r\n  /*linear-gradient(to right, rgba(30, 75, 115, 1), rgba(255, 255, 255, 0));*/\r\n  background-repeat: no-repeat;\r\n  background-position: top left;\r\n\r\n}\r\n\r\n.bg-image {\r\n  background-image: url(../_services/assets/images/contact-center.jpg);\r\n  background-position: top right;\r\n  padding-bottom: 100px;\r\n}\r\n\r\naside {\r\n  width: 48%;\r\n  padding-left: .1rem;\r\n  margin-left: .1rem;\r\n  float: right;\r\n  box-shadow: inset 5px 0 5px -5px #29627e;\r\n  font-style: italic;\r\n  color: #29627e;\r\n\r\n}\r\naside > p {\r\n  margin: .20rem;\r\n}\r\n\r\np {\r\n  font-family: 'Fira Sans', sans-serif;\r\n}\r\n",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container \">\r\n  <br>\r\n  <header class=\"background jumbotron  \">\r\n    <h1 class=\"font_0\">\r\n      <span class=\"\" style=\"font-size:44px;\">\r\n        <dl>\r\n          <dt><span>{{ content }}</span></dt>\r\n          <dd><span>{{ ACC_VERSION }}</span></dd>\r\n        </dl>\r\n      </span>\r\n    </h1>\r\n  </header>\r\n\r\n  <aside>\r\n    <!-- Card -->\r\n    <div class=\"fa-pull-right bg-image card shadow-1-strong card-img\">\r\n      <div class=\"card-body text-white\">\r\n        <h5 class=\"card-title\">Card title</h5>\r\n        <p class=\"card-text\">\r\n          Some quick example text to build on the card title and make up the bulk of the\r\n          card's content.\r\n        </p>\r\n        <a href=\"#!\" class=\"btn btn-outline-light\">Button</a>\r\n      </div>\r\n    </div>\r\n    <!-- Card -->\r\n  </aside>\r\n\r\n  <div class=\"alert alert-success  \" role=\"alert\">\r\n    <h4 class=\"alert-heading \">Well done!</h4>\r\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\r\n    <hr>\r\n    <p class=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\r\n  </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "Login2Component",
            "id": "component-Login2Component-d470a156b36145e36938f28a8a752faeabc348bb7c71ab719462631c6e8acd8dd272a7823a52ba4f7a77cc8ae4fac9e90eac37d8b76a2a94bd6bbc83cf40a1a6",
            "file": "src/app/login2/login2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-login2",
            "styleUrls": [
                "./login2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "background",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Login2Component'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1482,
                            "end": 1495,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1483,
                                "end": 1491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loginErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[\n    { /*...Default.args?.['storyInput'],*/ id: '1', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez' },\n    { /*...Default.args?.['storyInput'],*/ id: '2', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password'  },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryInput[]",
                    "optional": false,
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport { StoryInput } from \"../../stories/inputs/story-input.model\";\nimport {AuthService} from \"../_services/auth.service\";\nimport {FormGroup} from \"@angular/forms\";\nimport {TokenStorageService} from \"../_services/token-storage.service\";\nimport {Router} from \"@angular/router\";\n//import {Default} from \"../../stories/inputs/story-input.stories\";\n\n\n@Component({\n  selector: 'storybook-login2',\n  templateUrl: './login2.component.html',\n  styleUrls: ['./login2.component.scss']\n})\nexport default class Login2Component implements OnInit {\n\n  public isLoggedIn = false;\n  isLoginFailed = false;\n  loginErrorMessage = '';\n  roles: string[] = [];\n\n\n\n\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  storyInputsInOrder: StoryInput[]  = [\n    { /*...Default.args?.['storyInput'],*/ id: '1', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez' },\n    { /*...Default.args?.['storyInput'],*/ id: '2', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password'  },\n  ];\n\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  @Input()\n  primary = true;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  background?: string;\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Login2Component';\n\n  /*user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n\n  }*/\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-page2--primary' : 'storybook-page2--secondary';\n\n    return ['storybook-page2', mode];\n  }\n\n  constructor(public authService: AuthService,\n              private tokenStorage: TokenStorageService,\n              private router: Router,) {}\n\n  ngOnInit(): void {};\n\n\n  onSubmit(credentials: any): void {\n    console.warn('Login Request from login2!');\n    const { username, password } = credentials;\n\n    this.authService.login(username, password).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveRefreshToken(data.refreshToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.reloadPage();\n      },\n      err => {\n        switch (err.error.message) {\n          case \"Error: A registry process should be made!\":\n            //this.openRegisterForm().then(() => {this.openReplacePassword()});\n            //toPromise((data) => {this.openReplacePassword()});\n            /*this.openRegisterForm().then(\n              (val) => {\n                console.log(val);\n                switch (val) {\n                  case \"xbutton\":\n                    break;\n                  case \"Registration Complete\":\n                    this.openReplacePassword();\n                    break;\n                  case undefined:\n                    this.openReplacePassword();\n                    break;\n                  default:\n                }\n                return 'done2';\n              },\n              (err) => console.error(err));*/\n            break;\n          default:\n            this.loginErrorMessage = err.error.message;\n        }\n\n\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n\n  reloadPage(): void {\n    this.router.navigate(['/login2']).then(() => {window.location.reload()});\n  }\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.storybook-login2 {\r\n  position: absolute;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n.Desktop-1Login-1 {\r\n  width: 100%;\r\n  height: 100%;\r\n  flex-grow: 0;\r\n}\r\n\r\n",
                    "styleUrl": "./login2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 75
                    }
                }
            },
            "templateData": "\n<html>\n<head>\n  <style>\n\n  </style>\n  <title></title>\n</head>\n<body>\n\n<!--article><div class=\"Frame-1 relative\">\n<section class=\"relative \" Style=\"{ 'background': backgroundColor }\"-->\n\n<storybook-background1></storybook-background1>\n\n<!--app-login></app-login-->\n\n<storybook-form\n  [isLoggedIn]=\"false\"\n  [storyInputs]=\"storyInputsInOrder\"\n  (newItemEvent)=\"onSubmit($event)\"\n></storybook-form>\n\n\n<!--/section></div>\n</article-->\n\n</body>\n</html>\n\n\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-9163c9c095e200869f6c8fe4bf0e4ab42f0eef9bfeae31e7d00cddcc20c21f85fa543864ece253158a8e8e19cfe6dd8ebd5f01b203cb97d3380262afecee0f9b",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "primary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 146,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "{\r\n    username: null, //new FormControl('ea2', Validators.min(2)),\r\n    password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "loginErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "showPass",
                    "defaultValue": "'password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"text\" | \"password\"",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openRegisterForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openReplacePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reloadPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showPassChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport {  Router } from '@angular/router';\r\n//import { MdbModalRef, MdbModalService } from 'mdb-angular-ui-kit/modal';\r\nimport {FormControl, Validators} from \"@angular/forms\";\r\nimport { RegisterFormComponent } from '../register-form/register-form.component';\r\nimport {ReplacePassFormComponent} from \"../replace-pass-form/replace-pass-form.component\";\r\nimport {Observable} from \"rxjs\";\r\n//import {  Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  //registerFormRef: MdbModalRef<RegisterFormComponent> | null = null;\r\n  //replacePassFormRef: MdbModalRef<ReplacePassFormComponent> | null = null;\r\n  form: any = {\r\n    username: null, //new FormControl('ea2', Validators.min(2)),\r\n    password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n  };\r\n  public isLoggedIn = false;\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n  roles: string[] = [];\r\n  showPass: 'text' | 'password' = 'password';\r\n\r\n  constructor(private authService: AuthService,\r\n              private tokenStorage: TokenStorageService,\r\n              private router: Router,\r\n              /*private registerFormService: MdbModalService,\r\n              private replacePassFormService: MdbModalService*/) { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.tokenStorage.getToken()) {\r\n      this.isLoggedIn = true;\r\n      this.roles = this.tokenStorage.getUser().roles;\r\n    }\r\n  }\r\n\r\n  showPassChange(): void {\r\n    this.showPass = (this.showPass == 'password' ? 'text' : 'password')\r\n  }\r\n\r\n  test() {\r\n    console.log(\"test start\");\r\n    /*this.openRegisterForm().then(() => {\r\n      this.openReplacePassword();\r\n      console.log(\"test end\");});*/\r\n\r\n    /*this.openRegisterForm().then(\r\n    (val) => {\r\n      console.log(val);\r\n      switch (val) {\r\n        case \"xbutton\":\r\n          break;\r\n        case undefined:\r\n          this.openReplacePassword();\r\n          break;\r\n        default:\r\n\r\n      }\r\n      return 'done2';\r\n    },\r\n      (err) => console.error(err));*/\r\n  }\r\n\r\n  openRegisterForm() {\r\n    //return this.registerFormService.open(RegisterFormComponent).onClose.toPromise();\r\n    /*var promise = new Promise<void>((resolve, reject)  => {\r\n      let newRegisterFormService = this.registerFormService.open(RegisterFormComponent);\r\n      setTimeout(() => {\r\n        console.log(\"Async Work Complete\");\r\n        newRegisterFormService.close();\r\n        resolve();//() => {resolve();}\r\n      }, 5000);\r\n    });\r\n    return promise;*/\r\n  }\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassFormComponent);\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, password } = this.form;\r\n\r\n    this.authService.login(username, password).subscribe(\r\n      data => {\r\n        this.tokenStorage.saveToken(data.accessToken);\r\n        this.tokenStorage.saveRefreshToken(data.refreshToken);\r\n        this.tokenStorage.saveUser(data);\r\n\r\n        this.isLoginFailed = false;\r\n        this.isLoggedIn = true;\r\n        this.roles = this.tokenStorage.getUser().roles;\r\n        this.reloadPage();\r\n      },\r\n      err => {\r\n        switch (err.error.message) {\r\n          case \"Error: A registry process should be made!\":\r\n            //this.openRegisterForm().then(() => {this.openReplacePassword()});\r\n            //toPromise((data) => {this.openReplacePassword()});\r\n            /*this.openRegisterForm().then(\r\n              (val) => {\r\n                console.log(val);\r\n                switch (val) {\r\n                  case \"xbutton\":\r\n                    break;\r\n                  case \"Registration Complete\":\r\n                    this.openReplacePassword();\r\n                    break;\r\n                  case undefined:\r\n                    this.openReplacePassword();\r\n                    break;\r\n                  default:\r\n                }\r\n                return 'done2';\r\n              },\r\n              (err) => console.error(err));*/\r\n              break;\r\n          default:\r\n            this.loginErrorMessage = err.error.message;\r\n        }\r\n\r\n\r\n        this.isLoginFailed = true;\r\n      }\r\n    );\r\n  }\r\n\r\n  reloadPage(): void {\r\n    //window.location.reload();\r\n    this.router.navigate(['/profile']).then(() => {window.location.reload()});\r\n    //var URL = window.location.host+\"/profile\"; //'http://localhost:4200/user';\r\n    ///window.open(URL);\r\n    //this.router.navigate([]).then(result => {  window.open(window.location.toString(), 'user'); });\r\n  }\r\n\r\n  /**\r\n   * Is this the principal call to action on the login2?\r\n   */\r\n  @Input()\r\n  primary = true;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n\r\n.storybook-input {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n  padding: 0.8px 0 0;\r\n  background-color: #FFFFFF;\r\n}\r\n\r\n.storybook-input .Frame-3 {\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n  padding: 0.8px 0 0;\r\n  background-color: #fff;\r\n}\r\n\r\n.user-name {\r\n  position: absolute;\r\n  width: 82px;\r\n  height: 35px;\r\n  left: 0%;\r\n  right: 82.7%;\r\n  top: 10%;\r\n  bottom: 68.37%;\r\n  /* identical to box height, or 223% */\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: -0.011em;\r\n  text-transform: uppercase;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n\r\n/* D Caps Regular */\r\n.D-Caps-Regular {\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 31px;\r\n}\r\n\r\nimg.icon-input-username {\r\n  position: absolute;\r\n  width: 22.72px;\r\n  height: 26.74px;\r\n  left: 20px;\r\n  bottom: 8px;\r\n  transform: rotate(0deg);\r\n  background-position: bottom;\r\n}\r\n\r\nimg.icon-input-password {\r\n  position: absolute;\r\n  width: 22.72px;\r\n  height: 26.74px;\r\n  left: 20px;\r\n  bottom: 8px;\r\n  transform: rotate(0deg);\r\n  background-position: bottom;\r\n}\r\n\r\n.DanK203 {\r\n  position: relative;\r\n  height: 25px;\r\n  width: 228px;\r\n  left: 35px;\r\n  bottom: -5px;\r\n  margin: 4.2px 1px 2.8px 20.3px;\r\n\r\n  /* D Example Italic */\r\n  object-fit: contain;\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 48%;\r\n  /* or 65% */\r\n\r\n  box-shadow: none;\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: -0.19px;\r\n\r\n  border-color: rgba(255, 255, 255, 0);\r\n  color: #000000;\r\n}\r\n\r\n.icon-input-showpass {\r\n  position: absolute;\r\n  width: 33px;\r\n  height: 20px;\r\n  right: 10px;\r\n  bottom: 11px;\r\n  padding: 0px;\r\n  margin: 0;\r\n  border-bottom-width: 0px;\r\n\r\n\r\n  /*transform: rotate(0deg);\r\n  background-position: bottom;*/\r\n  background-color: rgba(45, 148, 55, 0);\r\n}\r\n\r\n\r\n\r\nimg.icon-input-showpass {\r\n  position: absolute;\r\n  bottom: 1px;\r\n  right: 1px;\r\n  width: inherit;\r\n  height: inherit;\r\n  padding: 0px;\r\n  margin: 0px;\r\n  /*object-fit: contain;\r\n  box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n}\r\n\r\n\r\n\r\ninput[type=text]:focus {\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\n\r\ninput::placeholder {\r\n  color: #C8C8C8;\r\n}\r\n\r\ninput[type=password]:focus {\r\n  color: #000000;\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\n.Vector2 {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n\r\n\r\n  left: 0.2%;\r\n  right: 0.03%;\r\n  top: 42.66%;\r\n  bottom: 0;\r\n\r\n  /* White */\r\n  background: #FFFFFF;\r\n  /* Blue */\r\n  border: 2px solid #3D8ECF;\r\n  border-radius: 10px;\r\n}\r\n\r\n.login-button {\r\n  width: 446px;\r\n  height: 63px;\r\n  margin: 26px 0 0 1px;\r\n  padding: 17px 136px 17px 139px;\r\n  border-radius: 7px;\r\n  background-image: linear-gradient(180deg, #3D8ECF 0%, #58A6E4 100%);\r\n\r\n  font-family: 'Noto Sans', ui-serif;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  font-size: 21px;\r\n  line-height: 11px;\r\n}\r\n\r\n.thematic-break {\r\n  margin: 45px 2px 71px 2.5px;\r\n  background-color: #3d8ecf;\r\n  border-top-width: 1px;\r\n  border-top-color: rgb(61, 142, 207);\r\n  border-top-style: solid;\r\n}\r\n\r\n.forgot-password {\r\n  /* D UnderLine Regular */\r\n\r\n  font-family: 'Noto Sans';\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 10px 10px;\r\n\r\n}\r\n.col-md-12{\r\n  position: center;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 20.5px);\r\n\r\n}\r\n\r\n\r\n.card {\r\n  position: absolute;\r\n  left: 5.18%;\r\n  right: 4.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n.Aeonix-App-Center {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  width: 447px;\r\n  height: 82px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n._1Q9if, ._2Hij5 {\r\n  word-wrap: break-word;\r\n  overflow-wrap: break-word;\r\n  text-align: start;\r\n  pointer-events: none;\r\n}\r\n\r\n._3SQN-, ._3wnIc {\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.multi-bg-example {\r\n  width: 980px;\r\n  height: 289px;\r\n  object-fit: cover;\r\n  object-position: 50% 50%;\r\n}\r\n\r\n.font_0 {\r\n  font-size:44px;\r\n  text-align:left;\r\n  color:#FFFFFF;\r\n}\r\n\r\n.alert, .alert-success {\r\n  width: 50%;\r\n}\r\n\r\n\r\n.background {\r\n  background-size: cover;\r\n  background-origin: border-box;\r\n  background-image: url(../_services/assets/images/Background.webp);\r\n  /*linear-gradient(to right, rgba(30, 75, 115, 1), rgba(255, 255, 255, 0));*/\r\n  background-repeat: no-repeat;\r\n  background-position: top left;\r\n\r\n}\r\n\r\n.card-footer {\r\n  padding-top: 0.1rem;\r\n  padding-right: 0.1rem;\r\n  padding-bottom: 0.1rem;\r\n  padding-left: 0.1rem;\r\n\r\n  border-top: 0.1rem solid rgba(0, 0, 0, 0.125);\r\n\r\n  border-bottom: 0.1rem;\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n\r\n}\r\n\r\n.footer ul.footer-menu li.bold a {\r\n  font-weight: 700;\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card  class=\"card-container\"></storybook-card>\r\n  <div  class=\"card  h-100 d-flex align-items-center justify-content-center\">\r\n\r\n    <div class=\"Aeonix-App-Center\">\r\n    <a>Aeonix App Center</a>\r\n    </div>\r\n    <!--img id=\"profile-img\" class=\"user-image\" src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n      class=\"profile-img-card\" /-->\r\n\r\n    <br>\r\n\r\n    <form *ngIf=\"!isLoggedIn\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate>\r\n\r\n\r\n\r\n      <div class=\"list-item storybook-input Frame-3 \">\r\n        <a class=\"user-name D-Caps-Regular\">USER NAME</a>\r\n\r\n        <br>\r\n        <label [attr.aria-label]=\"'username'\" for=\"username\" class=\"Vector2 \">\r\n\r\n          <img src=\"./assets/images/User2ldpi.png\" class=\"icon-input-username\" alt=\"icon input username\" />\r\n\r\n          <input type=\"text\" [value]=\"'DanK203'\" id=\"username\" name=\"username\"  class=\"DanK203\"\r\n                 [(ngModel)]=\"form.username\" placeholder=\"Ex. Saul Ramirez\" required #username=\"ngModel\"/>\r\n        </label>\r\n\r\n        <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"username.errors && f.submitted\">\r\n          Username is required!\r\n        </div>\r\n      </div>\r\n\r\n      <br>\r\n\r\n      <div class=\"storybook-input Frame-3 \">\r\n        <span class=\"user-name D-Caps-Regular\">PASSWORD</span>\r\n\r\n\r\n        <br>\r\n        <label [attr.aria-label]=\"'password'\" for=\"password\" class=\"Vector2 \">\r\n          <img src=\"./assets/images/LockIcon2ldpi.png\" class=\"icon-input-password\" alt=\"icon input password\" />\r\n          <input type={{this.showPass}} [value]=\"'DanK203'\" id=\"password\" name=\"password\"  class=\"DanK203\"\r\n                 [(ngModel)]=\"form.password\" placeholder=\"password\" required #password=\"ngModel\"/>\r\n          <button class=\"icon-input-showpass\" type=\"button\" (click)=\"showPassChange()\">\r\n          <img src=\"./assets/images/EyeIcon.png\" class=\"icon-input-showpass\" alt=\"icon input type\" />\r\n          </button>\r\n        </label>\r\n\r\n        <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"password.errors && f.submitted\">\r\n          <div *ngIf=\"password.errors.required\">Password is required</div>\r\n          <div *ngIf=\"password.errors.minlength\">Password must be at least 1 characters</div>\r\n        </div>\r\n      </div>\r\n\r\n      <br>\r\n      <div class=\"thematic-break\"></div>\r\n\r\n      <div class=\"form-group\">\r\n\r\n        <div>\r\n          <!--a (mouseover)=\"popover.show()\" (mouseleave)=\"popover.hide()\" (click)=\"openReplacePassword()\"\r\n             class=\"form-check-label white-text\"  href=\"#/login\" mdbPopoverTitle=\"Account recovery\" #popover=\"mdbPopover\"\r\n             mdbPopover=\"To help keep your account safe, we will make sure that it’s really you trying to sign in\">\r\n            Forgot password?\r\n          </a-->\r\n          <a (click)=\"openReplacePassword()\"\r\n             class=\"forgot-password\"  href=\"#/login\" >\r\n            Forgot password?\r\n          </a>\r\n\r\n          <button class=\"login-button\">Continue</button>\r\n        </div>\r\n\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && isLoginFailed\">\r\n          Login failed: {{ loginErrorMessage }}\r\n        </div>\r\n      </div>\r\n    </form>\r\n\r\n\r\n\r\n    <div class=\"alert alert-success\" *ngIf=\"isLoggedIn\">\r\n      Logged in as {{ roles }}.\r\n    </div>\r\n\r\n    <!--mdb-card-footer class=\"form-check-label white-text border-bottom-0\" id=\"tests\">\r\n      <label for=\"tests\" class=\"form-check-label white-text\"\r\n              style=\"margin-bottom: 1px; padding: 1px\">R&D test:\r\n        <a (click)=\"openRegisterForm()\" href=\"#/login\" class=\"green-text font-weight-bold\">RegistrationForm</a>\r\n        <b> ,</b>\r\n        <a (click)=\"openReplacePassword()\" href=\"#/login\" class=\"green-text font-weight-bold pl-2\">ReplacePassForm</a>\r\n        <b> ,</b>\r\n        <a (click)=\"test()\" href=\"#/login\" class=\"green-text font-weight-bold pl-2\">test</a>\r\n      </label>\r\n    </mdb-card-footer-->\r\n  </div>\r\n\r\n\r\n\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-a7a40375d6200efaee671984ae8ac7b24b60f37725901655976e074e23bd7351fca29230dc87f0064ab0dcf53d537d89fbbc72b318807e37ed456ec90638dfb2",
            "file": "src/stories/pages/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-login2",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from '../User';\n\n@Component({\n  selector: 'storybook-login2',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "templateData": "<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section>\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>\n"
        },
        {
            "name": "Profile2Component",
            "id": "component-Profile2Component-e923c9a728108ee82bf970266cabda7ec085496921d24e8529af698490773c38baab86bab5e1a7eb679f113eb73115de1c08b596d8648e000ca04fba88576de7",
            "file": "src/app/profile2/profile2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "profile2",
            "styleUrls": [
                "./profile2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "background",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Page2Component'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1480,
                            "end": 1493,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1481,
                                "end": 1489,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n",
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loginErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[\n    { /*...Default.args?.['storyInput'],*/ id: '1', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez' },\n    { /*...Default.args?.['storyInput'],*/ id: '2', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password'  },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryInput[]",
                    "optional": false,
                    "description": "<p>Is this the principal call to action on the login2?</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nIs this the principal call to action on the login2?\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport { StoryInput } from \"../../stories/inputs/story-input.model\";\nimport {AuthService} from \"../_services/auth.service\";\nimport {FormGroup} from \"@angular/forms\";\nimport {TokenStorageService} from \"../_services/token-storage.service\";\nimport {Router} from \"@angular/router\";\n//import {Default} from \"../../stories/inputs/story-input.stories\";\n\n\n@Component({\n  selector: 'profile2',\n  templateUrl: './profile2.component.html',\n  styleUrls: ['./profile2.component.scss']\n})\nexport default class Profile2Component implements OnInit {\n\n  public isLoggedIn = false;\n  isLoginFailed = false;\n  loginErrorMessage = '';\n  roles: string[] = [];\n\n\n\n\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  storyInputsInOrder: StoryInput[]  = [\n    { /*...Default.args?.['storyInput'],*/ id: '1', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez' },\n    { /*...Default.args?.['storyInput'],*/ id: '2', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password'  },\n  ];\n\n  /**\n   * Is this the principal call to action on the login2?\n   */\n  @Input()\n  primary = true;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  background?: string;\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Page2Component';\n\n  /*user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n\n  }*/\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-page2--primary' : 'storybook-page2--secondary';\n\n    return ['storybook-page2', mode];\n  }\n\n  constructor(public authService: AuthService,\n              private tokenStorage: TokenStorageService,\n              private router: Router,) {}\n\n  ngOnInit(): void {};\n\n\n  onSubmit(credentials: any): void {\n    console.warn('Login Request from login2!');\n    const { username, password } = credentials;\n\n    this.authService.login(username, password).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveRefreshToken(data.refreshToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.reloadPage();\n      },\n      err => {\n        switch (err.error.message) {\n          case \"Error: A registry process should be made!\":\n            //this.openRegisterForm().then(() => {this.openReplacePassword()});\n            //toPromise((data) => {this.openReplacePassword()});\n            /*this.openRegisterForm().then(\n              (val) => {\n                console.log(val);\n                switch (val) {\n                  case \"xbutton\":\n                    break;\n                  case \"Registration Complete\":\n                    this.openReplacePassword();\n                    break;\n                  case undefined:\n                    this.openReplacePassword();\n                    break;\n                  default:\n                }\n                return 'done2';\n              },\n              (err) => console.error(err));*/\n            break;\n          default:\n            this.loginErrorMessage = err.error.message;\n        }\n\n\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n\n  reloadPage(): void {\n    this.router.navigate(['/profile']).then(() => {window.location.reload()});\n  }\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.storybook-profile2 {\r\n  position: absolute;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n.Desktop-1Login-1 {\r\n  width: 100%;\r\n  height: 100%;\r\n  flex-grow: 0;\r\n}\r\n\r\n\r\n\r\n/*background-image: linear-gradient(228.37deg, #EFF8FF 22.25%, #B0DCFF 88.18%)*/\r\n\r\n/*.Desktop-1Login-1 {\r\n  width: 1920px;\r\n  height: 1080px;\r\n  flex-grow: 0;\r\n  background-image: linear-gradient(228.37deg, #EFF8FF 22.25%, #B0DCFF 88.18%);\r\n}*/\r\n\r\ndiv.relative {\r\n  position: relative;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n\r\n\r\n\r\n.Frame-1 {\r\n  width: 1920px;\r\n  height: 1080px;\r\n  flex-grow: 0;\r\n}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\nimg.icon-1 {\r\n  position: absolute;\r\n  width: 305.7px;\r\n  height: 309px;\r\n  transform: rotate(0deg);\r\n  background-position: bottom;\r\n}\r\n\r\nimg.icon-2 {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 372px;\r\n  height: 343px;\r\n  flex-grow: 0;\r\n}\r\n\r\n\r\n.storybook-profile2--primary {\r\n\r\n  background: linear-gradient(228.37deg, #EFF8FF 22.25%, #B0DCFF 88.18%);\r\n}\r\n",
                    "styleUrl": "./profile2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 75
                    }
                }
            },
            "templateData": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Title</title>\r\n</head>\r\n<body>\r\n<storybook-background1></storybook-background1>\r\n\r\n<storybook-app-menu\r\n  [isLoggedIn]=\"false\"\r\n  [storyInputs]=\"storyInputsInOrder\"\r\n  (newItemEvent)=\"onSubmit($event)\"\r\n  ></storybook-app-menu>\r\n\r\n</body>\r\n</html>\r\n"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-412ae97c8c4d08b7b19bb272f135ca5fc3e3c2fbe84c0437de5cce264c2b3c525867cf9f12462bbcef235d91e570e332f8357167d66c944656943e370276e05d",
            "file": "src/app/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [
                "./profile.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "appConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isRefreshing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "refreshTokenSubject",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "TOKEN_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "windowObjectReference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "forseRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openapp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openNewTabForApp",
                    "args": [
                        {
                            "name": "webapp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "webappURLPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "webapp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "webappURLPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openNewWinForApp",
                    "args": [
                        {
                            "name": "webapp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "webappURLPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "webapp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "webappURLPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport {Router} from \"@angular/router\";\r\nimport {AuthService} from \"../_services/auth.service\";\r\nimport {AuthInterceptor, authInterceptorProviders} from \"../_helpers/auth.interceptor\";\r\nimport {catchError, switchMap} from \"rxjs/operators\";\r\nimport {BehaviorSubject, pipe, throwError} from \"rxjs\";\r\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\r\nimport { AppConfig } from \"../app.config\"\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  currentUser: any;\r\n  accessToken: any;\r\n  refreshToken: any;\r\n  windowObjectReference: any;\r\n  refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  private isRefreshing = false;\r\n  public appConfig: any;\r\n  private TOKEN_KEY: string;\r\n\r\n\r\n  constructor(private token: TokenStorageService, private router: Router, private authService: AuthService) {\r\n    this.TOKEN_KEY = AppConfig.endpoints.TOKEN_KEY;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentUser = this.token.getUser();\r\n    this.accessToken = this.currentUser.accessToken;\r\n    this.refreshToken = this.currentUser.refreshToken;\r\n  }\r\n\r\n\r\n  openapp(): void {\r\n    console.log('window.location.origin.toString():  '+window.location.origin.toString());\r\n\r\n    this.router.navigate([]).then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+'/accGCCS/'/*window.location.origin.toString()+\"/profile\"*/); });\r\n    //console.log('window.location.origin.toString():  '+ this.windowObjectReference\r\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\r\n    var promise = new Promise((resolve, reject) => {this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML = \"new title\";});\r\n\r\n\r\n    //this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML = \"new title\";\r\n    //this.windowObjectReference.window.document.done.\r\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\r\n    //let { username, password } = this.loginForm.value;\r\n    //username = this.loginForm.get(['username'])?.value.toString();\r\n    //let password = this.loginForm.get(['password'])?.value.toString();\r\n    //this.authenticationService.logout();\r\n  }\r\n\r\n  public forseRefreshToken(): void {\r\n    //@Value(\"${bezkoder.app.jwtExpirationMs}\")\r\n\r\n    if (!this.isRefreshing) {\r\n      const token = this.token.getRefreshToken();\r\n      if (token)\r\n        this.authService.refreshToken(token).subscribe(\r\n          data => {\r\n            this.isRefreshing = false;\r\n            this.token.saveToken(data.accessToken);\r\n            this.token.saveRefreshToken(data.refreshToken);\r\n            this.refreshTokenSubject.next(data.accessToken);\r\n            this.currentUser = this.token.getUser();\r\n            this.accessToken = this.token.getToken();\r\n            this.refreshToken = this.token.getRefreshToken();\r\n          },\r\n          (err) => {\r\n            this.isRefreshing = false;\r\n\r\n            this.token.signOut();\r\n            return throwError(err);\r\n          }\r\n        );\r\n\r\n\r\n    }\r\n  }\r\n\r\n  public openNewTabForApp(webapp: string, webappURLPrefix: string): void {\r\n    var newAccessToken = \"\";\r\n    var newRefreshToken = \"\";\r\n    var newCurrentUser = \"\";\r\n\r\n    if (!this.isRefreshing) {\r\n      const token = this.token.getRefreshToken();\r\n      if (token)\r\n        this.authService.webapptab(token, webapp)\r\n          .then(\r\n          data => {\r\n            this.isRefreshing = false;\r\n            newAccessToken = (data.accessToken);\r\n            newRefreshToken = (data.refreshToken);\r\n            newCurrentUser = (data);\r\n          },\r\n          (reject) => {return throwError(reject.error);})\r\n        .then(() => {this.router.navigate([])\r\n        .then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix);})\r\n        .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\r\n                          this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\r\n                          this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\r\n             (err) => { this.isRefreshing = false;\r\n                        return throwError(err);})});\r\n    }\r\n  }\r\n\r\n\r\n  public openNewWinForApp(webapp: string, webappURLPrefix: string): void {\r\n    var newAccessToken = \"\";\r\n    var newRefreshToken = \"\";\r\n    var newCurrentUser = \"\";\r\n\r\n    if (!this.isRefreshing) {\r\n      const token = this.token.getRefreshToken();\r\n      if (token)\r\n        this.authService.webapptab(token, webapp)\r\n          .then(\r\n            data => {\r\n              this.isRefreshing = false;\r\n              newAccessToken = (data.accessToken);\r\n              newRefreshToken = (data.refreshToken);\r\n              newCurrentUser = (data);\r\n            },\r\n            (reject) => {return throwError(reject.error);})\r\n            .then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix+'start.html',\r\n                        'C-Sharpcorner', 'scrollbars=no');})\r\n            .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\r\n                this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\r\n                this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\r\n              (err) => { this.isRefreshing = false;\r\n                return throwError(err);})\r\n    }\r\n  }\r\n  /*\r\n  forseRefreshToken(): void {\r\n    console.log('Sending forseRefreshToken request...   ');\r\n    this.authInterceptor.forseRefreshToken();\r\n    //authInterceptorProviders.\r\n  }*/\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".app-icon {\r\n  width: 64px;\r\n  height: 64px;\r\n}\r\n\r\n.app-icon-wide {\r\n  width: 181px;\r\n  height: 65px;\r\n}\r\n\r\n\r\n/* ====== media ====== */\r\n.media {margin:10px;}\r\n.media, .media-body {overflow:hidden; _overflow:visible; zoom:1;}\r\n.media .app-icon {float:left; margin-right: 20px;}\r\n.media .app-icon-wide {float:left; margin-right: 10px;}\r\n.media .app-icon app-icon{display:block;}\r\n.media .imgExt{float:right; margin-left: 10px;}\r\n\r\n.mr-2 {\r\n  width: 64px;\r\n  height: 64px;\r\n  /*background-image: url('./assets/images/management.png);*/\r\n  background-repeat: round;\r\n  background-position: top left;\r\n  /*background-origin: padding-box, content-box;*/\r\n  alt: \"jh,hgj,hjk\";\r\n}\r\n\r\n.mr-3 {\r\n  width: 64px;\r\n  height: 64px;\r\n  background-image: url(../_services/assets/images/management.png);\r\n  background-repeat: round;\r\n  background-position: top left;\r\n  /*background-origin: padding-box, content-box;*/\r\n  alt: \"jh,hgj,hjk\";\r\n}\r\n\r\n\r\n.font_0 {\r\n  font-size:44px;\r\n  text-align:center;\r\n  color:#FFFFFF;\r\n}\r\n\r\n\r\n\r\n.background {\r\n  background-size: cover;\r\n  background-origin: border-box;\r\n  background-image: url(../_services/assets/images/Background.webp);\r\n  /*linear-gradient(to right, rgba(30, 75, 115, 1), rgba(255, 255, 255, 0));*/\r\n  background-repeat: no-repeat;\r\n  background-position: top left;\r\n\r\n}\r\n\r\na:link {\r\n  color: green;\r\n  background-color: transparent;\r\n  text-decoration: none;\r\n}\r\na:visited {\r\n  color: pink;\r\n  background-color: transparent;\r\n  text-decoration: none;\r\n}\r\na:hover {\r\n  color: red;\r\n  background-color: transparent;\r\n  text-decoration: underline;\r\n}\r\na:active {\r\n  color: yellow;\r\n  background-color: transparent;\r\n  text-decoration: underline;\r\n}\r\n",
                    "styleUrl": "./profile.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "token",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "token",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" *ngIf=\"currentUser; else loggedOut\">\r\n  <br>\r\n  <header class=\"background jumbotron\">\r\n    <h3 class=\"font_0\" id=\"profile_title\">\r\n      {{ currentUser.username }} Profile\r\n    </h3>\r\n  </header>\r\n  <p>\r\n    <strong>accessToken:</strong>\r\n    <!--{{ currentUser.accessToken.substring(0, 20) }} ...\r\n    {{ currentUser.accessToken.substr(currentUser.accessToken.length - 20) }}-->\r\n    {{ accessToken }}\r\n  </p>\r\n  <p>\r\n    <strong>refreshToken:</strong>\r\n    {{ refreshToken }}\r\n    <br>\r\n    <button id=\"forseRefreshToken\" (click)=\"forseRefreshToken()\" style='text-align: left; width:auto;cursor: pointer;'>Refresh</button>\r\n    <br>\r\n    <button id=\"openNewGccsTab\" (click)='openNewTabForApp(\"GCCS\",\"/accGCCS/\")' style='text-align: left; width:auto;cursor: pointer;'>Open new tab for GCCS</button>\r\n    <br>\r\n    <button id=\"openNewAgentTab\" (click)='openNewWinForApp(\"AGENT\",\"/accAgent/\")' style='text-align: left; width:auto;cursor: pointer;'>Open new tab for Agent</button>\r\n    <br>\r\n    <button id=\"openNewWebRTTab\" (click)='openNewTabForApp(\"ACCREALTIME\",\"/accRealTime/\")' style='text-align: left; width:auto;cursor: pointer;'>Open new tab for WebRT</button>\r\n  </p>\r\n  <p>\r\n    <strong>Email:</strong>\r\n    {{ currentUser.email }}\r\n  </p>\r\n  <p>\r\n    <strong>ID:</strong>\r\n    {{ currentUser.id }}\r\n  </p>\r\n  <p>\r\n    <strong>Web App:</strong>\r\n    {{ currentUser.webApp }}\r\n  </p>\r\n  <strong>Roles:</strong>\r\n  <ul>\r\n    <li *ngFor=\"let role of currentUser.roles\">\r\n      {{ role }}\r\n    </li>\r\n  </ul>\r\n  <p><a href=\"http://tadiran2014.azurewebsites.net/en/products/unified-communications/aeonix/\" id=\"testid2\" target=\"iframe_a\">Tadiran Azure</a></p>\r\n  <p><a href=\"https://www.tadirantele.com/aeonix4cloud\" id=\"testid4\" target=\"iframe_a\">aeonix4cloud</a></p>\r\n  <iframe src=\"https://www.tadirantele.com/aeonix4cloud\" sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"  name=\"iframe_a\" height=\"550px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe>\r\n  <ul class=\"list-unstyled\">\r\n    <li class=\"media\">\r\n      <a href=\"https://172.28.8.245:8443/aeonix/mainForm.jsf\" class=\"app-icon-wide\"  target=\"_blank\" aria-current=\"true\">\r\n        <img class=\"\" src=\"./assets/images/aeonix_logo_72.png\" alt=\"Icon app number 1\">\r\n      </a>\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">aeonix - SERVER</h5>\r\n        Aeonix is a software only communications solution that consolidates disparate business applications into a single, fault tolerant platform. The Aeonix Unified Communications platform, Aeonix Contact Center(ACC), and Aeonix Dispatch Console (ADC), all reside in one virtual instance or COTS server. Aeonix runs on any virtualization platform including VMware, Hyper-V and cloud platforms such as AWS, and can easily port from one platform to another.\r\n      </div>\r\n    </li>\r\n    <li class=\"media my-4\">\r\n      <button (click)=\"openapp()\" class=\"app-icon\" >\r\n        <img class=\"app-icon\" src=\"./assets/images/dashboard.png\" alt=\"Icon app number 2\" >\r\n      </button>\r\n      <!--a href=\"https://172.28.1.130:8445/accRealTime/index.jsp\" class=\"app-icon\" rel=\"opener\" aria-current=\"true\"></a-->\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccGCCS - SERVER</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n    <li class=\"media\">\r\n      <a href=\"https://localhost:8445/accGCCS/\" id=\"testid3\" target=\"iframe_a\" rel=\"noopener\" aria-current=\"false\">\r\n      <img class=\"app-icon\" src=\"./assets/images/management.png\" alt=\"Icon app number 3\">\r\n      </a>\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccGCCS - LOCAL</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n    <li class=\"media my-4\">\r\n      <a href=\"http://localhost:8080/accWebRT/\" id=\"testid5\" target=\"iframe_a\" rel=\"noopener\" aria-current=\"false\">\r\n        <img class=\"app-icon\" src=\"./assets/images/dashboard.png\" alt=\"Icon app number 4\" >\r\n      </a>\r\n\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccWebRT - LOCAL</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n    <li class=\"media\">\r\n      <a href=\"https://172.28.8.245:8445/accAgent/\" id=\"testid6\" target=\"iframe_a\" rel=\"noopener\" aria-current=\"false\">\r\n        <img class=\"app-icon\" src=\"./assets/images/management.png\" alt=\"Icon app number 5\">\r\n      </a>\r\n      <div class=\"media-body\">\r\n        <h5 class=\"mt-0 mb-1\">AccAgent - SERVER</h5>\r\n        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.\r\n      </div>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n<ng-template #loggedOut>\r\n  Please login.\r\n</ng-template>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-777dada16a8d8b639f2709986c17dbb75105a102a4949c6103eba13556cb7ea2fd723b8d86b0049d2a9ca1bd822a3844dce6368e2a548ddcb183affa227734a8",
            "file": "src/app/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "empList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "form",
                    "defaultValue": "{\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isSignUpFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isSuccessful",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport {FormControl, Validators} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  form: any = {\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null\r\n  };\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  errorMessage = '';\r\n  empList: Array<String> = [];\r\n  closeResult = '';\r\n\r\n\r\n  constructor(private authService: AuthService) {\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, email, password } = this.form;\r\n\r\n\r\n\r\n    this.authService.register(username, email, password, this.empList).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isSignUpFailed = true;\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "label {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 40px 40px;\r\n}\r\n\r\n.card {\r\n  background-color: #f7f7f7;\r\n  padding: 20px 25px 30px;\r\n  margin: 0 auto 25px;\r\n  margin-top: 50px;\r\n  -moz-border-radius: 2px;\r\n  -webkit-border-radius: 2px;\r\n  border-radius: 2px;\r\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.profile-img-card {\r\n  width: 96px;\r\n  height: 96px;\r\n  margin: 0 auto 10px;\r\n  display: block;\r\n  -moz-border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  border-radius: 50%;\r\n}",
                    "styleUrl": "./register.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"col-md-12\">\r\n  <div class=\"card card-container\">\r\n    <img\r\n      id=\"profile-img\"\r\n      src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n      class=\"profile-img-card\"/>\r\n    <form  *ngIf=\"!isSuccessful\"  name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\"  #f=\"ngForm\"  novalidate>\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"form.username\"\r\n          required minlength=\"3\" maxlength=\"20\" #username=\"ngModel\"/>\r\n        <div class=\"alert-danger\" *ngIf=\"username.errors && f.submitted\">\r\n          <div *ngIf=\"username.errors.required\">Username is required</div>\r\n          <div *ngIf=\"username.errors.minlength\">\r\n            Username must be at least 3 characters\r\n          </div>\r\n          <div *ngIf=\"username.errors.maxlength\">\r\n            Username must be at most 20 characters\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\"\r\n          required email #email=\"ngModel\"/>\r\n        <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\r\n          <div *ngIf=\"email.errors.required\">Email is required</div>\r\n          <div *ngIf=\"email.errors.email\">\r\n            Email must be a valid email address\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"form.password\"\r\n          required minlength=\"6\" #password=\"ngModel\"/>\r\n        <div class=\"alert-danger\" *ngIf=\"password.errors && f.submitted\">\r\n          <div *ngIf=\"password.errors.required\">Password is required</div>\r\n          <div *ngIf=\"password.errors.minlength\">\r\n            Password must be at least 6 characters\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <button class=\"btn btn-primary btn-block\">Sign Up</button>\r\n      </div>\r\n\r\n      <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\r\n        Signup failed!<br />{{ errorMessage }}\r\n      </div>\r\n    </form>\r\n\r\n    <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n      Your registration is successful!\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "RegisterFormComponent",
            "id": "component-RegisterFormComponent-9099ad2622593e9ebac643269ec78ad85705ad7e5c17a821de6f97152addda86a7b67af46fd5399b794c594a19a2b3b10a70f5773b62638e49e99d70866f18e6",
            "file": "src/app/register-form/register-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [
                "./register-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiResponse",
                    "defaultValue": "{ message: '', error: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "empList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "errorFieldSubmitted",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isSignUpFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isSuccessful",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MdbModalRef<RegisterFormComponent>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "validationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './register-form.component.html',\r\n  styleUrls: ['./register-form.component.css']\r\n})\r\nexport class RegisterFormComponent {\r\n  validationForm: FormGroup;\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  submitted = false;\r\n  errorMessage = '';\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  constructor(public modalRef: MdbModalRef<RegisterFormComponent>,\r\n              private authService: AuthService) {\r\n    this.validationForm = new FormGroup({\r\n      userName: new FormControl(null, Validators.required),\r\n      email: new FormControl(null, Validators.email),\r\n      password: new FormControl('', Validators.minLength(1)),\r\n      phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.submitted = true;\r\n    const { userName, email, password, phone } = this.validationForm.value;\r\n    this.authService.registerForm(userName, email, password, phone).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n        this.errorFieldSubmitted = {};\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful registration';\r\n      },\r\n      error => {\r\n        const errorResponse = JSON.parse(error.error);\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Registration error';\r\n        this.errorMessage = error.error.message;\r\n        this.isSignUpFailed = true;\r\n        if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n          this.errorFieldSubmitted = errorResponse.data;\r\n        }\r\n      }, () => {console.log(\"Registration Complete\");\r\n                        this.modalRef.close(\"Registration Complete\");}\r\n    );\r\n  }\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('userName')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n.fa,.fab,.fad,.fal,.far,.fas {\r\n  -moz-osx-font-smoothing:grayscale;\r\n  -webkit-font-smoothing:antialiased;\r\n  display:inline-block;\r\n  font-style:normal;\r\n  font-variant:normal;\r\n  text-rendering:auto;line-height:1\r\n}\r\n\r\n.fa-lg {\r\n  font-size:1.33333em;\r\n  line-height:.75em;\r\n  vertical-align:-.0667em\r\n}\r\n/**/\r\n.fa-xs {font-size:.75em}\r\n\r\n.fa-sm {font-size:.875em}\r\n\r\n.fa-1x {font-size:1em}\r\n\r\n.fa-2x {font-size:2em}\r\n\r\n.fa-3x {font-size:3em}\r\n\r\n.fa-4x {font-size:4em}\r\n\r\n.fa-5x {font-size:5em}\r\n\r\n.fa-6x {font-size:6em}\r\n\r\n.fa-7x {font-size:7em}\r\n\r\n.fa-8x {font-size:8em}\r\n\r\n.fa-9x {font-size:9em}\r\n\r\n.fa-10x {font-size:10em}\r\n\r\n.fa-fw {text-align:center;width:1.25em}\r\n\r\n.fa-ul {list-style-type:none;margin-left:2.5em;padding-left:0}\r\n\r\n.fa-ul>li {position:relative}\r\n\r\n.fa-li {left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}\r\n\r\n.fa-border {border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\n.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left {\r\n  margin-right:.3em\r\n}\r\n\r\n.input-with-pre-icon label {left:36px;right:initial}\r\n\r\n\r\n.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right {\r\n  margin-left:.3em\r\n}\r\n\r\n.fa-spin {\r\n  -webkit-animation:fa-spin 2s linear infinite;\r\n  animation:fa-spin 2s linear infinite\r\n}\r\n\r\n\r\n\r\n.fa,.far,.fas {\r\n  font-family: \"Font Awesome 5 Free\", serif\r\n}\r\n\r\n.fa,.fas {\r\n  font-weight:900\r\n}\r\n\r\n\r\n.v-btn__content {\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1 0 auto;\r\n  justify-content: inherit;\r\n  line-height: normal;\r\n  position: relative;\r\n  transition: inherit;\r\n}\r\n\r\n.form-outline .form-control:focus ~ .form-label, .form-outline .form-control.active ~ .form-label {\r\n  transform: translateY(-1.5rem) translateY(0.1rem) scale(0.8);\r\n}\r\n\r\n\r\n/*\r\n.form-outline .form-control ~ .form-notch div {\r\n  pointer-events: none;\r\n  border: 1px solid;\r\n  border-color: #39c0ed;\r\n}\r\n\r\n*/\r\n.v-btn__content {\r\n  letter-spacing: normal;\r\n}\r\n",
                    "styleUrl": "./register-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalRef",
                        "type": "MdbModalRef<RegisterFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "modalRef",
                        "type": "MdbModalRef<RegisterFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 62
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 66
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 70
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 74
                    }
                }
            },
            "templateData": "<div class=\"modal-header\">\r\n  <!--div class=\"text-center\"-->\r\n    <label class=\"white-text mb-2 mt-2 font-weight-bold fas\">\r\n      <strong>REGISTRATION</strong>\r\n      <a class=\"green-text font-weight-bold\">\r\n        <strong> FORM</strong>\r\n      </a>\r\n    </label>\r\n\r\n  <!--/div-->\r\n  <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)='modalRef.close(\"xbutton\")'></button>\r\n\r\n  <!--h5 class=\"modal-title\" id=\"exampleModalLabel\">REGISTRATION</h5-->\r\n\r\n</div>\r\n<div class=\"modal-body py-4 text-center expansionCard\">\r\n  <img id=\"profile-img\" src=\"./assets/images/T.png\"\r\n       class=\"profile-img-card\"  alt=\"\"/>\r\n  <div class=\"text-white rgba-stylish-strong py-5 px-5 z-depth-2\">\r\n\r\n\r\n  <form *ngIf=\"!isSuccessful\" [formGroup]=\"validationForm\">\r\n\r\n  <!--###################### Username input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"text\" id=\"typeText\"\r\n           class=\"form-control\"  formControlName=\"username\" required />\r\n    <label class=\"form-label \" for=\"typeText\" >UserName input</label>\r\n    <mdb-error *ngIf=\"userName?.invalid && (userName?.dirty || userName?.touched)\">\r\n      First name is required\r\n    </mdb-error>\r\n    <mdb-success *ngIf=\"userName?.valid && (userName?.dirty || userName?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n\r\n  <br>\r\n\r\n    <!--###################### Email input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n      <input [mdbValidate]=\"true\" mdbInput type=\"email\" id=\"typeEmail\"\r\n             class=\"form-control\" formControlName=\"email\" required />\r\n      <label mdbLabel class=\"form-label form-white\" for=\"typeEmail\">Email input</label>\r\n      <mdb-error *ngIf=\"email?.invalid && (email?.dirty || email?.touched)\">\r\n        Email is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"email?.valid && (email?.dirty || email?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n\r\n\r\n  <br>\r\n\r\n    <!--###################### Password input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typePassword\"\r\n           class=\"form-control\" formControlName=\"password\" required minlength=\"1\" />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typePassword\">Password input</label>\r\n    <mdb-error *ngIf=\"password?.invalid && (password?.dirty || password?.touched)\">\r\n      Password is required\r\n    </mdb-error>\r\n      <!--mdb-error *ngIf=\"email?.errors.length\">  Username must be at least 3 characters</mdb-error-->\r\n    <mdb-success *ngIf=\"password?.valid && (password?.dirty || password?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['password']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['password'] | apiErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n\r\n\r\n  <br>\r\n\r\n    <!--###################### Phone input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"tel\" id=\"typePhone\"\r\n           class=\"form-control\" formControlName=\"phone\" required />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typePhone\">Phone number input</label>\r\n    <mdb-error *ngIf=\"phone?.invalid && (phone?.dirty || phone?.touched)\">\r\n      Phone is required\r\n    </mdb-error>\r\n    <mdb-success *ngIf=\"phone?.valid && (phone?.dirty || phone?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n  <!--mdb-form-control>\r\n    <input mdbInput  type=\"text\" class=\"form-control\" id=\"exampleDatepicker\"/>\r\n    <label mdbLabel for=\"exampleDatepicker\" class=\"form-label\">Select a date</label>\r\n    <ngb-datepicker-month [NgbDatepicker]=\"datepicker\"></ngb-datepicker-month>\r\n    <ngb-datepicker #dateSelect></ngb-datepicker>\r\n  </mdb-form-control-->\r\n    <!--div class=\"form-group\">\r\n      <button class=\"btn btn-primary btn-block\">Login</button>\r\n    </div-->\r\n    <!--Grid row-->\r\n    <div  *ngIf=\"!isSuccessful\" class=\"row d-flex align-items-lg-center \">\r\n      <!--Grid column-->\r\n      <div class=\"form-group text-center mb-2  col-md-12 \">\r\n        <button type=\"button\" (click)=\"onSubmit()\" class=\"btn btn-success btn-block btn-rounded z-depth-1 waves-effect waves-light\">Register</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  </div>\r\n\r\n  <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n    Your registration is successful!\r\n  </div>\r\n\r\n\r\n  <div hidden class=\"list-group-horizontal mb-4 col-md-12\">\r\n    <button type=\"button\" class=\" fa-pull-left btn btn-primary\">Save changes</button>\r\n    <!--button type=\"button\" class=\"fa-pull-right btn btn-secondary\" (click)=\"this.modalRef.close()\">Close</button-->\r\n  </div>\r\n\r\n  <br>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"modal-content \">\r\n    <div class=\"modal-footer fal\">\r\n      <input type=\"checkbox\" class=\" form-check-input\" id=\"checkbox7\">\r\n      <label for=\"checkbox7\" class=\"form-check-label white-text\">Subscribe to our <a href=\"#\" class=\"green-text font-weight-bold\"> newsletter?</a></label>\r\n  </div>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "ReplacePassFormComponent",
            "id": "component-ReplacePassFormComponent-d63468daf8bb53f07bdd3c946d73ac66ee3d8d5c41d02ebbe3a461fad51aa309de7fa514becb645719a1215b744f96435eb6553fece8cd38603a9b782fb6f463",
            "file": "src/app/replace-pass-form/replace-pass-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [
                "./replace-pass-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./replace-pass-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiResponse",
                    "defaultValue": "{ message: '', error: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "empList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "errorFieldSubmitted",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isSignUpFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isSuccessful",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MdbModalRef<ReplacePassFormComponent>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "replacePassForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport {AuthService} from \"../_services/auth.service\";\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './replace-pass-form.component.html',\r\n  styleUrls: ['./replace-pass-form.component.css']\r\n})\r\nexport class ReplacePassFormComponent {\r\n  replacePassForm: FormGroup;\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  submitted = false;\r\n  errorMessage = '';\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  constructor(public modalRef: MdbModalRef<ReplacePassFormComponent>,\r\n              private authService: AuthService) {\r\n    this.replacePassForm = new FormGroup({\r\n      userName: new FormControl(null, Validators.required),\r\n      oldPassword: new FormControl(null, Validators.minLength(1)),\r\n      password: new FormControl('', Validators.minLength(3)),\r\n      confirmPassword: new FormControl(null, Validators.minLength(3))\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.submitted = true;\r\n    const { userName, oldPassword, password, confirmPassword } = this.replacePassForm.value;\r\n    this.authService.replacePassForm(userName, oldPassword, password, confirmPassword).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n        this.errorFieldSubmitted = {};\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful registration';\r\n      },\r\n      error => {\r\n        const errorResponse = JSON.parse(error.error);\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Registration error';\r\n        this.errorMessage = error.error.message;\r\n        this.isSignUpFailed = true;\r\n        if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n          this.errorFieldSubmitted = errorResponse.data;\r\n        }\r\n      }, () => {this.modalRef.close()}\r\n    );\r\n  }\r\n\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.replacePassForm.get('userName')!;\r\n  }\r\n\r\n  get oldPassword(): AbstractControl {\r\n    return this.replacePassForm.get('oldPassword')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.replacePassForm.get('password')!;\r\n  }\r\n\r\n  get confirmPassword(): AbstractControl {\r\n    return this.replacePassForm.get('confirmPassword')!;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n.fa,.fab,.fad,.fal,.far,.fas {\r\n  -moz-osx-font-smoothing:grayscale;\r\n  -webkit-font-smoothing:antialiased;\r\n  display:inline-block;\r\n  font-style:normal;\r\n  font-variant:normal;\r\n  text-rendering:auto;line-height:1\r\n}\r\n\r\n.fa-lg {\r\n  font-size:1.33333em;\r\n  line-height:.75em;\r\n  vertical-align:-.0667em\r\n}\r\n/**/\r\n.fa-xs {font-size:.75em}\r\n\r\n.fa-sm {font-size:.875em}\r\n\r\n.fa-1x {font-size:1em}\r\n\r\n.fa-2x {font-size:2em}\r\n\r\n.fa-3x {font-size:3em}\r\n\r\n.fa-4x {font-size:4em}\r\n\r\n.fa-5x {font-size:5em}\r\n\r\n.fa-6x {font-size:6em}\r\n\r\n.fa-7x {font-size:7em}\r\n\r\n.fa-8x {font-size:8em}\r\n\r\n.fa-9x {font-size:9em}\r\n\r\n.fa-10x {font-size:10em}\r\n\r\n.fa-fw {text-align:center;width:1.25em}\r\n\r\n.fa-ul {list-style-type:none;margin-left:2.5em;padding-left:0}\r\n\r\n.fa-ul>li {position:relative}\r\n\r\n.fa-li {left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}\r\n\r\n.fa-border {border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\n.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left {\r\n  margin-right:.3em\r\n}\r\n\r\n.input-with-pre-icon label {left:36px;right:initial}\r\n\r\n\r\n.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right {\r\n  margin-left:.3em\r\n}\r\n\r\n.fa-spin {\r\n  -webkit-animation:fa-spin 2s linear infinite;\r\n  animation:fa-spin 2s linear infinite\r\n}\r\n\r\n\r\n\r\n.fa,.far,.fas {\r\n  font-family: \"Font Awesome 5 Free\", serif\r\n}\r\n\r\n.fa,.fas {\r\n  font-weight:900\r\n}\r\n\r\n\r\n.v-btn__content {\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1 0 auto;\r\n  justify-content: inherit;\r\n  line-height: normal;\r\n  position: relative;\r\n  transition: inherit;\r\n}\r\n\r\n\r\n.v-btn__content {\r\n  letter-spacing: normal;\r\n}\r\n\r\n\r\n/*\r\n@use 'mdb-angular-ui-kit/assets/scss/free/cards/_form-control';\r\n\r\nmdb-form-control {\r\n  display: block;\r\n}\r\n\r\n\r\n\r\n.form-control {\r\n  min-height: auto;\r\n  padding-top: 4px;\r\n  padding-bottom: 3.28px;\r\n  transition: all 0.1s linear;\r\n\r\n  &:focus {\r\n    transition: all 0.1s linear;\r\n    border-color: #1266f1;\r\n    box-shadow: inset 0 0 0 1px #1266f1;\r\n  }\r\n  &.form-control-sm {\r\n    font-size: 0.775rem;\r\n    line-height: 1.5;\r\n  }\r\n  &.form-control-lg {\r\n    line-height: 2.15;\r\n    border-radius: 0.25rem;\r\n  }\r\n}\r\n\r\n.select {\r\n  ~ .form-label {\r\n    position: absolute;\r\n    top: 0;\r\n    left: $form-label-left;\r\n    padding-top: $form-label-padding-top;\r\n    pointer-events: none;\r\n    transform-origin: 0 0;\r\n    transition: $form-label-transition;\r\n    color: $form-label-color;\r\n    margin-bottom: 0;\r\n  }\r\n  ~ .form-notch {\r\n    display: flex;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    height: 100%;\r\n    text-align: left;\r\n    pointer-events: none;\r\n    div {\r\n      pointer-events: none;\r\n      border: $border-width solid;\r\n      border-color: $form-notch-div-border-color;\r\n      box-sizing: border-box;\r\n      background: transparent;\r\n    }\r\n    .form-notch-leading {\r\n      left: 0;\r\n      top: 0;\r\n      height: 100%;\r\n      width: $form-notch-leading-width;\r\n      border-right: none;\r\n      border-radius: $form-notch-leading-border-radius 0 0 $form-notch-leading-border-radius;\r\n    }\r\n    .form-notch-middle {\r\n      flex: 0 0 auto;\r\n      width: auto;\r\n      max-width: calc(100% - #{$form-notch-middle-max-width});\r\n      height: 100%;\r\n      border-right: none;\r\n      border-left: none;\r\n    }\r\n    .form-notch-trailing {\r\n      flex-grow: 1;\r\n      height: 100%;\r\n      border-left: none;\r\n      border-radius: 0 $form-notch-trailing-border-radius $form-notch-trailing-border-radius 0;\r\n    }\r\n  }\r\n  &.form-control:not(.placeholder-active)::placeholder {\r\n    opacity: 0;\r\n  }\r\n  & .form-control:focus,\r\n  &.active {\r\n    &::placeholder {\r\n      opacity: 1;\r\n    }\r\n  }\r\n  & .form-control:focus {\r\n    box-shadow: none !important;\r\n  }\r\n  // &:focus ~ .form-label,\r\n  &.active ~ .form-label {\r\n    transform: $input-focus-active-label-transform;\r\n  }\r\n  & .form-control:focus ~ .form-label {\r\n    color: $input-focus-label-color;\r\n  }\r\n  & .form-control:focus ~ .form-notch .form-notch-middle,\r\n  & .form-control.active ~ .form-notch .form-notch-middle {\r\n    border-top: none;\r\n    border-right: none;\r\n    border-left: none;\r\n    transition: $input-transition;\r\n  }\r\n  &:focus ~ .form-notch .form-notch-middle {\r\n    border-bottom: $input-focus-border-width solid;\r\n    border-color: $input-focus-border-color;\r\n  }\r\n  &:focus ~ .form-notch .form-notch-leading,\r\n  &.active ~ .form-notch .form-notch-leading {\r\n    border-right: none;\r\n    transition: $input-transition;\r\n  }\r\n  &:focus ~ .form-notch .form-notch-leading {\r\n    border-top: $input-focus-border-width solid $input-focus-border-color;\r\n    border-bottom: $input-focus-border-width solid $input-focus-border-color;\r\n    border-left: $input-focus-border-width solid $input-focus-border-color;\r\n  }\r\n  &:focus ~ .form-notch .form-notch-trailing,\r\n  &.active ~ .form-notch .form-notch-trailing {\r\n    border-left: none;\r\n    transition: $input-transition;\r\n  }\r\n  &:focus ~ .form-notch .form-notch-trailing {\r\n    border-top: $input-focus-border-width solid;\r\n    border-bottom: $input-focus-border-width solid;\r\n    border-right: $input-focus-border-width solid;\r\n    border-color: $input-focus-border-color;\r\n  }\r\n  &:disabled,\r\n  &.disabled,\r\n  &[readonly] {\r\n    background-color: $input-disabled-background-color;\r\n  }\r\n  &.form-control-lg {\r\n    font-size: $input-font-size-lg;\r\n    line-height: $input-line-height-lg;\r\n    padding-left: $input-padding-left-lg;\r\n    padding-right: $input-padding-right-lg;\r\n    ~ .form-label {\r\n      padding-top: $form-label-padding-top-lg;\r\n    }\r\n    &:focus ~ .form-label,\r\n    &.active ~ .form-label {\r\n      transform: $input-focus-active-label-transform-lg;\r\n    }\r\n  }\r\n  &.form-control-sm {\r\n    padding-left: $input-padding-left-sm;\r\n    padding-right: $input-padding-right-sm;\r\n    padding-top: $input-padding-top-sm;\r\n    padding-bottom: $input-padding-bottom-sm;\r\n    font-size: $input-font-size-sm;\r\n    line-height: $input-line-height-sm;\r\n    ~ .form-label {\r\n      padding-top: $form-label-padding-top-sm;\r\n      font-size: $form-label-font-size-sm;\r\n    }\r\n    &:focus ~ .form-label,\r\n    &.active ~ .form-label {\r\n      transform: $input-focus-active-label-transform-sm;\r\n    }\r\n  }\r\n}\r\n\r\n$form-label-left: 1.75rem;\r\n\r\n\r\n.form-outline {\r\n  position: relative;\r\n\r\n  .form-helper {\r\n    width: 100%;\r\n    position: absolute;\r\n    font-size: 0.875em;\r\n    color: #757575;\r\n    .form-counter {\r\n      text-align: right;\r\n    }\r\n  }\r\n\r\n  .trailing {\r\n    position: absolute;\r\n    right: 10px;\r\n    left: initial;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    pointer-events: none;\r\n  }\r\n\r\n  .form-icon-trailing {\r\n    padding-right: 2rem !important;\r\n  }\r\n\r\n  .form-control {\r\n    min-height: auto;\r\n    padding-top: $input-padding-top;\r\n    padding-bottom: $input-padding-bottom;\r\n    padding-left: $input-padding-left;\r\n    padding-right: $input-padding-right;\r\n    border: 0;\r\n    background: transparent;\r\n    transition: $input-transition;\r\n    ~ .form-label {\r\n      position: absolute;\r\n      top: 0;\r\n      max-width: 90%;\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      left: $form-label-left;\r\n      padding-top: $form-label-padding-top;\r\n      pointer-events: none;\r\n      transform-origin: 0 0;\r\n      transition: $form-label-transition;\r\n      color: $form-label-color;\r\n      margin-bottom: 0;\r\n    }\r\n    ~ .form-notch {\r\n      display: flex;\r\n      position: absolute;\r\n      left: 0;\r\n      top: 0;\r\n      width: 100%;\r\n      max-width: 100%;\r\n      height: 100%;\r\n      text-align: left;\r\n      pointer-events: none;\r\n      div {\r\n        pointer-events: none;\r\n        border: $border-width solid;\r\n        border-color: $form-notch-div-border-color;\r\n        box-sizing: border-box;\r\n        background: transparent;\r\n      }\r\n      .form-notch-leading {\r\n        left: 0;\r\n        top: 0;\r\n        height: 100%;\r\n        width: $form-notch-leading-width;\r\n        border-right: none;\r\n        border-radius: $form-notch-leading-border-radius 0 0 $form-notch-leading-border-radius;\r\n      }\r\n      .form-notch-middle {\r\n        flex: 0 0 auto;\r\n        width: auto;\r\n        max-width: calc(100% - #{$form-notch-middle-max-width});\r\n        height: 100%;\r\n        border-right: none;\r\n        border-left: none;\r\n      }\r\n      .form-notch-trailing {\r\n        flex-grow: 1;\r\n        height: 100%;\r\n        border-left: none;\r\n        border-radius: 0 $form-notch-trailing-border-radius $form-notch-trailing-border-radius 0;\r\n      }\r\n    }\r\n    &:not(.placeholder-active)::placeholder {\r\n      opacity: 0;\r\n    }\r\n    &:focus,\r\n    &.active {\r\n      &::placeholder {\r\n        opacity: 1;\r\n      }\r\n    }\r\n    &:focus {\r\n      box-shadow: none !important;\r\n    }\r\n    &:focus ~ .form-label,\r\n    &.active ~ .form-label {\r\n      transform: $input-focus-active-label-transform;\r\n    }\r\n    &:focus ~ .form-label {\r\n      color: $input-focus-label-color;\r\n    }\r\n    &:focus ~ .form-notch .form-notch-middle,\r\n    &.active ~ .form-notch .form-notch-middle {\r\n      border-top: none;\r\n      border-right: none;\r\n      border-left: none;\r\n      transition: $input-transition;\r\n    }\r\n    &:focus ~ .form-notch .form-notch-middle {\r\n      border-bottom: $input-focus-border-width solid;\r\n      border-color: $input-focus-border-color;\r\n    }\r\n    &:focus ~ .form-notch .form-notch-leading,\r\n    &.active ~ .form-notch .form-notch-leading {\r\n      border-right: none;\r\n      transition: $input-transition;\r\n    }\r\n    &:focus ~ .form-notch .form-notch-leading {\r\n      border-top: $input-focus-border-width solid $input-focus-border-color;\r\n      border-bottom: $input-focus-border-width solid $input-focus-border-color;\r\n      border-left: $input-focus-border-width solid $input-focus-border-color;\r\n    }\r\n    &:focus ~ .form-notch .form-notch-trailing,\r\n    &.active ~ .form-notch .form-notch-trailing {\r\n      border-left: none;\r\n      transition: $input-transition;\r\n    }\r\n    &:focus ~ .form-notch .form-notch-trailing {\r\n      border-top: $input-focus-border-width solid $input-focus-border-color;\r\n      border-bottom: $input-focus-border-width solid $input-focus-border-color;\r\n      border-right: $input-focus-border-width solid $input-focus-border-color;\r\n    }\r\n    :disabled,\r\n    &.disabled,\r\n    &[readonly] {\r\n      background-color: $input-disabled-background-color;\r\n    }\r\n    &.form-control-lg {\r\n      font-size: $input-font-size-lg;\r\n      line-height: $input-line-height-lg;\r\n      padding-left: $input-padding-left-lg;\r\n      padding-right: $input-padding-right-lg;\r\n      ~ .form-label {\r\n        padding-top: $form-label-padding-top-lg;\r\n      }\r\n      &:focus ~ .form-label,\r\n      &.active ~ .form-label {\r\n        transform: $input-focus-active-label-transform-lg;\r\n      }\r\n    }\r\n    &.form-control-sm {\r\n      padding-left: $input-padding-left-sm;\r\n      padding-right: $input-padding-right-sm;\r\n      padding-top: $input-padding-top-sm;\r\n      padding-bottom: $input-padding-bottom-sm;\r\n      font-size: $input-font-size-sm;\r\n      line-height: $input-line-height-sm;\r\n      ~ .form-label {\r\n        padding-top: $form-label-padding-top-sm;\r\n        font-size: $form-label-font-size-sm;\r\n      }\r\n      :focus ~ .form-label,\r\n      &.active ~ .form-label {\r\n        transform: $input-focus-active-label-transform-sm;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.form-white {\r\n    .form-control {\r\n      color: $form-white-input-color;\r\n      ~ .form-label {\r\n        color: $form-white-label-color;\r\n      }\r\n      ~ .form-notch {\r\n        div {\r\n          border-color: $form-white-notch-div-border-color;\r\n        }\r\n      }\r\n      &:focus ~ .form-label {\r\n        color: $form-white-input-focus-label-color;\r\n      }\r\n      &:focus ~ .form-notch .form-notch-middle {\r\n        border-color: $form-white-input-focus-border-color;\r\n      }\r\n      &:focus ~ .form-notch .form-notch-leading {\r\n        border-top: $input-focus-border-width solid $form-white-input-focus-border-color;\r\n        border-bottom: $input-focus-border-width solid $form-white-input-focus-border-color;\r\n        border-left: $input-focus-border-width solid $form-white-input-focus-border-color;\r\n      }\r\n      &:focus ~ .form-notch .form-notch-trailing {\r\n        border-color: $form-white-input-focus-border-color;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n*/\r\n",
                    "styleUrl": "./replace-pass-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalRef",
                        "type": "MdbModalRef<ReplacePassFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "modalRef",
                        "type": "MdbModalRef<ReplacePassFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 62
                    }
                },
                "oldPassword": {
                    "name": "oldPassword",
                    "getSignature": {
                        "name": "oldPassword",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 66
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 70
                    }
                },
                "confirmPassword": {
                    "name": "confirmPassword",
                    "getSignature": {
                        "name": "confirmPassword",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 74
                    }
                }
            },
            "templateData": "<div class=\"modal-header\">\r\n  <!--div class=\"text-center\"-->\r\n    <label class=\"white-text mb-2 mt-2 font-weight-bold fas\">\r\n      <strong>REPLACE PASSWORD</strong>\r\n      <a class=\"green-text font-weight-bold\">\r\n        <strong> FORM</strong>\r\n      </a>\r\n    </label>\r\n\r\n  <!--/div-->\r\n  <button type=\"button\" class=\"btn btn-close white-text \" aria-label=\"Close\" (click)='modalRef.close(\"xbutton\")'></button>\r\n\r\n  <!--h5 class=\"modal-title\" id=\"exampleModalLabel\">REGISTRATION</h5-->\r\n\r\n</div>\r\n<div class=\"modal-body py-4 text-center expansionCard\">\r\n  <figure class=\"figure\">\r\n  <img aria-setsize=\"20\"  id=\"profile-img\" src=\"./assets/images/T.png\"\r\n       class=\"profile-img-card img-fluid rounded \"  alt=\"\"/>\r\n    <figcaption class=\"figure-caption text-center text-capitalize\">Tadiran Telecom</figcaption>\r\n  </figure>\r\n  <div class=\"text-white rgba-stylish-strong py-4 px-5 z-depth-2\" style=\"border-bottom: 2rem\">\r\n  <!--div class=\"form-outline\">\r\n    <input type=\"text\" id=\"typeText\" class=\"form-control\" />\r\n    <label  class=\"form-label\" for=\"typeText\">Your UserName</label>\r\n  </div-->\r\n\r\n  <form *ngIf=\"!isSuccessful\" [formGroup]=\"replacePassForm\">\r\n\r\n  <!--###################### Username input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n      <input [mdbValidate]=\"true\" mdbInput type=\"text\" id=\"typeText\"\r\n             class=\"form-control\"  formControlName=\"username\" required />\r\n      <label class=\"form-label \" for=\"typeText\" >Username input</label>\r\n      <mdb-error *ngIf=\"userName?.invalid && (userName?.dirty || userName?.touched)\">\r\n        Username is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"userName?.valid && (userName?.dirty || userName?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n  </div>\r\n    <br>\r\n  <!--###################### Old Password input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typeOldPassword\"\r\n           class=\"form-control\" formControlName=\"oldPassword\" required minlength=\"1\" />\r\n    <label class=\"form-label\" for=\"typeOldPassword\">Current Password</label>\r\n      <mdb-error *ngIf=\"oldPassword?.invalid && (oldPassword?.dirty || oldPassword?.touched)\">\r\n        Current password is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"oldPassword?.valid && (oldPassword?.dirty || oldPassword?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['oldPassword']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['oldPassword'] | loginErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n\r\n    <br>\r\n    <hr class=\"my-1 text-black-50\">\r\n    <br>\r\n\r\n  <!--###################### New Password input field ###################### -->\r\n  <div class=\"form-outline text-black-50\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typePassword\"\r\n           class=\"form-control\" formControlName=\"password\" required minlength=\"3\" />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typePassword\">New Password</label>\r\n    <mdb-error *ngIf=\"password?.invalid && (password?.dirty || password?.touched)\">\r\n      Password is required\r\n    </mdb-error>\r\n    <mdb-success *ngIf=\"password?.valid && (password?.dirty || password?.touched)\">\r\n      Looks good!\r\n    </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['password']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['password'] | apiErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n  <br>\r\n\r\n  <!--###################### Confirm Password input field ###################### -->\r\n  <div class=\"form-outline\">\r\n    <mdb-form-control  class=\"form-outline\">\r\n    <input [mdbValidate]=\"true\" mdbInput type=\"password\" id=\"typeConfirmPassword\"\r\n           class=\"form-control\" formControlName=\"confirmPassword\" required minlength=\"3\" />\r\n    <label mdbLabel class=\"form-label form-white\" for=\"typeConfirmPassword\">Confirm Password</label>\r\n      <mdb-error *ngIf=\"confirmPassword?.invalid && (confirmPassword?.dirty || confirmPassword?.touched)\">\r\n        Retype password is required\r\n      </mdb-error>\r\n      <mdb-success *ngIf=\"confirmPassword?.valid && (confirmPassword?.dirty || confirmPassword?.touched)\">\r\n        Looks good!\r\n      </mdb-success>\r\n    </mdb-form-control>\r\n    <span class=\"text-danger error-input\" *ngIf=\"submitted && errorFieldSubmitted['confirmPassword']\"\r\n          style=\"white-space: pre-line;  font-size: 14px;\">\r\n          {{errorFieldSubmitted['confirmPassword'] | apiErrorMessage}}\r\n      <br><br>\r\n    </span>\r\n  </div>\r\n  </form>\r\n  </div>\r\n\r\n\r\n  <!--Grid row-->\r\n  <div  *ngIf=\"!isSuccessful\" class=\"row d-flex align-items-lg-center border-bottom-0 \">\r\n    <!--Grid column-->\r\n    <div class=\"text-center mb-2  col-md-12 border-bottom-0\">\r\n      <button type=\"button\" (click)=\"onSubmit()\" class=\"btn btn-success btn-block btn-rounded z-depth-1 waves-effect waves-light border-bottom-0\"\r\n      style=\"margin-bottom: 0;\">Replace Password</button>\r\n    </div>\r\n  </div>\r\n  <div hidden class=\"list-group-horizontal mb-4 col-md-12\">\r\n    <button type=\"button\" class=\" fa-pull-left btn btn-primary\">Save changes</button>\r\n    <button type=\"button\" class=\"fa-pull-right btn btn-secondary\" (click)=\"modalRef.close()\">Close</button>\r\n  </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n<div class=\"modal-content \">\r\n    <div class=\"modal-footer fal\">\r\n      <input type=\"checkbox\" class=\" form-check-input\" id=\"checkbox7\">\r\n      <label for=\"checkbox7\" class=\"form-check-label white-text\">Subscribe to our <a href=\"#\" class=\"green-text font-weight-bold\"> newsletter?</a></label>\r\n  </div>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "StoryInputComponent",
            "id": "component-StoryInputComponent-31c86f8f4839f71fad1062f90999b6c3ea7998d9d30b2c91cc1f1beeda6f7531221ced9c3534623c674ab574e3abaee50321a6932a6f923d1e7e21f75e8de51b",
            "file": "src/stories/inputs/story-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-input",
            "styleUrls": [
                "./story-input.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./story-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "storyInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "StoryInput",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
                    "description": "<p>Component method to trigger the onArchive event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2053,
                                "end": 2055,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2047,
                                "end": 2052,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onPin event\n",
                    "description": "<p>Component method to trigger the onPin event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1906,
                                "end": 1908,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1900,
                                "end": 1905,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "showPassChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport { StoryInput } from './story-input.model'\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-input',\r\n  templateUrl: './story-input.component.html',\r\n  styleUrls: ['./story-input.scss']\r\n})\r\nexport class StoryInputComponent {\r\n\r\n  @Input() storyInput!: StoryInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n\r\n  showPassChange(): void {\r\n    this.storyInput.type = (this.storyInput?.type == 'password' ? 'text' : 'password')\r\n  }\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  /*validationForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n\r\n    let alertType = this.storyInput?.title.toString();\r\n\r\n    switch (alertType) {\r\n      case \"username\":\r\n        return this.currentForm.get('username')!;\r\n      case \"password\":\r\n        return this.currentForm.get('password')!;\r\n      default:\r\n        console.log('N');\r\n        break;\r\n    }\r\n    return this.currentForm.get('username')!;\r\n  }\r\n/*\r\n*/\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n.storybook-input {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n  padding: 0.8px 0 0;\r\n  background-color: #FFFFFF;\r\n}\r\n\r\n.storybook-input .Frame-3 {\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n  padding: 0.8px 0 0;\r\n  background-color: #fff;\r\n}\r\n\r\n.user-name {\r\n  position: absolute;\r\n  width: 300px;\r\n  height: 35px;\r\n  left: 0%;\r\n  right: 82.7%;\r\n  top: 10%;\r\n  bottom: 68.37%;\r\n  /* identical to box height, or 223% */\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: -0.011em;\r\n  text-transform: uppercase;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n/* D Caps Regular */\r\n.D-Caps-Regular {\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 31px;\r\n}\r\n\r\n\r\nimg.icon-input {\r\n  position: absolute;\r\n  width: 22.72px;\r\n  height: 26.74px;\r\n  left: 20px;\r\n  bottom: 8px;\r\n  transform: rotate(0deg);\r\n  background-position: bottom;\r\n}\r\n\r\n\r\n.DanK203 {\r\n  position: relative;\r\n  height: 25px;\r\n  width: 228px;\r\n  left: 35px;\r\n  bottom: -5px;\r\n  margin: 4.2px 1px 2.8px 20.3px;\r\n\r\n  /* D Example Italic */\r\n  object-fit: contain;\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 48%;\r\n  /* or 65% */\r\n\r\n  box-shadow: none;\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: -0.19px;\r\n\r\n  border-color: rgba(255, 255, 255, 0);\r\n  color: #000000;\r\n}\r\n\r\n\r\n.icon-input-showpass {\r\n  position: absolute;\r\n  width: 33px;\r\n  height: 20px;\r\n  right: 10px;\r\n  bottom: 11px;\r\n  padding: 0px;\r\n  margin: 0;\r\n  border-bottom-width: 0px;\r\n  background-color: rgba(45, 148, 55, 0);\r\n}\r\n\r\nimg.icon-input-showpass {\r\n  position: absolute;\r\n  bottom: 1px;\r\n  right: 1px;\r\n  width: inherit;\r\n  height: inherit;\r\n  padding: 0px;\r\n  margin: 0px;\r\n  /*object-fit: contain;\r\n  box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n\r\n}\r\n\r\ninput[type=text]:focus {\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\n\r\ninput::placeholder {\r\n  color: #C8C8C8;\r\n}\r\n\r\ninput[type=password]:focus {\r\n  color: #000000;\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\n\r\n.Vector2 {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n\r\n\r\n  left: 0.2%;\r\n  right: 0.03%;\r\n  top: 42.66%;\r\n  bottom: 0;\r\n\r\n  /* White */\r\n  background: #FFFFFF;\r\n  /* Blue */\r\n  border: 2px solid #3D8ECF;\r\n  border-radius: 10px;\r\n}\r\n\r\n\r\n\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n",
                    "styleUrl": "./story-input.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 50
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 55
                    }
                },
                "formControler": {
                    "name": "formControler",
                    "getSignature": {
                        "name": "formControler",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 59
                    }
                }
            },
            "templateData": "\r\n<!--div class=\"list-item {{ storyInput?.state }}\">\r\n  <label [attr.aria-label]=\"'archiveInput-' + storyInput.id\" for=\"checked-{{ storyInput?.id }}\" class=\"checkbox\">\r\n    <input\r\n      type=\"checkbox\"\r\n      disabled=\"true\"\r\n      [defaultChecked]=\"storyInput?.state === 'INPUT_ARCHIVED'\"\r\n      name=\"checked-{{ storyInput?.id }}\"\r\n      id=\"checked-{{ storyInput?.id }}\"\r\n    />\r\n    <span class=\"checkbox-custom\" (click)=\"onArchive(storyInput.id)\"></span>\r\n  </label>\r\n  <label [attr.aria-label]=\"storyInput.title + ''\" for=\"title-{{ storyInput?.id }}\" class=\"title\">\r\n    <input type=\"text\" [value]=\"storyInput.title\" readonly=\"true\" id=\"title-{{ storyInput?.id }}\" name=\"title-{{ storyInput?.id }}\" placeholder=\"Input title\"/>\r\n  </label>\r\n  <button *ngIf=\"storyInput?.state !== 'INPUT_ARCHIVED'\" class=\"pin-button\" [attr.aria-label]=\"'pinTask-' + storyInput.id\" (click)=\"onPin(storyInput.id)\">\r\n    <span class=\"icon-star\"></span>\r\n  </button>\r\n</div-->\r\n\r\n\r\n\r\n<div class=\"list-item storybook-input Frame-3 {{ storyInput?.state }}\" [formGroup]=\"this.currentForm\">\r\n  <a class=\"user-name D-Caps-Regular\">{{storyInput?.state}}</a>\r\n\r\n  <br>\r\n  <label [attr.aria-label]=\"storyInput?.id + ''\" for=\"{{ storyInput?.title }}\" class=\"Vector2 \">\r\n    <img src=\"{{ storyInput?.icon }}\" class=\"icon-input\" alt=\"icon input username\"  name=\"{{ storyInput?.title }}\" />\r\n    <div>\r\n    <input type=\"{{storyInput?.type}}\" id=\"{{ storyInput?.id }}\" class=\"DanK203\"\r\n            name=\"{{storyInput?.title}}\" formControlName=\"{{storyInput?.title}}\" required  />\r\n    </div>\r\n<!-- [value]=\"storyInput?.title\"  placeholder=\"{{storyInput?.placeholder}}\"  -->\r\n    <button *ngIf=\"storyInput?.state === 'PASSWORD'\" class=\"icon-input-showpass\" type=\"button\" (click)=\"showPassChange()\">\r\n      <img src=\"./assets/images/EyeIcon.png\" class=\"icon-input-showpass\" alt=\"icon input type\" />\r\n    </button>\r\n\r\n  </label>\r\n\r\n\r\n\r\n  <!--storyInput?.title+'.invalid' alert alert-danger  && ([storyInput?.title+'.dirty'] || [storyInput?.title+'.touched'].valueOf()) -->\r\n  <div [ngSwitch]=\"storyInput?.title\">\r\n      <div class=\"alert alert-danger\"   *ngIf=\"formControler?.invalid && (formControler?.dirty || formControler?.touched)\"  >\r\n          <span *ngSwitchCase=\"'username'\">{{storyInput?.state}} is required!</span>\r\n          <span *ngSwitchCase=\"'password'\">{{storyInput?.state}} is required!</span>\r\n          <span *ngSwitchCase=\"'email'\"   >{{storyInput?.state}} is required!</span>\r\n          <span *ngSwitchCase=\"'phone'\"   >{{storyInput?.state}} is required!</span>\r\n      </div>\r\n      <div class=\"alert alert-danger\"  *ngIf=\"formControler?.valid && (formControler?.dirty || formControler?.touched)\">\r\n        <div *ngSwitchCase=\"'username'\">ok!</div>\r\n        <div *ngSwitchCase=\"'password'\">ok!</div>\r\n        <div *ngSwitchCase=\"'email'\"   >ok!</div>\r\n        <div *ngSwitchCase=\"'phone'\"   >ok!</div>\r\n      </div>\r\n </div>\r\n\r\n\r\n\r\n\r\n\r\n  <ng-container [ngSwitch]=\"this.storyInput?.title\"></ng-container>\r\n\r\n    <!--div *ngSwitchCase=\"'password'\">\r\n      <span class=\"alert alert-danger\"   *ngIf=\"username?.invalid && (username?.dirty || username?.touched)\"  >\r\n        {{storyInput?.state}} is required!\r\n      </span>\r\n      <span class=\"alert alert-danger\"  *ngIf=\"username?.valid && (username?.dirty || username?.touched)\">\r\n        ok!\r\n      </span>\r\n    </div-->\r\n\r\n\r\n\r\n\r\n  <!--                   -->\r\n\r\n\r\n  <!--div class=\"alert alert-danger\" role=\"alert\" *ngIf=false >\r\n    Username is required!\r\n  </div-->\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n"
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-1ead2db9b777f31d4e265a94c313111c50b28b1190eb4cadd8b7860a535428433fc7374d17aabfa5415ddf2602fb06d5bd00259e94f53839250fc950726dd118",
            "file": "src/stories/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-task",
            "styleUrls": [
                "./task.css"
            ],
            "styles": [],
            "templateUrl": [
                "./task.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Task",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
                    "description": "<p>Component method to trigger the onArchive event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 732,
                                "end": 734,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 726,
                                "end": 731,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onPin event\n",
                    "description": "<p>Component method to trigger the onPin event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 586,
                                "end": 588,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 580,
                                "end": 585,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { Task } from './task.model';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-task',\r\n  templateUrl: './task.component.html',\r\n  styleUrls: ['./task.css']\r\n})\r\nexport class TaskComponent {\r\n  @Input() task!: Task;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinTask = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveTask = new EventEmitter<Event>();\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinTask.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveTask.emit(id);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-item.TASK_ARCHIVED input[type=\"text\"] {\r\n  color: #4a5568;\r\n  text-decoration: line-through;\r\n}\r\n",
                    "styleUrl": "./task.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"list-item {{ task?.state }}\">\r\n  <label [attr.aria-label]=\"'archiveTask-' + task.id\" for=\"checked-{{ task?.id }}\" class=\"checkbox\">\r\n    <input\r\n      type=\"checkbox\"\r\n      disabled=\"true\"\r\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\r\n      name=\"checked-{{ task?.id }}\"\r\n      id=\"checked-{{ task?.id }}\"\r\n    />\r\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\r\n  </label>\r\n  <label [attr.aria-label]=\"task.title + ''\" for=\"title-{{ task?.id }}\" class=\"title\">\r\n    <input type=\"text\" [value]=\"task.title\" readonly=\"true\" id=\"title-{{ task?.id }}\" name=\"title-{{ task?.id }}\" placeholder=\"Input title\"/>\r\n  </label>\r\n  <button *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" class=\"pin-button\" [attr.aria-label]=\"'pinTask-' + task.id\" (click)=\"onPin(task.id)\">\r\n    <span class=\"icon-star\"></span>\r\n  </button>\r\n</div>\r\n\r\n\r\n<div class=\"list-item {{ task?.state }}\">\r\n  <label [attr.aria-label]=\"'archiveTask-' + task.id\" for=\"checked-{{ task?.id }}\" class=\"checkbox\">\r\n    <input\r\n      type=\"checkbox\"\r\n      disabled=\"true\"\r\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\r\n      name=\"checked-{{ task?.id }}\"\r\n      id=\"checked-{{ task?.id }}\"\r\n    />\r\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\r\n  </label>\r\n  <label [attr.aria-label]=\"task.title + ''\" for=\"title-{{ task?.id }}\" class=\"title\">\r\n    <input type=\"text\" [value]=\"task.title\" readonly=\"true\" id=\"title-{{ task?.id }}\" name=\"title-{{ task?.id }}\" placeholder=\"Input title\"/>\r\n  </label>\r\n  <button *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" class=\"pin-button\" [attr.aria-label]=\"'pinTask-' + task.id\" (click)=\"onPin(task.id)\">\r\n    <span class=\"icon-star\"></span>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-3d6933e1cf16c3daa1c511c190b1cb17b48665287b3c1311423de3e13e3a1a3f7f16416906c2e2f9bda7650400f77edd9065ea7f2b69c3796a3996984dc829d1",
            "file": "src/stories/task-list/task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Task[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Task } from '../task/task.model';\r\n\r\n@Component({\r\n  selector: 'app-task-list',\r\n  templateUrl: './task-list.component.html',\r\n})\r\nexport class TaskListComponent {\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  tasksInOrder: Task[] = [];\r\n\r\n  @Input() loading = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Input()\r\n  set tasks(arr: Task[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'TASK_PINNED'),\r\n      ...arr.filter(t => t.state !== 'TASK_PINNED'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n    );\r\n    this.tasksInOrder = filteredTasks.filter(\r\n      t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "tasks": {
                    "name": "tasks",
                    "setSignature": {
                        "name": "tasks",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"list-items\">\r\n  <storybook-task\r\n    *ngFor=\"let task of tasksInOrder\"\r\n    [task]=\"task\"\r\n    (onArchiveTask)=\"onArchiveTask.emit($event)\"\r\n    (onPinTask)=\"onPinTask.emit($event)\">\r\n  </storybook-task>\r\n  <div *ngIf=\"tasksInOrder.length === 0 && !loading\" class=\"wrapper-message\">\r\n    <span class=\"icon-check\"></span>\r\n    <p class=\"title-message\">You have no tasks</p>\r\n    <p class=\"subtitle-message\">Sit back and relax</p>\r\n  </div>\r\n  <div *ngIf=\"loading\">\r\n    <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\r\n      <span class=\"glow-checkbox\"></span>\r\n      <span class=\"glow-text\">\r\n           <span>Loading</span> <span>cool</span> <span>state</span>\r\n         </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-e5225939ff2b60a092da0c263e0c1d002a6e4ba4901e0e1b144abeae82d4d3d14c6e7c8baeb274534817ae17b56f1ec04a6d85fbdc5e1877e7f8c06373e8fd69",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport Profile2Component from './profile2/profile2.component';\r\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\r\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\r\nimport { BoardUserComponent } from './board-user/board-user.component';\r\n\r\nimport { authInterceptorProviders, AuthInterceptor } from './_helpers/auth.interceptor';\r\nimport {NgbDatepickerModule} from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { MdbAccordionModule } from 'mdb-angular-ui-kit/accordion';\r\nimport { MdbCarouselModule } from 'mdb-angular-ui-kit/carousel';\r\nimport { MdbCheckboxModule } from 'mdb-angular-ui-kit/checkbox';\r\nimport { MdbCollapseModule } from 'mdb-angular-ui-kit/collapse';\r\nimport { MdbDropdownModule } from 'mdb-angular-ui-kit/dropdown';\r\nimport { MdbFormsModule } from 'mdb-angular-ui-kit/forms';\r\nimport { MdbModalModule } from 'mdb-angular-ui-kit/modal';\r\nimport { MdbPopoverModule } from 'mdb-angular-ui-kit/popover';\r\nimport { MdbRadioModule } from 'mdb-angular-ui-kit/radio';\r\nimport { MdbRangeModule } from 'mdb-angular-ui-kit/range';\r\nimport { MdbRippleModule } from 'mdb-angular-ui-kit/ripple';\r\nimport { MdbScrollspyModule } from 'mdb-angular-ui-kit/scrollspy';\r\nimport { MdbTabsModule } from 'mdb-angular-ui-kit/tabs';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport { MdbTooltipModule } from 'mdb-angular-ui-kit/tooltip';\r\nimport { MdbValidationModule, MdbErrorDirective, MdbSuccessDirective } from 'mdb-angular-ui-kit/validation';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MdbInputDirective  } from 'mdb-angular-ui-kit/forms';\r\nimport { ModalModule, TooltipModule, PopoverModule, ButtonsModule, MDBBootstrapModule } from 'angular-bootstrap-md';\r\nimport { RegisterFormComponent } from './register-form/register-form.component';\r\nimport {ReplacePassFormComponent} from \"./replace-pass-form/replace-pass-form.component\";\r\nimport {ApiErrorMessagePipe} from \"./pipes/api-error-message.pipe\";\r\nimport {LoginErrorMessagePipe} from \"./pipes/login-error-message.pipe\";\r\nimport  Login2Component  from './login2/login2.component';\r\nimport { TaskComponent } from '../stories/task/task.component';\r\nimport { ButtonLanguageComponent } from '../stories/buttons/button-language/button-language.component';\r\nimport { ButtonTadiranComponent } from '../stories/buttons/button-tadiran/button-tadiran.component';\r\nimport { ButtonContinueComponent } from '../stories/buttons/button-continue/button-continue.component';\r\nimport Button from '../stories/buttons/button-example/button.component'\r\nimport { ButtonGlobeComponent } from '../stories/buttons/button-globe/button-globe.component'\r\nimport CardComponent from '../stories/cards/card.component'\r\nimport {StoryInputComponent} from '../stories/inputs/story-input.component'\r\nimport {FormComponent} from '../stories/forms/form.component'\r\nimport {TaskListComponent} from '../stories/task-list/task-list.component'\r\nimport Background1Component from '../stories/pages/background1/background1Component'\r\nimport { AppMenuComponent } from '../stories/app-menu/app-menu.component'\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        LoginComponent,\r\n        RegisterComponent,\r\n        HomeComponent,\r\n        ProfileComponent,\r\n        Profile2Component,\r\n        BoardAdminComponent,\r\n        BoardModeratorComponent,\r\n        BoardUserComponent,\r\n        RegisterFormComponent,\r\n        ReplacePassFormComponent,\r\n        ApiErrorMessagePipe,\r\n        LoginErrorMessagePipe,\r\n        Login2Component,\r\n        ButtonLanguageComponent,\r\n        ButtonTadiranComponent,\r\n        Button,\r\n        CardComponent,\r\n        StoryInputComponent,\r\n        FormComponent,\r\n        TaskComponent,\r\n        TaskListComponent,\r\n        ButtonGlobeComponent,\r\n        ButtonContinueComponent,\r\n        Background1Component,\r\n        AppMenuComponent,\r\n\r\n    ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    NgbDatepickerModule,\r\n    MdbAccordionModule,\r\n    MdbCarouselModule,\r\n    MdbCheckboxModule,\r\n    MdbCollapseModule,\r\n    MdbDropdownModule,\r\n    MdbFormsModule,\r\n    MdbModalModule,\r\n    MdbPopoverModule,\r\n    MdbRadioModule,\r\n    MdbRangeModule,\r\n    MdbRippleModule,\r\n    MdbScrollspyModule,\r\n    MdbTabsModule,\r\n    MdbTooltipModule,\r\n    //MdbValidationModule,\r\n    BrowserAnimationsModule,\r\n    ReactiveFormsModule,\r\n    ModalModule,\r\n    ButtonsModule,\r\n    MDBBootstrapModule.forRoot(),\r\n  ],\r\n  providers: [authInterceptorProviders],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ApiErrorMessagePipe"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AppMenuComponent"
                        },
                        {
                            "name": "Background1Component"
                        },
                        {
                            "name": "BoardAdminComponent"
                        },
                        {
                            "name": "BoardModeratorComponent"
                        },
                        {
                            "name": "BoardUserComponent"
                        },
                        {
                            "name": "Button"
                        },
                        {
                            "name": "ButtonContinueComponent"
                        },
                        {
                            "name": "ButtonGlobeComponent"
                        },
                        {
                            "name": "ButtonLanguageComponent"
                        },
                        {
                            "name": "ButtonTadiranComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "Login2Component"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginErrorMessagePipe"
                        },
                        {
                            "name": "Profile2Component"
                        },
                        {
                            "name": "ProfileComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        },
                        {
                            "name": "RegisterFormComponent"
                        },
                        {
                            "name": "ReplacePassFormComponent"
                        },
                        {
                            "name": "StoryInputComponent"
                        },
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-381b8dbe0145c8eb5455db8354c07c677c5829470764abb3e1bf1536d2a60d1b4944c3934a9982d79df5d17f42c602acda8ff60c5e45878b46ae468f6a706c38",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { BoardUserComponent } from './board-user/board-user.component';\r\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\r\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\r\nimport { AppRoutingGuard } from './app-routing.guard';\r\nimport Login2Component from \"./login2/login2.component\";\r\nimport Profile2Component from \"./profile2/profile2.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'login2', component: Login2Component },\r\n  { path: 'register', component: RegisterComponent },\r\n  { path: 'profile', component: ProfileComponent/*, canActivate: [AppRoutingGuard] */},\r\n  { path: 'profile2', component: Profile2Component/*, canActivate: [AppRoutingGuard] */},\r\n  { path: 'user', component: BoardUserComponent },\r\n  { path: 'mod', component: BoardModeratorComponent },\r\n  { path: 'admin', component: BoardAdminComponent },\r\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\r\n  { path: 'home', loadChildren: () => \"import('./app.module').then(m => m.AppModule)\",},\r\n  { path: '**', redirectTo: 'home', },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {useHash: true})],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
            },
            {
                "name": "API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/user.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AppConfig.accServer.ACCWEBServers+'/accGate/test/'"
            },
            {
                "name": "APP_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('app.config')"
            },
            {
                "name": "AppConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  accServer: {\r\n    ACCWEBServers: AUTH_API //'https://172.28.8.245:8445'\r\n  },\r\n  endpoints: {\r\n\r\n    TOKEN_KEY: 'token',\r\n    REFRESHTOKEN_KEY: 'auth-refreshtoken',\r\n    USER_KEY: 'user'\r\n  }\r\n}"
            },
            {
                "name": "Archived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AUTH_API",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "protocol + \"//\" + url + \":\" + port"
            },
            {
                "name": "AUTH_API",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/auth.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AppConfig.accServer.ACCWEBServers+'/accGate/auth/'"
            },
            {
                "name": "authInterceptorProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_helpers/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app-menu/app-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Email",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app-menu/app-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "Gallery",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template2.bind({})"
            },
            {
                "name": "Gallery",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template2.bind({})"
            },
            {
                "name": "httpOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/auth.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-example/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-language/button-language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app-menu/app-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login2/login2.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile2/profile2.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/headers/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/background1/background1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login2/login2.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile2/profile2.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/headers/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/background1/background1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "parsedUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new URL(window.location.href)"
            },
            {
                "name": "Password",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Phone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Pinned",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "port",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "parsedUrl.port"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login2/login2.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile2/profile2.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/cards/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-example/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-language/button-language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/background1/background1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template2.bind({})"
            },
            {
                "name": "Primary3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template2.bind({})"
            },
            {
                "name": "protocol",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "parsedUrl.protocol"
            },
            {
                "name": "REFRESHTOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/token-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'auth-refreshtoken'"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login2/login2.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile2/profile2.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/cards/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-example/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-language/button-language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/background1/background1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-example/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-language/button-language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login2/login2.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Login2Component>",
                "defaultValue": "(args: Login2Component) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile2/profile2.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Profile2Component>",
                "defaultValue": "(args: Profile2Component) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app-menu/app-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/cards/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Card>",
                "defaultValue": "(args: Card) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/headers/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: actionsData.onPinTask,\r\n    onArchiveTask: actionsData.onArchiveTask,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: TaskStories.actionsData.onPinTask,\r\n    onArchiveTask: TaskStories.actionsData.onArchiveTask,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonAppsComponent>",
                "defaultValue": "(args: ButtonAppsComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-example/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonContinueComponent>",
                "defaultValue": "(args: ButtonContinueComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonGlobeComponent>",
                "defaultValue": "(args: ButtonGlobeComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-language/button-language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonLanguageComponent>",
                "defaultValue": "(args: ButtonLanguageComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/background1/background1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Background1Component>",
                "defaultValue": "(args: Background1Component) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonTadiranComponent>",
                "defaultValue": "(args: ButtonTadiranComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonContinueComponent>",
                "defaultValue": "(args: ButtonContinueComponent) => ({\n  props: args,\n  /*template: '<storybook-button-tadiran ></storybook-button-tadiran>',*/\n\n})"
            },
            {
                "name": "Template2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonTadiranComponent>",
                "defaultValue": "(args: ButtonTadiranComponent) => ({\n  props: args,\n  /*template: '<storybook-button-tadiran ></storybook-button-tadiran>',*/\n\n})"
            },
            {
                "name": "TOKEN_HEADER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_helpers/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Authorization'"
            },
            {
                "name": "TOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/token-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'token'"
            },
            {
                "name": "url",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "parsedUrl.hostname"
            },
            {
                "name": "USER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/token-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'user'"
            },
            {
                "name": "Username",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app-menu/app-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/task/task.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
                },
                {
                    "name": "Archived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Pinned",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: actionsData.onPinTask,\r\n    onArchiveTask: actionsData.onArchiveTask,\r\n  },\r\n})"
                }
            ],
            "src/stories/inputs/story-input.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Email",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Password",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Phone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
                },
                {
                    "name": "Username",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/_services/user.service.ts": [
                {
                    "name": "API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/user.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AppConfig.accServer.ACCWEBServers+'/accGate/test/'"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "APP_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('app.config')"
                },
                {
                    "name": "AppConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  accServer: {\r\n    ACCWEBServers: AUTH_API //'https://172.28.8.245:8445'\r\n  },\r\n  endpoints: {\r\n\r\n    TOKEN_KEY: 'token',\r\n    REFRESHTOKEN_KEY: 'auth-refreshtoken',\r\n    USER_KEY: 'user'\r\n  }\r\n}"
                },
                {
                    "name": "AUTH_API",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "protocol + \"//\" + url + \":\" + port"
                },
                {
                    "name": "parsedUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new URL(window.location.href)"
                },
                {
                    "name": "port",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "parsedUrl.port"
                },
                {
                    "name": "protocol",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "parsedUrl.protocol"
                },
                {
                    "name": "url",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "parsedUrl.hostname"
                }
            ],
            "src/app/_services/auth.service.ts": [
                {
                    "name": "AUTH_API",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/auth.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AppConfig.accServer.ACCWEBServers+'/accGate/auth/'"
                },
                {
                    "name": "httpOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/auth.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n}"
                }
            ],
            "src/app/_helpers/auth.interceptor.ts": [
                {
                    "name": "authInterceptorProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_helpers/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n]"
                },
                {
                    "name": "TOKEN_HEADER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_helpers/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Authorization'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/app-menu/app-menu.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app-menu/app-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app-menu/app-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app-menu/app-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app-menu/app-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n    },\n})"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app-menu/app-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/forms/form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n    },\n})"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/task-list/task-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\r\n  props: {\r\n    ...args,\r\n    onPinTask: TaskStories.actionsData.onPinTask,\r\n    onArchiveTask: TaskStories.actionsData.onArchiveTask,\r\n  },\r\n})"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/stories/buttons/button-continue/button-continue.stories.ts": [
                {
                    "name": "Gallery",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template2.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template2.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonContinueComponent>",
                    "defaultValue": "(args: ButtonContinueComponent) => ({\n  props: args,\n})"
                },
                {
                    "name": "Template2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonContinueComponent>",
                    "defaultValue": "(args: ButtonContinueComponent) => ({\n  props: args,\n  /*template: '<storybook-button-tadiran ></storybook-button-tadiran>',*/\n\n})"
                }
            ],
            "src/stories/buttons/button-tadiran/button-tadiran.stories.ts": [
                {
                    "name": "Gallery",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template2.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template2.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonTadiranComponent>",
                    "defaultValue": "(args: ButtonTadiranComponent) => ({\n  props: args,\n})"
                },
                {
                    "name": "Template2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonTadiranComponent>",
                    "defaultValue": "(args: ButtonTadiranComponent) => ({\n  props: args,\n  /*template: '<storybook-button-tadiran ></storybook-button-tadiran>',*/\n\n})"
                }
            ],
            "src/stories/buttons/button-apps/button-apps.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonAppsComponent>",
                    "defaultValue": "(args: ButtonAppsComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-example/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-example/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-example/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-example/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-example/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-example/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-globe/button-globe.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonGlobeComponent>",
                    "defaultValue": "(args: ButtonGlobeComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-language/button-language.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-language/button-language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-language/button-language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-language/button-language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-language/button-language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-language/button-language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonLanguageComponent>",
                    "defaultValue": "(args: ButtonLanguageComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/login2/login2.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login2/login2.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login2/login2.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login2/login2.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login2/login2.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login2/login2.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Login2Component>",
                    "defaultValue": "(args: Login2Component) => ({\n  props: args,\n})"
                }
            ],
            "src/app/profile2/profile2.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile2/profile2.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile2/profile2.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile2/profile2.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile2/profile2.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile2/profile2.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Profile2Component>",
                    "defaultValue": "(args: Profile2Component) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/headers/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/headers/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/headers/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/headers/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/pages/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/pages/background1/background1.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/background1/background1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/background1/background1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/background1/background1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/background1/background1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/background1/background1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Background1Component>",
                    "defaultValue": "(args: Background1Component) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/cards/card.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/cards/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/cards/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/cards/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Card>",
                    "defaultValue": "(args: Card) => ({\n  props: args,\n})"
                }
            ],
            "src/app/_services/token-storage.service.ts": [
                {
                    "name": "REFRESHTOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/token-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'auth-refreshtoken'"
                },
                {
                    "name": "TOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/token-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'token'"
                },
                {
                    "name": "USER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/token-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'user'"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "login2",
                        "component": "Login2Component"
                    },
                    {
                        "path": "register",
                        "component": "RegisterComponent"
                    },
                    {
                        "path": "profile",
                        "component": "ProfileComponent"
                    },
                    {
                        "path": "profile2",
                        "component": "Profile2Component"
                    },
                    {
                        "path": "user",
                        "component": "BoardUserComponent"
                    },
                    {
                        "path": "mod",
                        "component": "BoardModeratorComponent"
                    },
                    {
                        "path": "admin",
                        "component": "BoardAdminComponent"
                    },
                    {
                        "path": "",
                        "redirectTo": "home",
                        "pathMatch": "full"
                    },
                    {
                        "path": "home",
                        "loadChildren": "./app.module#AppModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "AppModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": "home"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/_helpers/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/_helpers/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptorProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_helpers/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_HEADER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_API",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/token-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TokenStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/token-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REFRESHTOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/token-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/token-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/user.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_shared/event-bus.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventBusService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_shared/event.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app-routing.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AppRoutingGuard",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_API",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parsedUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "port",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "protocol",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "url",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/board-admin/board-admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardAdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/board-moderator/board-moderator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardModeratorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/board-user/board-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Login2Component",
                "coveragePercent": 33,
                "coverageCount": "5/15",
                "status": "medium"
            },
            {
                "filePath": "src/app/login2/login2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/api-error-message.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ApiErrorMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/login-error-message.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LoginErrorMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/profile2/profile2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Profile2Component",
                "coveragePercent": 33,
                "coverageCount": "5/15",
                "status": "medium"
            },
            {
                "filePath": "src/app/profile2/profile2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile2/profile2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile2/profile2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile2/profile2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile2/profile2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/register-form/register-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/replace-pass-form/replace-pass-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReplacePassFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AeonixAppCenterForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonAppsComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonContinueComponent",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Gallery",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonGlobeComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonLanguageComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonTadiranComponent",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Gallery",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/cards/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/cards/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/cards/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/cards/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AeonixAppCenterForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/headers/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/headers/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/headers/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/headers/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryInputComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidationForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoryInput",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Email",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Password",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Phone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Username",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1Component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Background1Component",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/stories/pages/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-list/task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "src/stories/task/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Archived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pinned",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}