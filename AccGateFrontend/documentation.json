{
    "pipes": [
        {
            "name": "ApiErrorMessagePipe",
            "id": "pipe-ApiErrorMessagePipe-e27b9d00b22143e685037a9654fe41822e19122811c481bc47516a875d90990084d28d56a89001c2871177c9cea94cc1d4bb20b77435af37339089e31e58fdae",
            "file": "src/app/pipes/api-error-message.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "apiErrorMessage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'apiErrorMessage'\r\n})\r\nexport class ApiErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "ApiErrorMessagePipe",
            "id": "pipe-ApiErrorMessagePipe-a4be5b63a78d7661812fb26aa5cfe4e4c880c42359354c0e7bd80b93ace26c34b21ebafb87518c99cb0a7463d236db1cca90c8dec97a7b23b1fdd7812db23947-1",
            "file": "src/app/storybook/pipes/api-error-message.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "apiErrorMessage",
            "sourceCode": "import {Injectable, Pipe, PipeTransform} from '@angular/core';\r\nimport {ApiErrorMessageService} from \"./api-error-message.service\";\r\n\r\n@Pipe({\r\n  name: 'apiErrorMessage',\r\n  pure: false,\r\n})\r\nexport class ApiErrorMessagePipe implements PipeTransform {\r\n    constructor(private apiErrorMessageService: ApiErrorMessageService) {}\r\n\r\n    transform(value: any, args?: any): any {\r\n      this.apiErrorMessageService.language = args.language;\r\n      return this.apiErrorMessageService.apiErrorMessage(value)    }\r\n\r\n/*    transform(message: string, ...args: unknown[]): unknown {\r\n      const dataToArray = message.split(',').map(item => {item.trim();\r\n        console.log('ApiErrorMessagePipe: '+item.toString() +'   '+ item.trim().toString());\r\n      });\r\n\r\n      // convert array to string replacing comma with new line\r\n      return dataToArray.join('\\n');\r\n    }\r\n*/\r\n}\r\n\r\n\r\n\r\n",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ApiErrorMessagePipe-1"
        },
        {
            "name": "LoginErrorMessagePipe",
            "id": "pipe-LoginErrorMessagePipe-a507640bc8dcc22ad7782e272d8a4bca4ecd487e9e00d564738ca3ff86e4140246290a87785913426ef62ef636422d9ee29e6f4070cfc3d9be8d072f9fd298f4",
            "file": "src/app/pipes/login-error-message.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "loginErrorMessage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'loginErrorMessage'\r\n})\r\nexport class LoginErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "LoginErrorMessagePipe",
            "id": "pipe-LoginErrorMessagePipe-a507640bc8dcc22ad7782e272d8a4bca4ecd487e9e00d564738ca3ff86e4140246290a87785913426ef62ef636422d9ee29e6f4070cfc3d9be8d072f9fd298f4-1",
            "file": "src/app/storybook/pipes/login-error-message.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "loginErrorMessage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'loginErrorMessage'\r\n})\r\nexport class LoginErrorMessagePipe implements PipeTransform {\r\n\r\n  transform(message: string, ...args: unknown[]): unknown {\r\n    const dataToArray = message.split(',').map(item => item.trim());\r\n    // convert array to string replacing comma with new line\r\n    return dataToArray.join('\\n');\r\n  }\r\n\r\n}\r\n",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LoginErrorMessagePipe-1"
        }
    ],
    "interfaces": [
        {
            "name": "AccountInput",
            "id": "interface-AccountInput-877c1566ce77e5b378450f48b81156b6f328248d0ac2b35b4b3f2195a694d7c89faae607a2b012a2af42a797fc92c3fcf085348ceba6a02ea149c1341469abf9",
            "file": "src/stories/inputs/account-input/account-input.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AccountInput {\r\n  id: string;\r\n  title: string;\r\n  state: string;\r\n  icon:  string;\r\n  type:  'enable-profile-picture' | 'tel' | 'email' | 'password';\r\n  placeholder: string;\r\n  hide: boolean;\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "hide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"enable-profile-picture\" | \"tel\" | \"email\" | \"password\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ActionInput",
            "id": "interface-ActionInput-ef89c0cf6e6e3b53f6e83d5e497f26bec41d682fe904b22cb4f461b0f23604250c8be58a64565c8b0003f2020c452f52446f7b7c53581b7d3d4bbf2423ab41b7",
            "file": "src/stories/actions/action-input/action-input.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ActionInput {\r\n  conditionName: String;\r\n  presentingMessage: String;\r\n  isFulfilled: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "conditionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isFulfilled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "presentingMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AdComponent",
            "id": "interface-AdComponent-c830a5f63b2a25f1f439ba1ac00b36466017513e7face4090494f589216b1feb1eac63132ae123ef6166e13892e74dbab8bcd6f868799a79a26d9acc597f503f",
            "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component, ComponentFactoryResolver, ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges, Type,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {CodeInputComponent} from \"../../inputs/code-input/code-input.component\";\r\nimport {DynamicCompDirective} from \"../../directive/dynamic-comp.directive\";\r\nimport {PopoverOptions} from \"../../directive/popover.interface\";\r\n\r\n\r\nexport interface AdComponent {\r\n  content: any;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-forgot-pass-form',\r\n  templateUrl: './forgot-pass-form.component.html',\r\n  styleUrls: ['./forgot-pass-form.component.scss'],\r\n})\r\nexport default class ForgotPassFormComponent implements OnInit {\r\n\r\n  codeLength: number = 4;\r\n  code: string = '';\r\n  param = {language: 'login-main'};\r\n  formButtonLabel: string = 'Send me a Verification Code';\r\n  formButtonClick: string = 'generateNewCodeFor2SV.emit()';\r\n\r\n  @Input() status?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() sendVerificationReq: EventEmitter<string> = new EventEmitter();\r\n\r\n  @Output() generateNewCodeFor2SV: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild(DynamicCompDirective, {static: true}) appDynamicComp!: DynamicCompDirective;\r\n  //@ViewChild('codeInput') codeInput!: CodeInputComponent;\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild('secondHeader', { static: false }) secondHeader?: ElementRef;\r\n\r\n  @ViewChild('formHeader', { static: false }) formHeader?: ElementRef;\r\n\r\n  @ViewChild('formFields', { static: false }) formFields?: ElementRef;\r\n\r\n  @ViewChild('formButton', { static: false }) formButton?: ElementRef;\r\n\r\n  @Input() isVerSuccess = false;\r\n\r\n  @Input() isRecSuccess = false;\r\n\r\n  constructor(private renderer: Renderer2,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  changeLog: string[] = [];\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRecSuccess) {\r\n      if (!changes.isRecSuccess.previousValue &&  changes.isRecSuccess.currentValue) {\r\n        console.warn('Identify Request Succeeded!');\r\n        this.movToVerifyState();\r\n      }\r\n    }\r\n\r\n    if (changes.isVerSuccess) {\r\n      if (!changes.isVerSuccess.previousValue &&  changes.isVerSuccess.currentValue) {\r\n        console.warn('Verify Request Succeeded!');\r\n        //this.changeFormToPinCodeState();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  onSubmit(): void {\r\n    if (!this.isRecSuccess) {this.generateNewCodeFor2SV.emit();}\r\n    /*else if (!this.isVerSuccess) {\r\n      console.info('Send Verification Request!');\r\n      this.sendVerificationReq.emit(this.code);\r\n      if (!this.status.isVerSuccess) {this.codeInputComponentRef?.instance.reset();}\r\n    }*/\r\n    else {this.clickXButton.emit();}\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of Inputs\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup = new FormGroup({});\r\n\r\n  // this called every time when user changed the code\r\n  onCodeChanged(code: string) {\r\n    this.code = code;\r\n    //console.log('code entered: '+ this.code);\r\n  }\r\n\r\n  // this called only if user entered full code\r\n  onCodeCompleted(code: string) {\r\n    //\r\n  }\r\n\r\n  popoverOptions: AdComponent = {\r\n    content: CodeInputComponent\r\n  };\r\n\r\n  codeInputComponentRef?: ComponentRef<any>;\r\n\r\n  movToVerifyState(){\r\n    this.renderer.setProperty(this.formHeader?.nativeElement ,'innerHTML',\r\n      'Reset Password');\r\n\r\n    this.renderer.setProperty(this.secondHeader?.nativeElement ,'innerHTML',\r\n      'A new temporary password has been sent to<br>your email address'); //+\r\n      //'Once received, use the temporary password to log in<br>' +\r\n      //'You will be required to create a new secure password once logged in<br>'\r\n\r\n    this.formButtonLabel = 'Continue';\r\n\r\n    this.formButtonClick = '\"onSubmit()\"';\r\n\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.popoverOptions.content);\r\n    const viewContainerRef = this.appDynamicComp.viewContainerRef;\r\n    viewContainerRef.clear();\r\n    this.codeInputComponentRef = viewContainerRef.createComponent(componentFactory);\r\n    this.codeInputComponentRef.instance.codeChanged.subscribe(($event: string) => {\r\n      this.onCodeChanged($event);\r\n      console.log(\"Code Changed\");\r\n    });\r\n\r\n\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AdComponent",
            "id": "interface-AdComponent-f7bcdd1354f912fe10b3b9c24ffae360fb8f7afee531a2f4f3ada0fde56ea052343715da67b985af96fca49df0400d21469b4d11b695a2ecd70a021e50f2c2fa-1",
            "file": "src/stories/forms/reset-pass-form/reset-pass-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component, ComponentFactoryResolver, ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges, Type,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {CodeInputComponent} from \"../../inputs/code-input/code-input.component\";\r\nimport {DynamicCompDirective} from \"../../directive/dynamic-comp.directive\";\r\nimport {PopoverOptions} from \"../../directive/popover.interface\";\r\n\r\n\r\nexport interface AdComponent {\r\n  content: any;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-reset-pass-form',\r\n  templateUrl: './reset-pass-form.component.html',\r\n  styleUrls: ['./reset-pass-form.component.scss'],\r\n})\r\nexport default class ResetPassFormComponent implements OnInit {\r\n\r\n  codeLength: number = 4;\r\n  code: string = '';\r\n  param = {language: 'login-main'};\r\n  formButtonLabel: string = 'Send me a Verification Code';\r\n  formButtonClick: string = 'generateNewCodeFor2SV.emit()';\r\n\r\n  @Input() status?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() sendVerificationReq: EventEmitter<string> = new EventEmitter();\r\n\r\n  @Output() generateNewCodeFor2SV: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild(DynamicCompDirective, {static: true}) appDynamicComp!: DynamicCompDirective;\r\n  //@ViewChild('codeInput') codeInput!: CodeInputComponent;\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild('secondHeader', { static: false }) secondHeader?: ElementRef;\r\n\r\n  @ViewChild('formHeader', { static: false }) formHeader?: ElementRef;\r\n\r\n  @ViewChild('formFields', { static: false }) formFields?: ElementRef;\r\n\r\n  @ViewChild('formButton', { static: false }) formButton?: ElementRef;\r\n\r\n  @Input() isVerSuccess = false;\r\n\r\n  @Input() isRecSuccess = false;\r\n\r\n  constructor(private renderer: Renderer2,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  changeLog: string[] = [];\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRecSuccess) {\r\n      if (!changes.isRecSuccess.previousValue &&  changes.isRecSuccess.currentValue) {\r\n        console.warn('Identify Request Succeeded!');\r\n        this.movToVerifyState();\r\n      }\r\n    }\r\n\r\n    if (changes.isVerSuccess) {\r\n      if (!changes.isVerSuccess.previousValue &&  changes.isVerSuccess.currentValue) {\r\n        console.warn('Verify Request Succeeded!');\r\n        //this.changeFormToPinCodeState();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  onSubmit(): void {\r\n    if (!this.isRecSuccess) {this.generateNewCodeFor2SV.emit();}\r\n    else if (!this.isVerSuccess) {\r\n      console.info('Send Verification Request!');\r\n      this.sendVerificationReq.emit(this.code);\r\n      if (!this.status.isVerSuccess) {this.codeInputComponentRef?.instance.reset();/*this.codeInput.reset();*/}\r\n    }\r\n    else {}\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of Inputs\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup = new FormGroup({});\r\n\r\n  // this called every time when user changed the code\r\n  onCodeChanged(code: string) {\r\n    this.code = code;\r\n    //console.log('code entered: '+ this.code);\r\n  }\r\n\r\n  // this called only if user entered full code\r\n  onCodeCompleted(code: string) {\r\n    //\r\n  }\r\n\r\n  popoverOptions: AdComponent = {\r\n    content: CodeInputComponent\r\n  };\r\n\r\n  codeInputComponentRef?: ComponentRef<any>;\r\n\r\n  movToVerifyState(){\r\n    this.renderer.setProperty(this.secondHeader?.nativeElement ,'innerHTML',\r\n      'Please enter the Verification Code<br>you received in your mail:');\r\n\r\n    this.renderer.setProperty(this.formHeader?.nativeElement ,'innerHTML',\r\n      'Change Password');\r\n\r\n\r\n    this.formButtonLabel = 'Continue';\r\n\r\n    this.formButtonClick = '\"onSubmit()\"';\r\n\r\n    //this.renderer.setAttribute(this.formButton.  nativeElement, 'onClick', '\"onSubmit()\"' );\r\n\r\n    /*this.renderer.setProperty(this.formFields?.nativeElement ,'innerHTML',\r\n      '<code-input #codeInput [codeLength]=\"codeLength\" (codeChanged)=\"onCodeChanged($event)\" (codeCompleted)=\"onCodeCompleted($event)\"> </code-input>'\r\n    );*/\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.popoverOptions.content);\r\n    const viewContainerRef = this.appDynamicComp.viewContainerRef;\r\n    viewContainerRef.clear();\r\n    this.codeInputComponentRef = viewContainerRef.createComponent(componentFactory);\r\n    this.codeInputComponentRef.instance.codeChanged.subscribe(($event: string) => {\r\n      this.onCodeChanged($event);\r\n      console.log(\"Code Changed\");\r\n    });\r\n\r\n\r\n    /*\r\n    this.renderer.setAttribute(this.formButton?.nativeElement, 'label', 'Continue' );\r\n\r\n\r\n\r\n    const viewContainerRef = this.appDynamicComp.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const componentRef = viewContainerRef.createComponent<CodeInputComponent>(this.popover.content);\r\n    componentRef.instance.reset()\r\n*/\r\n    //this.codeInput = this.formFields?.nativeElement.codeInput.getElement();\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AdComponent-1"
        },
        {
            "name": "AeonixAppCenterForm",
            "id": "interface-AeonixAppCenterForm-c40e7eaec6c2c04aa2759e63dc53cec6d48b01804fc39b1088df7b70aa90c96a07a676f5171d198d40eec5c57ea64c908f179fe8616ef876e13ddf7380471378",
            "file": "src/stories/app-menu/app-menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../inputs/input/story-input.model\";\r\nimport { AuthService } from '../../app/_services/auth.service';\r\nimport {MdbModalRef} from \"mdb-angular-ui-kit/modal\";\r\n//import {Profile2Expose} from \"src/app/profile2/profile2.interface\";\r\n\r\nexport interface Profile2Expose {\r\n  agent: boolean;\r\n  realtime: boolean;\r\n  scriptDesigner: boolean;\r\n  admin: boolean;\r\n  aeonixAdmin: boolean;\r\n}\r\n\r\nexport interface AeonixAppCenterForm {\r\n  username: null, //new FormControl('ea2', Validators.min(2)),\r\n  password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-app-menu',\r\n  templateUrl: './app-menu.component.html',\r\n  styleUrls: ['./app-menu.css'],\r\n})\r\nexport class AppMenuComponent implements OnInit {\r\n\r\n  /*form: AeonixAppCenterForm = {\r\n    username: null,     //new FormControl('ea2', Validators.min(2)),\r\n    password: null      //new FormControl('zaqwsx', Validators.min(2))\r\n  };*/\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  constructor() {\r\n    this.validationForm = new FormGroup({\r\n      username: new FormControl('Telecom2', Validators.minLength(2)),\r\n      //email: new FormControl(null, Validators.email),\r\n      password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n      //phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  validationForm: FormGroup;\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() openNewWinForApp = new EventEmitter<any>();\r\n\r\n  @Output() openNewTabForApp = new EventEmitter<any>();\r\n\r\n  @Input() profileApps?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n    this.credentials.username=this.validationForm.get('username')?.value;\r\n    this.credentials.password=this.validationForm.get('password')?.value;\r\n\r\n    this.openNewWinForApp.emit(this.credentials);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CodeInputComponentConfig",
            "id": "interface-CodeInputComponentConfig-5f22f7b3e6267a476431defbb7253935d34893bd54a13f961fb15997c2d653231e1cf8995270ecda7fa45cd925f0484c1f77500019c9fc7838b6adb54aabc619",
            "file": "src/stories/inputs/code-input/code-input.component.config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {InjectionToken} from '@angular/core';\r\n\r\nexport const CodeInputComponentConfigToken = new InjectionToken<CodeInputComponentConfig>('CodeInputComponentConfig');\r\n\r\nexport interface CodeInputComponentConfig {\r\n  codeLength?: number;\r\n  inputType?: string;\r\n  inputMode?: string;\r\n  initialFocusField?: number;\r\n  isCharsCode?: boolean;\r\n  isCodeHidden?: boolean;\r\n  isPrevFocusableAfterClearing?: boolean;\r\n  isFocusingOnLastByClickIfFilled?: boolean;\r\n  code?: string | number;\r\n  disabled?: boolean;\r\n  autocapitalize?: string;\r\n}\r\n\r\nexport const defaultComponentConfig: CodeInputComponentConfig = {\r\n  codeLength: 4,\r\n  inputType: 'tel',\r\n  inputMode: 'numeric',\r\n  initialFocusField: undefined,\r\n  isCharsCode: false,\r\n  isCodeHidden: false,\r\n  isPrevFocusableAfterClearing: true,\r\n  isFocusingOnLastByClickIfFilled: false,\r\n  code: undefined,\r\n  disabled: false,\r\n  autocapitalize: undefined\r\n};\r\n",
            "properties": [
                {
                    "name": "autocapitalize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "codeLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "initialFocusField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "inputMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "inputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isCharsCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "isCodeHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isFocusingOnLastByClickIfFilled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isPrevFocusableAfterClearing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConfigurationInput",
            "id": "interface-ConfigurationInput-d4d637601739fbbea743d948994ab221e28c2ebbe9ba50264b0127a671c4b83a2be7faf154379538e4f7b3609377529dd4a3f105f2922e22df1a7ce79079e253",
            "file": "src/stories/inputs/configuration-input/configuration-input.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConfigurationInput {\r\n  id: string;\r\n  name: string;\r\n  title: string;\r\n  state: string;\r\n  icon:  string;\r\n  type:'tadiran.gate.PreviousAlertPassExpDays'        |\r\n       'tadiran.gate.pass-exp-days'                   |\r\n       'tadiran.gate.pin-code-length'                   |\r\n       'tel'                                          |\r\n       'email'                                        |\r\n       'password'                                     |\r\n       'tadiran.gate.ACCServerAddress1'               |\r\n       'tadiran.gate.jwtSecret'                       |\r\n       'spring.jpa.properties.hibernate.dialect'      |\r\n       'spring.datasource.userName'                   |\r\n       'spring.datasource.password'                   |\r\n       'spring.jpa.hibernate.ddl-auto'                |\r\n       'spring.mvc.view.prefix'                       |\r\n       'spring.datasource.driver-class-name'          |\r\n       'tadiran.gate.TSV'                             |\r\n       'tadiran.gate.accVersion'                      |\r\n       'tadiran.gate.jwtExpirationMin'                |\r\n       'spring.datasource.url'                        |\r\n       'message-from-application-properties'          |\r\n       'spring.mvc.servlet.load-on-startup'           |\r\n       'tadiran.gate.jwtRefreshExpirationMin'         |\r\n       'server.port'                                  |\r\n       'tadiran.gate.MailServer'                      |\r\n       'spring.mvc.view.suffix'                       |\r\n       'greetings-message'                            |\r\n       'tadiran.gate.ACCServerAddress2'               ;\r\n  placeholder: string;\r\n  hide: boolean;\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "hide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"tadiran.gate.PreviousAlertPassExpDays\" | \"tadiran.gate.pass-exp-days\" | \"tadiran.gate.pin-code-length\" | \"tel\" | \"email\" | \"password\" | \"tadiran.gate.ACCServerAddress1\" | \"tadiran.gate.jwtSecret\" | \"spring.jpa.properties.hibernate.dialect\" | \"spring.datasource.userName\" | \"spring.datasource.password\" | \"spring.jpa.hibernate.ddl-auto\" | \"spring.mvc.view.prefix\" | \"spring.datasource.driver-class-name\" | \"tadiran.gate.TSV\" | \"tadiran.gate.accVersion\" | \"tadiran.gate.jwtExpirationMin\" | \"spring.datasource.url\" | \"message-from-application-properties\" | \"spring.mvc.servlet.load-on-startup\" | \"tadiran.gate.jwtRefreshExpirationMin\" | \"server.port\" | \"tadiran.gate.MailServer\" | \"spring.mvc.view.suffix\" | \"greetings-message\" | \"tadiran.gate.ACCServerAddress2\"",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-bc4c750143556ecbbc09ed0e6acc1102097b9dba0e86f09c416eb0b4a7babba34fa84d4f5f74ab82a6998e7991c2d4089c3d743c5f14b7cbee0cbef512016b3b",
            "file": "src/app/login2/login-main/login-main.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, Inject, Input, OnInit, Renderer2, ViewChild} from '@angular/core';\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\nimport {AuthService} from \"src/app/_services/auth.service\";\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {TokenStorageService} from \"src/app/_services/token-storage.service\";\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport RegisterForm2Component from \"./register-form2/register-form2.component\";\n//import * as mStoryInput from \"../../../stories/inputs/story-input.stories\";\nimport {ReplacePassForm2Component} from \"./replace-pass-form2/replace-pass-form2.component\";\nimport VerificationForm2Component from \"./verification-form2/verification-form2.component\";\nimport {UserService} from \"../../_services/user.service\";\nimport { workingModeConfiguration } from \"src/app/app.config\"\nimport {EventData} from \"../../_shared/event.class\";\nimport { EventBusService } from 'src/app/_shared/event-bus.service';\nimport {Subscription} from \"rxjs\";\nimport ForgotPassForm2Component from \"./forgot-pass-form2/forgot-pass-form2.component\";\n\n\nexport interface DialogData {\n  username: string;\n  password: string;\n}\n\n\n\n@Component({\n  selector: 'login-main',\n  templateUrl: './login-main.component.html',\n  styleUrls: ['./login-main.component.scss']\n})\nexport class LoginMainComponent implements OnInit {\n\n  public isLoggedIn = false;\n  isLoginFailed = false;\n  loginErrorMessage = '';\n  roles: string[] = [];\n  public isLoading = false;\n  eventBusSub?: Subscription;\n\n\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  storyInputsInOrder: StoryInput[]  = [\n    { /*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez' , hide: false },\n    { /*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password', hide: false   },\n  ];\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = true;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  background?: string;\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Login2Component';\n\n\n  loginForm: FormGroup;\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-page2--primary' : 'storybook-page2--secondary';\n\n    return ['storybook-page2', mode];\n  }\n\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\n\n\n  constructor(private renderer: Renderer2,\n              public forgotPassFormDialog: MatDialog,\n              public registerFormDialog: MatDialog,\n              public replacePassFormDialog: MatDialog,\n              public verificationFormDialog: MatDialog,\n              private eventBusService: EventBusService,\n              public authService: AuthService,\n              public userService: UserService,\n              private tokenStorage: TokenStorageService,\n              private router: Router,\n              private activatedRoute:ActivatedRoute) {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', Validators.minLength(2)),\n      password: new FormControl('', Validators.minLength(2)),\n    });\n\n  }\n\n\n  openForgotPassForm() {\n    const forgotPassFormDialogRef = this.forgotPassFormDialog.open(ForgotPassForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue, email: \"not@inuse.com\"},\n    });\n\n    forgotPassFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The forget password form dialog was closed');\n      if (result.message === 'Successful verification') {\n        //this.setUsernameCurrentFieldValue(result.data.username);\n        //this.setPasswordCurrentFieldValue(result.data.password.toString());\n      }\n    });\n\n    return forgotPassFormDialogRef.afterClosed().toPromise();\n  }\n\n  openRegisterForm() {\n    const registerFormDialogRef = this.registerFormDialog.open(RegisterForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue , password: this.getPasswordCurrentFieldValue},\n    });\n\n    registerFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n      if (result.message === 'Registration Complete') {\n        //this.setUsernameCurrentFieldValue(result.username);\n        //this.setEmailCurrentFieldValue(result.email);\n      }\n    });\n\n    return registerFormDialogRef.afterClosed().toPromise();\n  }\n\n  openReplacePassForm() {\n    const replacePassFormDialogRef = this.replacePassFormDialog.open(ReplacePassForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue , password: this.getPasswordCurrentFieldValue},\n    });\n\n    replacePassFormDialogRef.beforeClosed().subscribe(result => {\n      console.log('The replace password form dialog before closed');\n    },\n      err => {\n        console.log(err.error.message);\n      });\n\n\n    replacePassFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The replace password form dialog after closed');\n      if (result.message === 'Replace Password Complete') {\n        this.setUsernameCurrentFieldValue(result.data.username);\n        this.setPasswordCurrentFieldValue(result.data.password.toString());\n      }\n    });\n\n    return replacePassFormDialogRef.afterClosed().toPromise();\n  }\n\n  openVerificationForm() {\n    const verificationFormDialogRef = this.verificationFormDialog.open(VerificationForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue, email: \"not@inuse.com\"},\n    });\n\n    verificationFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n    });\n\n    return verificationFormDialogRef.afterClosed().toPromise();\n  }\n\n\n  ngOnInit(): void {\n    this.eventBusService.emit(new EventData('is2SVRequired', null));\n\n    this.eventBusSub = this.eventBusService.on('openVerification', () => {\n      this.openVerificationForm();\n    });\n  };\n\n\n\n  get getUsernameCurrentFieldValue(): AbstractControl {\n    return this.loginForm.get('username')?.value;\n  }\n\n  private setUsernameCurrentFieldValue(name: string) {\n    this.loginForm.get('username')?.setValue(name);\n  }\n\n  get getPasswordCurrentFieldValue(): AbstractControl {\n    return this.loginForm.get('password')?.value;\n  }\n\n  private setPasswordCurrentFieldValue(pass: string) {\n    this.loginForm.get('password')?.setValue(pass);\n  }\n\n\n  onSubmit(): void {\n    console.warn('Login Request from login-main!');\n    const { username, password } = this.loginForm.value;\n\n    this.isLoading = true;\n    this.authService.login(username, password).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveRefreshToken(data.refreshToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.profile2();\n      },\n      err => {\n        switch (err.error.message) {\n          case \"Error: A registry process should be made!\":\n            //this.openRegisterForm().then(() => {this.openReplacePassword()});\n            //toPromise((data) => {this.openReplacePassword()});\n            this.openRegisterForm().then(\n              (val) => {\n                console.log(val);\n                switch (val) {\n                  case \"xbutton\":\n                    break;\n                  case \"Registration Complete\":\n                    this.onSubmit();\n                    break;\n                  case undefined:\n                    //this.openReplacePassword();\n                    break;\n                  default:\n                }\n                return 'done2';\n              },\n              (err) => console.error(err));\n            break;\n          case \"User credentials have expired\":\n            this.openReplacePassForm().then(\n              (val) => {\n                console.log(val);\n                switch (val.message) {\n                  case \"xbutton\":\n                    break;\n                  case \"Replace Password Complete\":\n                    this.onSubmit();\n                    break;\n                  case undefined:\n                    //Handle unknown response\n                    break;\n                  default:\n                }\n                return 'done2';\n              },\n              (err) => console.error(err));\n            break;\n          default:\n            this.loginErrorMessage = err.error.message;\n        }\n\n        this.isLoginFailed = true;\n        this.isLoading = false;\n      },\n      () => { this.isLoading = false; })\n  }\n\n\n  reloadPage(): void {\n    this.router.navigate(['/login-main']).then(() => {window.location.reload()});\n  }\n\n  profile2(): void {\n  this.router.navigate(['../profile2'], {relativeTo: this.activatedRoute});\n  }\n\n  configuratin(): void {\n    this.router.navigate(['../profile2/admin2'], {relativeTo: this.activatedRoute});\n  }\n\n  home2(): void {\n  this.router.navigate(['/home']);\n  }\n\n\n\n\n}\n\n/*\n@Component({\n  selector: 'dialog-overview-example-dialog',\n  templateUrl: 'dialog-overview-example-dialog.html',\n})\nexport class DialogOverviewExampleDialog {\n  constructor(\n    public dialogRef: MatDialogRef<DialogOverviewExampleDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n*/\n\n/*\n@Component({\n  selector: 'password-dialog',\n  templateUrl: './password-dialog.html',\n})\nexport class ExtentionDialog {\n  constructor(\n    public dialogRef: MatDialogRef<ExtentionDialog>,\n    @Inject(MAT_DIALOG_DATA) public extensionData: {name: string, password: string;},\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n*/\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-d471874f03f17ffa0d8e0b11bb2c1ecdb504ff2ce0ce0da1defeecf96265a827b58c1dc753a978eaf2672d55e6a611112f3fdb47a9d3d665d7ae74a2fb103264-1",
            "file": "src/app/login2/profile2/portal/portal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"src/app/_services/auth.service\";\nimport {TokenStorageService} from \"src/app/_services/token-storage.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AppConfig, workingModeConfiguration} from \"src/app/app.config\";\nimport {BehaviorSubject, Subscription, throwError} from \"rxjs\";\nimport {UserService} from \"src/app/_services/user.service\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ReplacePassForm2Component} from  \"src/app/login2/login-main/replace-pass-form2/replace-pass-form2.component\";\nimport {EventBusService} from \"src/app/_shared/event-bus.service\";\nimport MyAccountForm2Component from \"../my-account-form2/my-account-form2.component\";\nimport VerificationForm2Component from \"../../login-main/verification-form2/verification-form2.component\";\nimport {EventData} from \"src/app/_shared/event.class\";\n\n\n\n\nexport interface DialogData {\n  username: string;\n  password: string;\n}\n\n\n\n@Component({\n  selector: 'profile2',\n  templateUrl: './portal.component.html',\n  styleUrls: ['./portal.component.scss']\n})\nexport default class PortalComponent implements OnInit {\n\n  currentUser: any;\n  accessToken: any;\n  refreshToken: any;\n  windowObjectReference: any;\n  refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  public isLoading = false;\n  public appConfig: any;\n  private TOKEN_KEY: string;\n  eventBusSub?: Subscription;\n  permittedWebAppList = {\n    realtime: false,\n    scriptDesigner: false,\n    agent: false,\n    aeonixAdmin: false,\n    admin: false\n  };\n\n\n  isNotify(): boolean {\n   return (this.passExp < this.previousAlertPassExp);\n  }\n\n\n  constructor(private authService: AuthService,\n              private userService: UserService,\n              private token: TokenStorageService,\n              private eventBusService: EventBusService,\n              private router: Router,\n              private activatedRoute:ActivatedRoute,\n              public myAccountFormDialog: MatDialog,\n              public replacePassFormDialog: MatDialog,\n              public verificationFormDialog: MatDialog) {\n    this.TOKEN_KEY = AppConfig.endpoints.TOKEN_KEY;\n  }\n\n\n  openMyAccountForm() {\n    const myAccountFormDialogRef = this.myAccountFormDialog.open(MyAccountForm2Component, {\n      data: {currentUser: this.currentUser},\n    });\n\n    myAccountFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n    });\n\n    return myAccountFormDialogRef.afterClosed().toPromise();\n  }\n\n  openReplacePassForm() {\n    const replacePassFormDialogRef = this.replacePassFormDialog.open(ReplacePassForm2Component, {\n      data: {username: this.currentUser.username , password: ''},\n    });\n\n    replacePassFormDialogRef.beforeClosed().subscribe(result => {\n        console.log('The replace password form dialog before closed');\n      },\n      err => {\n        console.log(err.error.message);\n      });\n\n\n    replacePassFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The replace password form dialog after closed');\n      if (result.message === 'Replace Password Complete') {\n        console.log('Replace Password Complete');\n        this.setPassExpAlertData();\n      }\n    });\n\n    return replacePassFormDialogRef.afterClosed().toPromise();\n  }\n\n  openVerificationForm() {\n    const verificationFormDialogRef = this.verificationFormDialog.open(VerificationForm2Component, {\n      data: {username: this.currentUser.username , email: this.currentUser.email},\n    });\n\n    verificationFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n    });\n\n    return verificationFormDialogRef.afterClosed().toPromise();\n  }\n\n\n\n  public passExp: number = 0; // By Days\n  public previousAlertPassExp: number = 0; // By Days\n\n\n  ngOnInit(): void {\n    this.currentUser = this.token.getUser();\n    this.accessToken = this.currentUser.accessToken;\n    this.refreshToken = this.currentUser.refreshToken;\n    this.setPassExpAlertData();\n    this.setPermittedWebAppList();\n    this.is2SVRequired();\n\n    this.eventBusSub = this.eventBusService.on('openChangePassword', () => {\n      this.openReplacePassForm();\n    });\n\n    this.eventBusSub = this.eventBusService.on('openVerification', () => {\n      this.openVerificationForm();\n    });\n\n    this.eventBusSub = this.eventBusService.on('openConfiguration', () => {\n      this.configuratin();\n    });\n\n    this.eventBusSub = this.eventBusService.on('openPortal', () => {\n      this.portal();\n    });\n\n  }\n\n  is2SVRequired() {\n    this.eventBusService.emit(new EventData('is2SVRequired', null));\n  }\n\n  setPassExpAlertData(): void {\n\n    const token = this.token.getToken();\n    if (token)\n      this.authService.getPassExpireDate(token).subscribe(data => {\n        this.passExp = data.passExp;\n        this.previousAlertPassExp = data.previousAlertPassExp;\n        console.log('Password Expire Date: '+this.passExp);\n        console.log('previous Alert To Password Expire Date: '+this.previousAlertPassExp);\n      }, (err) => {\n        console.log('Password Expire Date: update failed');\n        return throwError(err);\n      });\n\n  }\n\n  setPermittedWebAppList(): void {\n    const token = this.token.getToken();\n    if (token)\n      this.authService.getPermittedWebAppList(token).subscribe(permittedWebAppList => {\n        this.permittedWebAppList=(permittedWebAppList);\n        console.log('Permitted web apps list is received from server.');\n      }, (err) => {\n        console.log('Can not get server data defining permitted web apps for user');\n        return throwError(err);\n      });\n  }\n\n  openapp(): void {\n    console.log('window.location.origin.toString():  '+window.location.origin.toString());\n\n    this.router.navigate([]).then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+'/accGCCS/'/*window.location.origin.toString()+\"/profile\"*/); });\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\n    var promise = new Promise((resolve, reject) => {this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML = \"new title\";});\n\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\n\n  }\n\n  public forseRefreshToken(): void {\n\n    if (!this.isLoading) {\n      this.isLoading = true;\n      const token = this.token.getRefreshToken();\n      if (token)\n        this.authService.refreshToken(token).subscribe(\n          data => {\n            this.isLoading = false;\n            this.token.saveToken(data.accessToken);\n            this.token.saveRefreshToken(data.refreshToken);\n            this.refreshTokenSubject.next(data.accessToken);\n            this.currentUser = this.token.getUser();\n            this.accessToken = this.token.getToken();\n            this.refreshToken = this.token.getRefreshToken();\n          },\n          (err) => {\n            this.isLoading = false;\n\n            this.token.signOut();\n            return throwError(err);\n          }\n        );\n    }\n  }\n\n  public async openNewTabForApp(appRequest: string[]) {\n    const [webapp, webappURLPrefix] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n\n    if (!this.isLoading) {\n      const token = this.token.getRefreshToken();\n      if (token) {\n\n        //const timeout = new Promise((res) => setTimeout(() => res(\"openNewTabForApp - timeout!\"), 5000));\n        const timeout = (prom: Promise<any>, time: number, exception: Symbol) => {\n          let timer: any;\n          return Promise.race([\n            prom,\n            new Promise((_r, rej) => timer = setTimeout(rej, time, exception))\n          ]).finally(() => clearTimeout(timer));\n        }\n\n\n        const promise = async () => {\n          new Promise<any>((resolve, reject) => {\n            console.log('Spinner Start.');\n            this.isLoading = true;\n            return this.authService.webapptab(token, webapp).toPromise()\n              .then((val: any) => {\n                console.log('Request approved by the server.');\n                newAccessToken = (val.accessToken);\n                newRefreshToken = (val.refreshToken);\n                newCurrentUser = (val);\n              })\n              .then((result) => {\n                  this.router.navigate([])\n                    .then(result => {\n                      this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers + webappURLPrefix);\n                    })\n                    .then((result) => {\n                        console.log('Plant the secret ingredient.');\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));\n                      },\n                      (err) => {\n                        console.log('failed loading the app webpage.');\n                        reject(throwError(err));\n                      })\n                },\n                (err) => {\n                  console.log('cant get a server request appropriate response for opening this webpage ')\n                  reject(throwError(err));\n                })\n              .then(() => {\n                  console.log('Spinner Stop.');\n                  this.isLoading = false;\n                  resolve(\"Success\");\n                },\n                (err) => {reject(throwError(err))});\n\n          });\n        }\n\n        const timeoutError = Symbol();\n        try {\n\n          await timeout(promise(), 5000, timeoutError)\n            .then(() => {\n              this.isLoading = false;\n              console.log('openNewTabForApp: open tab app successfully finished');\n            });\n        }catch (e) {\n          if (e === timeoutError) {\n            // handle timeout\n            console.log('timeoutError: '+e.error);\n          }else {\n            // other error\n            console.log('Error: '+e.error);\n            throw e;\n          }\n        }\n\n      }\n    }\n  }\n\n  public async openNewWinForApp(appRequest: string[]) {\n    const [webapp, webappURLPrefix] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n\n    if (!this.isLoading) {\n      const token = this.token.getRefreshToken();\n      if (token) {\n\n\n        const timeout = (prom: Promise<any>, time: number, exception: Symbol) => {\n          let timer: any;\n          return Promise.race([\n            prom,\n            new Promise((_r, rej) => timer = setTimeout(rej, time, exception))\n          ]).finally(() => clearTimeout(timer));\n        }\n\n\n        const promise = async () => {\n          new Promise<any>((resolve, reject) => {\n            console.log('Spinner Start.');\n            this.isLoading = true;\n            return this.authService.webapptab(token, webapp).toPromise()\n              .then((val: any) => {\n                console.log('Request approved by the server.');\n                newAccessToken = (val.accessToken);\n                newRefreshToken = (val.refreshToken);\n                newCurrentUser = (val);\n              })\n              .then((result) => {\n                  console.log('Opening new tab/win for the requested page.');\n                  this.router.navigate([])\n                    .then(result => {\n                      console.log('Insert url and loading the page.');\n                      this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix+'start.html',\n                        'C-Sharpcorner', 'scrollbars=no');\n                    })\n                    .then((result) => {\n                        console.log('Plant the secret ingredient.');\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));\n                      },\n                      (err) => {\n                        console.log('failed loading the app webpage.');\n                        reject(throwError(err));\n                      })\n                },\n                (err) => {\n                  console.log('cant get a server request appropriate response for opening this webpage ')\n                  reject(throwError(err));\n                })\n              .then(() => {\n                  console.log('Spinner Stop.');\n                  this.isLoading = false;\n                  resolve(\"Success\");\n                },\n                (err) => {reject(throwError(err))});\n          });\n        }\n\n\n        const timeoutError = Symbol();\n        try {\n          await timeout(promise(), 5000, timeoutError)\n        }catch (e) {\n          if (e === timeoutError) {\n            // handle timeout\n            console.log('timeoutError: ' + e.error);\n          } else {\n            // other error\n            console.log('Error: ' + e.error);\n            throw e;\n          }\n        }finally {\n          console.log('openNewTabForApp: open tab app successfully finished');\n        }\n\n\n\n      }\n    }\n  }\n\n  /*public openNewWinForApp(appRequest: string[]): void {\n    //webapp: string, webappURLPrefix: string\n    const [ webapp, webappURLPrefix ] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n    if (!this.isLoading) {\n      this.isLoading = true;\n      const token = this.token.getRefreshToken();\n      if (token)\n        this.authService.webapptab(token, webapp)\n          .subscribe(\n            data => {\n              let promise = new Promise<void>((resolve, reject) => {\n                newAccessToken = (data.accessToken);\n                newRefreshToken = (data.refreshToken);\n                newCurrentUser = (data);\n                setTimeout(() => {\n                  console.log(\"Failed open new window\");\n                  resolve();//() => {resolve();}\n                }, 5000);\n              })\n              promise.then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix+'start.html',\n                  'C-Sharpcorner', 'scrollbars=no');})\n                .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n                    this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n                    this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\n            (err) => { this.isLoading = false;\n              return throwError(err);})\n    },\n    (error) => {\n              this.isLoading = false;\n              return throwError(error.error);\n            }, () => {this.isLoading = false;})\n    }\n  }*/\n\n  configuratin(): void {\n    this.router.navigate(['../admin2'], {relativeTo: this.activatedRoute});\n  }\n\n  portal(): void {\n    console.log(this.activatedRoute.toString())\n    this.router.navigate(['../'], {relativeTo: this.activatedRoute});\n  }\n\n\n}\n\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DialogData-1"
        },
        {
            "name": "DigitcodeInput",
            "id": "interface-DigitcodeInput-2d32594f54a8daaf0efea14e604ddf343b5dc7f00842ffd671e2e0771897887fdbcc9cc36cc3ceb287bdee4bf67895b0053017de0c8a7228fb550d8cbeb553a8",
            "file": "src/stories/inputs/digitcode-input/digitcode-input.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DigitcodeInput {\r\n  id: number;\r\n  val: number;\r\n  empty: boolean;\r\n  boxStyle?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "boxStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "empty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "val",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GenericEvent",
            "id": "interface-GenericEvent-a133f0b31752ae228c422f54d65ed9e29cd9779e7ed4dedb6973e25e3a1b28082add8d1c117e76954aefa7056e78df2fd8b54def56753cfee0a09a6c62152a88",
            "file": "src/stories/inputs/code-input/code-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewChecked,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChildren\n} from '@angular/core';\nimport {\n  CodeInputComponentConfig,\n  CodeInputComponentConfigToken,\n  defaultComponentConfig\n} from './code-input.component.config';\nimport { Subscription } from 'rxjs';\nimport {DigitcodeInputComponent} from \"../digitcode-input/digitcode-input.component\";\n\nenum InputState {\n  ready = 0,\n  reset = 1\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\ninterface GenericEvent<T> extends Omit<Event, 'target'> {\n  target: T;\n}\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: ['./code-input.component.scss']\n})\nexport class CodeInputComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy, AfterViewChecked, CodeInputComponentConfig {\n\n  @ViewChildren('storyInput') storyInputsList !: QueryList<ElementRef>;\n  @ViewChildren('storyInput') inputsList !: QueryList<DigitcodeInputComponent>;\n  //inputsList !: List<ElementRef>;\n  //= this.storyInputsList.map((e) => { e.nativeElement.input});\n\n\n  @Input() codeLength !: number;\n  @Input() inputType !: string;\n  @Input() inputMode !: string;\n  @Input() initialFocusField?: number;\n  /** @deprecated Use isCharsCode prop instead. */\n  @Input() isNonDigitsCode = false;\n  @Input() isCharsCode !: boolean;\n  @Input() isCodeHidden !: boolean;\n  @Input() isPrevFocusableAfterClearing !: boolean;\n  @Input() isFocusingOnLastByClickIfFilled !: boolean;\n  @Input() code ?: string | number;\n  @Input() disabled !: boolean;\n  @Input() autocapitalize ?: string;\n\n  @Output() readonly codeChanged = new EventEmitter<string>();\n  @Output() readonly codeCompleted = new EventEmitter<string>();\n\n  public placeholders: number[] = [];\n\n  private inputs: HTMLInputElement[] = [];\n  private inputsStates: InputState[] = [];\n  private inputsListSubscription !: Subscription;\n\n  // tslint:disable-next-line:variable-name\n  private _codeLength !: number;\n  private state = {\n    isFocusingAfterAppearingCompleted: false,\n    isInitialFocusFieldEnabled: false\n  };\n\n  constructor(@Optional() @Inject(CodeInputComponentConfigToken) config?: CodeInputComponentConfig) {\n    Object.assign(this, defaultComponentConfig);\n\n    if (!config) {\n      return;\n    }\n\n    // filtering for only valid config props\n    for (const prop in config) {\n      if (!config.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      if (!defaultComponentConfig.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      // @ts-ignore\n      this[prop] = config[prop];\n    }\n  }\n\n  /**\n   * Life cycle\n   */\n\n  ngOnInit(): void {\n    // defining the state\n    this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\n    // initiating the code\n    this.onCodeLengthChanges();\n  }\n\n  ngAfterViewInit(): void {\n    // initiation of the inputs\n    this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\n    this.onInputsListChanges(this.inputsList);\n  }\n\n  ngAfterViewChecked(): void {\n    this.focusOnInputAfterAppearing();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.code) {\n      this.onInputCodeChanges();\n    }\n    if (changes.codeLength) {\n      this.onCodeLengthChanges();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.inputsListSubscription) {\n      this.inputsListSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Methods\n   */\n\n  reset(isChangesEmitting = false): void {\n    // resetting the code to its initial value or to an empty value\n    this.onInputCodeChanges();\n\n    if (this.state.isInitialFocusFieldEnabled) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.focusOnField(this.initialFocusField!);\n    }\n\n    if (isChangesEmitting) {\n      this.emitChanges();\n    }\n  }\n\n  focusOnField(index: number): void {\n    if (index >= this._codeLength) {\n      throw new Error('The index of the focusing input box should be less than the codeLength.');\n    }\n\n    this.inputs[index].focus();\n  }\n\n  onClick(e: any): void {\n    // handle click events only if the the prop is enabled\n    if (!this.isFocusingOnLastByClickIfFilled) {\n      return;\n    }\n\n    const target = e.target;\n    const last = this.inputs[this._codeLength - 1];\n    // already focused\n    if (target === last) {\n      return;\n    }\n\n    // check filling\n    const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\n    if (!isFilled) {\n      return;\n    }\n\n    // focusing on the last input if is filled\n    setTimeout(() => last.focus());\n  }\n\n\n\n  onInput(e: GenericEvent<HTMLInputElement>, i: number): void {\n    const target = e.target;\n    const value = /*e.data ||*/ target.value;\n\n    if (this.isEmpty(value)) {\n      return;\n    }\n\n    // only digits are allowed if isCharsCode flag is absent/false\n    if (!this.canInputValue(value)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setInputValue(target, null);\n      this.setStateForInput(target, InputState.reset);\n      return;\n    }\n\n    const values = value.toString().trim().split('');\n    for (let j = 0; j < values.length; j++) {\n      const index = j + i;\n      if (index > this._codeLength - 1) {\n        break;\n      }\n\n      this.setInputValue(this.inputs[index], values[j]);\n    }\n    this.emitChanges();\n\n    const next = i + values.length;\n    if (next > this._codeLength - 1) {\n      target.blur();\n      return;\n    }\n\n    this.inputs[next].focus();\n  }\n\n  onPaste(e: ClipboardEvent, i: number): void {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\n\n    if (this.isEmpty(data)) {\n      return;\n    }\n\n    // Convert paste text into iterable\n    // tslint:disable-next-line:no-non-null-assertion\n    const values = data!.split('');\n    let valIndex = 0;\n\n    for (let j = i; j < this.inputs.length; j++) {\n      // The values end is reached. Loop exit\n      if (valIndex === values.length) {\n        break;\n      }\n\n      const input = this.inputs[j];\n      const val = values[valIndex];\n\n      // Cancel the loop when a value cannot be used\n      if (!this.canInputValue(val)) {\n        this.setInputValue(input, null);\n        this.setStateForInput(input, InputState.reset);\n        return;\n      }\n\n      this.setInputValue(input, val.toString());\n      valIndex++;\n    }\n\n    this.inputs[i].blur();\n    this.emitChanges();\n  }\n\n  async onKeydown(e: any, i: number): Promise<void> {\n    const target = e.target;\n    const isTargetEmpty = this.isEmpty(target.value);\n    const prev = i - 1;\n\n    // processing only the backspace and delete key events\n    const isBackspaceKey = await this.isBackspaceKey(e);\n    const isDeleteKey = this.isDeleteKey(e);\n    if (!isBackspaceKey && !isDeleteKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this.setInputValue(target, null);\n    if (!isTargetEmpty) {\n      this.emitChanges();\n    }\n\n    // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\n    if (prev < 0 || isDeleteKey) {\n      return;\n    }\n\n    if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\n      this.inputs[prev].focus();\n    }\n  }\n\n  private onInputCodeChanges(): void {\n    if (!this.inputs.length) {\n      return;\n    }\n\n    if (this.isEmpty(this.code)) {\n      this.inputs.forEach((input: HTMLInputElement) => {\n        this.setInputValue(input, null);\n      });\n      return;\n    }\n\n    // tslint:disable-next-line:no-non-null-assertion\n    const chars = this.code!.toString().trim().split('');\n    // checking if all the values are correct\n    let isAllCharsAreAllowed = true;\n    for (const char of chars) {\n      if (!this.canInputValue(char)) {\n        isAllCharsAreAllowed = false;\n        break;\n      }\n    }\n\n    this.inputs.forEach((input: HTMLInputElement, index: number) => {\n      const value = isAllCharsAreAllowed ? chars[index] : null;\n      this.setInputValue(input, value);\n    });\n  }\n\n  private onCodeLengthChanges(): void {\n    if (!this.codeLength) {\n      return;\n    }\n\n    this._codeLength = this.codeLength;\n    if (this._codeLength > this.placeholders.length) {\n      const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\n      this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\n    }\n    else if (this._codeLength < this.placeholders.length) {\n      this.placeholders.splice(this._codeLength);\n    }\n  }\n\n  private onInputsListChanges(list: QueryList<DigitcodeInputComponent>): void {\n    if (list.length > this.inputs.length) {\n      const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\n      this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.input.nativeElement));\n      const states = Array(inputsToAdd.length).fill(InputState.ready);\n      this.inputsStates.splice(this.inputsStates.length, 0, ...states);\n    }\n    else if (list.length < this.inputs.length) {\n      this.inputs.splice(list.length);\n      this.inputsStates.splice(list.length);\n    }\n\n    // filling the inputs after changing of their count\n    this.onInputCodeChanges();\n  }\n\n  private focusOnInputAfterAppearing(): void {\n    if (!this.state.isInitialFocusFieldEnabled) {\n      return;\n    }\n\n    if (this.state.isFocusingAfterAppearingCompleted) {\n      return;\n    }\n\n    // tslint:disable-next-line:no-non-null-assertion\n    this.focusOnField(this.initialFocusField!);\n    // tslint:disable-next-line:no-non-null-assertion\n    //this.state.isFocusingAfterAppearingCompleted = (document.activeElement === this.inputs[this.initialFocusField!]);\n  }\n\n  private emitChanges(): void {\n    setTimeout(() => this.emitCode(), 50);\n  }\n\n  private emitCode(): void {\n    const code = this.getCurrentFilledCode();\n\n    this.codeChanged.emit(code);\n\n    if (code.length >= this._codeLength) {\n      this.codeCompleted.emit(code);\n    }\n  }\n\n  private getCurrentFilledCode(): string {\n    let code = '';\n\n    for (const input of this.inputs) {\n      if (!this.isEmpty(input.value)) {\n        code += input.value;\n      }\n    }\n\n    return code;\n  }\n\n  private isBackspaceKey(e: any): Promise<boolean> {\n    const isBackspace = (e.key && e.key.toLowerCase() === 'backspace') || (e.keyCode && e.keyCode === 8);\n    if (isBackspace) {\n      return Promise.resolve(true);\n    }\n\n    // process only key with placeholder keycode on android devices\n    if (!e.keyCode || e.keyCode !== 229) {\n      return Promise.resolve(false);\n    }\n\n    return new Promise<boolean>((resolve) => {\n      setTimeout(() => {\n        const input = e.target;\n        const isReset = this.getStateForInput(input) === InputState.reset;\n        if (isReset) {\n          this.setStateForInput(input, InputState.ready);\n        }\n        // if backspace key pressed the caret will have position 0 (for single value field)\n        resolve(input.selectionStart === 0 && !isReset);\n      });\n    });\n  }\n\n  private isDeleteKey(e: any): boolean {\n    return (e.key && e.key.toLowerCase() === 'delete') || (e.keyCode && e.keyCode === 46);\n  }\n\n  private setInputValue(input: HTMLInputElement, value: any): void {\n    const isEmpty = this.isEmpty(value);\n    const valueClassCSS = 'has-value';\n    const emptyClassCSS = 'empty';\n    if (isEmpty) {\n      input.value = '';\n      input.classList.remove(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement!.classList.add(emptyClassCSS);\n    }\n    else {\n      input.value = value;\n      input.classList.add(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement!.classList.remove(emptyClassCSS);\n    }\n  }\n\n  private canInputValue(value: any): boolean {\n    if (this.isEmpty(value)) {\n      return false;\n    }\n\n    const isDigitsValue = /^[0-9]+$/.test(value.toString());\n    return isDigitsValue || (this.isCharsCode || this.isNonDigitsCode);\n  }\n\n  private setStateForInput(input: HTMLInputElement, state: InputState): void {\n    const index = this.inputs.indexOf(input);\n    if (index < 0) {\n      return;\n    }\n\n    this.inputsStates[index] = state;\n  }\n\n  private getStateForInput(input: HTMLInputElement): InputState | undefined {\n    const index = this.inputs.indexOf(input);\n    return this.inputsStates[index];\n  }\n\n  private isEmpty(value: any): boolean {\n    return  value === null || value === undefined || !value.toString().length;\n  }\n}\n",
            "properties": [
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Omit"
        },
        {
            "name": "GroupForm",
            "id": "interface-GroupForm-a8bf6f9f3ee48696a84f647daee0614f748fb21b7a6708379b17683b2aa56a9924b6bb8d1318b797febc5741d200455f940135f9f492167f4f911dd6a751671e",
            "file": "src/stories/inputs/account-input/account-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, HostBinding, Inject, Injector, Input, OnInit, Output} from '@angular/core';\r\nimport { AccountInput } from './account-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-account-input',\r\n  templateUrl: './account-input.component.html',\r\n  styleUrls: ['./account-input.scss']\r\n})\r\nexport class AccountInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: AccountInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Output() changePassword: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n    return this.currentForm.get(this.storyInput?.title.toString())!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GroupForm",
            "id": "interface-GroupForm-be96e96238929dff8bfd928c5cf8c038818005e86dff9e7ae41845ab644de31e2c93a4eea338864d6eef08cb6529ee0398325c2904ba2aaa22003b4fdfa926cc-1",
            "file": "src/stories/inputs/configuration-input/configuration-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { ConfigurationInput } from './configuration-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-configuration-input',\r\n  templateUrl: './configuration-input.component.html',\r\n  styleUrls: ['./configuration-input.scss']\r\n})\r\nexport class ConfigurationInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: ConfigurationInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Output() changePassword: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  @ViewChild('rangeInput', { static: false }) Input?: ElementRef;\r\n\r\n  @ViewChild('ddlauto') ddlauto!: ElementRef;\r\n  selectedTeam = '';\r\n  onSelectedDdlAuto():void {\r\n    this.selectedTeam = this.ddlauto.nativeElement.value;\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler?.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler?.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler?.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler?.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler?.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler?.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler?.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler?.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler?.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler?.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler?.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler?.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl | null{\r\n\r\n    return this.currentForm.get(this.storyInput?.name)!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GroupForm-1"
        },
        {
            "name": "GroupForm",
            "id": "interface-GroupForm-8e93df7450b0d41cbefef3332e618f0b37ffd90aee1973f2c93d546ea00c01c5600a7b22dfea48dd1bd3faa2d72504444a3e14e57cfbcee4141e3263f197353f-2",
            "file": "src/stories/inputs/digitcode-input/digitcode-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component, ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  OnInit,\r\n  Output, ViewChild,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { DigitcodeInput } from './digitcode-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-digitcode-input',\r\n  templateUrl: './digitcode-input.component.html',\r\n  styleUrls: ['./digitcode-input.scss']\r\n})\r\nexport class DigitcodeInputComponent implements OnInit{\r\n\r\n  @Input() digitInput?: DigitcodeInput;\r\n\r\n  @ViewChild('input') public input!: ElementRef<HTMLInputElement>;\r\n  @Input() inputType !: string;\r\n  @Input() inputMode !: string;\r\n  @Input() disabled !: boolean;\r\n  @Input() autocapitalize ?: string;\r\n  @Input() isFirst ?: boolean;\r\n  @Input() isLast ?: boolean;\r\n  @Output() onClick: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() onPaste: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onKeydown: EventEmitter<Event> = new EventEmitter<Event>();\r\n  value: string = '';\r\n\r\n\r\n  public get classes(): string[] {\r\n\r\n    //const isFirst = (this.index === 1) ? 'storybook-digitcode-input--first' : 'storybook-digitcode-input--notFirst';\r\n\r\n    return ['storybook-digitcode-input'];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "GroupForm-2"
        },
        {
            "name": "GroupForm",
            "id": "interface-GroupForm-c397e4cd1940e9a73068ce4006013135087918cff55397ff58e25051cbba233af1f4d533565159dc6b11b8b782100f685bb6a043362efd78ffed9dfef2fa800b-3",
            "file": "src/stories/inputs/input/story-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, HostBinding, Inject, Injector, Input, OnInit, Output} from '@angular/core';\r\nimport { StoryInput } from './story-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-input',\r\n  templateUrl: './story-input.component.html',\r\n  styleUrls: ['./story-input.scss']\r\n})\r\nexport class StoryInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: StoryInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  showPassChange(): void {\r\n    this.storyInput.type = (this.storyInput?.type == 'password' ? 'text' : 'password')\r\n  }\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n    return this.currentForm.get(this.storyInput?.title.toString())!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "GroupForm-3"
        },
        {
            "name": "MyAccountData",
            "id": "interface-MyAccountData-ce30a948b4546db8ab631eeff068f54ee2d5f3e3c05470bb0a75ce407d97a56c77b13c65b6d18ffc57b839d03011d01dc82dc4caa3b0ecc75abb5bcde85f7466",
            "file": "src/app/login2/profile2/my-account-form2/my-account-form2.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Inject, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {PasswordValidators} from \"../../login-main/replace-pass-form2/replace-pass-form2.component\";\r\nimport MyAccountFormComponent from \"src/stories/forms/my-account-form/my-account-form.component\";\r\nimport {AccountInput} from \"src/stories/inputs/account-input/account-input.model\";\r\nimport {EventData} from \"src/app/_shared/event.class\";\r\nimport {EventBusService} from \"src/app/_shared/event-bus.service\";\r\nimport {throwError} from \"rxjs\";\r\nimport {TokenStorageService} from \"src/app/_services/token-storage.service\";\r\nimport {UserService} from \"src/app/_services/user.service\";\r\n\r\n\r\nexport interface MyAccountData {\r\n  currentUser: any;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'my-account-form2',\r\n  templateUrl: './my-account-form2.component.html',\r\n  styleUrls: ['./my-account-form2.component.css']\r\n})\r\nexport default class MyAccountForm2Component implements OnInit {\r\n  registerForm: FormGroup;\r\n  isRegSuccess = false;\r\n  isRegFailed = false;\r\n  submitted = false;\r\n  regErrorMessage: any;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  @ViewChild('username', { static: false }) userField?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  accountDetails: any;\r\n  closeResult = '';\r\n\r\n\r\n\r\n  @Output() validateMail: EventEmitter<String> = new EventEmitter();\r\n\r\n  storyInputsInOrder: AccountInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '1', title: this.data.currentUser.username, state: 'USER NAME', icon: '', type: 'enable-profile-picture', placeholder: '', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n  ];\r\n\r\n  constructor(private eventBusService: EventBusService,\r\n              private token: TokenStorageService,\r\n              private authService: AuthService,\r\n              private tokenStorageService: TokenStorageService,\r\n              private renderer: Renderer2,\r\n              public dialogRef: MatDialogRef<MyAccountFormComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: MyAccountData) {\r\n    this.registerForm = new FormGroup({\r\n      username: new FormControl(''),\r\n      email: new FormControl('email', Validators.email),\r\n      phone: new FormControl('0544444444', PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9 ]{8})\"), {requiresPhoneChars: true}))\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAccountDetails();\r\n    /*this.userService.getAccountDetails().subscribe(\r\n      data => { this.accountDetails = data; },\r\n      err => { this.accountDetails = JSON.parse(err.error).message; }\r\n    );*/\r\n  }\r\n\r\n  getAccountDetails(): void {\r\n\r\n    const token = this.token.getToken();\r\n    if (token)\r\n      this.authService.getAccountDetails(token).subscribe(accountDetails => {\r\n        this.accountDetails=(accountDetails);\r\n        this.setUsername(accountDetails.username);\r\n        this.setEmail(accountDetails.email);\r\n        this.setPhone(accountDetails.phone);\r\n        console.log('Account Details is received from server.');\r\n      }, (err) => {\r\n        console.log('Can not get user account details');\r\n        return throwError(err);\r\n      });\r\n\r\n  }\r\n\r\n  doLogout(): void {\r\n    console.log(\"logging out\")\r\n    this.eventBusService.emit(new EventData('logout', null));\r\n  }\r\n\r\n  openChangePassword() {\r\n    this.eventBusService.emit(new EventData('openChangePassword', null));\r\n  }\r\n\r\n  openUser() {\r\n    this.eventBusService.emit(new EventData('openConfiguration', null));\r\n    this.dialogRef.close('Open Configuration Tools');\r\n  }\r\n\r\n  displayConfigButton(): boolean {\r\n    return this.tokenStorageService.isSupervisorAdmin();\r\n  }\r\n\r\n\r\n  onSubmit(): void {\r\n    if (this.isRegSuccess) {\r\n      this.dialogRef.close('Registration Complete');\r\n    }\r\n    else {\r\n      this.submitted = true;\r\n      const { username, password, email, phone } = this.registerForm.getRawValue();\r\n\r\n      this.authService.registerForm(username, email, password, phone).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.isRegSuccess = true;\r\n          this.isRegFailed = false;\r\n          this.errorFieldSubmitted = {} ;\r\n          this.apiResponse.error = false;\r\n          this.apiResponse.message = 'Successful registration';\r\n        },\r\n        error => {\r\n          const errorResponse = JSON.parse(error.error);\r\n          this.apiResponse.error = true;\r\n          this.apiResponse.message = 'Registration error';\r\n          this.regErrorMessage = errorResponse;\r\n          this.isRegFailed = true;\r\n          if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n            this.errorFieldSubmitted = errorResponse.data;\r\n          }\r\n        },\r\n        () => {\r\n          console.log(\"Registration Complete\");}\r\n      );\r\n    }\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.registerForm.get('username')!;\r\n  }\r\n\r\n\r\n  setUsername(name: string): void {\r\n    this.registerForm.get('username')?.setValue(name)!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.registerForm.get('email')!;\r\n  }\r\n\r\n  setEmail(email: string): void {\r\n    return this.registerForm.get('email')?.setValue(email);\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.registerForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.registerForm.get('phone')!;\r\n  }\r\n\r\n  setPhone(phone: string): void {\r\n    return this.registerForm.get('phone')?.setValue(phone);\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PopoverOptions",
            "id": "interface-PopoverOptions-72e8120835475614ee65912cb525afa7957bfb82ad7aff5b87e512a5533dec6c87aa901cfe3d238f1d3700590bf09d135078619ba01e814713f200e51fce1459",
            "file": "src/stories/directive/popover.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PopoverOptions {\r\n  content: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Profile2Expose",
            "id": "interface-Profile2Expose-c40e7eaec6c2c04aa2759e63dc53cec6d48b01804fc39b1088df7b70aa90c96a07a676f5171d198d40eec5c57ea64c908f179fe8616ef876e13ddf7380471378",
            "file": "src/stories/app-menu/app-menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../inputs/input/story-input.model\";\r\nimport { AuthService } from '../../app/_services/auth.service';\r\nimport {MdbModalRef} from \"mdb-angular-ui-kit/modal\";\r\n//import {Profile2Expose} from \"src/app/profile2/profile2.interface\";\r\n\r\nexport interface Profile2Expose {\r\n  agent: boolean;\r\n  realtime: boolean;\r\n  scriptDesigner: boolean;\r\n  admin: boolean;\r\n  aeonixAdmin: boolean;\r\n}\r\n\r\nexport interface AeonixAppCenterForm {\r\n  username: null, //new FormControl('ea2', Validators.min(2)),\r\n  password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-app-menu',\r\n  templateUrl: './app-menu.component.html',\r\n  styleUrls: ['./app-menu.css'],\r\n})\r\nexport class AppMenuComponent implements OnInit {\r\n\r\n  /*form: AeonixAppCenterForm = {\r\n    username: null,     //new FormControl('ea2', Validators.min(2)),\r\n    password: null      //new FormControl('zaqwsx', Validators.min(2))\r\n  };*/\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  constructor() {\r\n    this.validationForm = new FormGroup({\r\n      username: new FormControl('Telecom2', Validators.minLength(2)),\r\n      //email: new FormControl(null, Validators.email),\r\n      password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n      //phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  validationForm: FormGroup;\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() openNewWinForApp = new EventEmitter<any>();\r\n\r\n  @Output() openNewTabForApp = new EventEmitter<any>();\r\n\r\n  @Input() profileApps?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n    this.credentials.username=this.validationForm.get('username')?.value;\r\n    this.credentials.password=this.validationForm.get('password')?.value;\r\n\r\n    this.openNewWinForApp.emit(this.credentials);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "admin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "aeonixAdmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "agent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "realtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "scriptDesigner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Prop",
            "id": "interface-Prop-d82ea1e753a2e22e615d42fd771e2f3a0dfeb3a3465ff5fdf3831eaf5f2eee630014beaeabb3ad6e5af03c64ec81ef3eec1d8240f0d1081c0b2a3aa0ed625286",
            "file": "src/app/login2/profile2/board-admin2/board-admin2.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, EventEmitter,Inject, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { UserService } from 'src/app/_services/user.service';\r\nimport {AuthService} from \"src/app/_services/auth.service\";\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {ConfigurationInput} from \"../../../../stories/inputs/configuration-input/configuration-input.model\";\r\nimport {EventBusService} from \"../../../_shared/event-bus.service\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport MyAccountFormComponent from \"../../../../stories/forms/my-account-form/my-account-form.component\";\r\nimport * as mStoryInput from \"../../../../stories/inputs/configuration-input/configuration-input.stories\";\r\nimport {PasswordValidators} from \"../../login-main/replace-pass-form2/replace-pass-form2.component\";\r\nimport {throwError} from \"rxjs\";\r\nimport {EventData} from \"../../../_shared/event.class\";\r\nimport {MyAccountData} from \"../my-account-form2/my-account-form2.component\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n\r\nexport interface Prop {\r\n  propName: String;\r\n  propValue: String;\r\n\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-board-admin2',\r\n  templateUrl: './board-admin2.component.html',\r\n  styleUrls: ['./board-admin2.component.css']\r\n})\r\nexport class BoardAdmin2Component implements OnInit {\r\n  configurationForm: FormGroup;\r\n  isRegSuccess = false;\r\n  isRegFailed = false;\r\n  submitted = false;\r\n  regErrorMessage: any;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  @ViewChild('username', { static: false }) userField?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  configurationData: any;\r\n  closeResult = '';\r\n\r\n  properties: Array<Prop>= [];\r\n\r\n\r\n\r\n\r\n\r\n  @Output() validateMail: EventEmitter<String> = new EventEmitter();\r\n\r\n  storyInputsInOrder: ConfigurationInput[]  = [\r\n    {...mStoryInput.PassExpDays.args?.['storyInput'], id: '1'  },\r\n    {...mStoryInput.PreviousAlertPassExpDays.args?.['storyInput'], id: '2'  },\r\n    {...mStoryInput.TSV.args?.['storyInput'], id: '3'  },\r\n    {...mStoryInput.DdlAuto.args?.['storyInput'], id: '4'  },\r\n  ];\r\n\r\n  constructor(private eventBusService: EventBusService,\r\n              private token: TokenStorageService,\r\n              private authService: AuthService,\r\n              private router: Router,\r\n              private activatedRoute:ActivatedRoute,\r\n              /*public dialogRef: MatDialogRef<MyAccountFormComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: MyAccountData*/) {\r\n    this.configurationForm = new FormGroup({\r\n      tadiran_gate_passExpDays: new FormControl(22),\r\n      tadiran_gate_PreviousAlertPassExpDays: new FormControl(15),\r\n      tadiran_gate_TSV: new FormControl(false),/**/\r\n      spring_jpa_hibernate_ddlAuto: new FormControl('create'),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getConfigurationData();\r\n    /*this.userService.getAccountDetails().subscribe(\r\n      data => { this.accountDetails = data; },\r\n      err => { this.accountDetails = JSON.parse(err.error).message; }\r\n    );*/\r\n  }\r\n\r\n\r\n  // Change name of property Ex. \"tadiran.gate.pass-exp-days\" => \"tadiran_gate_passExpDays\"\r\n  changeNameToField(propName: string) {\r\n    return propName.replace(/\\./gi,'_')\r\n      .split(\"-\").map(function(input){return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : ''}).join(\"\");\r\n  }\r\n\r\n  getConfigurationData(): void {\r\n    //let prop: any;\r\n    const token = this.token.getToken();\r\n    if (token)\r\n      this.authService.getConfigurationData(token).subscribe(configurationData => {\r\n        this.configurationData=configurationData;\r\n\r\n        this.properties = (this.configurationData.prop as Array<Prop>);\r\n        this.properties.forEach((p ) => {\r\n          let configInput = this.storyInputsInOrder.find(configInput => configInput.type.match(p.propName.valueOf().toString()));\r\n          if (configInput != null) {\r\n            let pn = p.propName.replace(/\\./gi,'_');\r\n            this.configurationForm.get(configInput.name)?.setValue(p.propValue);\r\n            console.log(\"propValue:   \"+p.propValue);\r\n          }\r\n          //let prop: new Prop\r\n        });\r\n\r\n        console.log('Account Details is received from server.');\r\n      }, (err) => {\r\n        console.log('Can not get user account details');\r\n        return throwError(err);\r\n      });\r\n\r\n  }\r\n\r\n  doLogout(): void {\r\n    console.log(\"logging out\");\r\n    this.eventBusService.emit(new EventData('logout', null));\r\n  }\r\n\r\n  openChangePassword() {\r\n    this.eventBusService.emit(new EventData('openChangePassword', null));\r\n  }\r\n\r\n  returnPortal() {\r\n    //todo: display warn message to user - changes will not be saved!\r\n    console.log(\"openPortal\");\r\n    this.router.navigate(['../'], {relativeTo: this.activatedRoute});\r\n    //this.eventBusService.emit(new EventData('openPortal', null));\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.isRegSuccess) {\r\n      //todo: Display confirmation message - changes have been applied!\r\n    }\r\n    else {\r\n      this.submitted = true;\r\n      const { username, password, email, phone } = this.configurationForm.getRawValue();\r\n\r\n\r\n      this.authService.setConfigurationData(username).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.isRegSuccess = true;\r\n          this.isRegFailed = false;\r\n          this.errorFieldSubmitted = {} ;\r\n          this.apiResponse.error = false;\r\n          this.apiResponse.message = 'Successful registration';\r\n        },\r\n        error => {\r\n          const errorResponse = JSON.parse(error.error);\r\n          this.apiResponse.error = true;\r\n          this.apiResponse.message = 'Registration error';\r\n          this.regErrorMessage = errorResponse;\r\n          this.isRegFailed = true;\r\n          if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n            this.errorFieldSubmitted = errorResponse.data;\r\n          }\r\n        },\r\n        () => {\r\n          console.log(\"Configuration Saved\");}\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "propName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "propValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StoryInput",
            "id": "interface-StoryInput-a3a881f4bd9549f23f413b9c2f46778fdbe26d468b0f04dbd06d25e252c70c22f9fd419ad8e284423082e49daf1606e0783a91423f0dc1dc57e42163d8c8cd56",
            "file": "src/stories/inputs/input/story-input.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StoryInput {\r\n  id: string;\r\n  title: string;\r\n  state: string;\r\n  icon:  string;\r\n  type:  'text' | 'password' | 'tel' | 'email';\r\n  placeholder: string;\r\n  hide: boolean;\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "hide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"text\" | \"password\" | \"tel\" | \"email\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TSVData",
            "id": "interface-TSVData-8f9bd786c041c9ef4b42b4fe586a47e171f59f013b2615edcb3ffb21e9555c074069474ed46d614c5b5f8fda46ece023b9161f0a9d99f328827fedb8ba21ca12",
            "file": "src/app/login2/login-main/forgot-pass-form2/forgot-pass-form2.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, Inject, OnInit, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nexport interface TSVData {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'forgot-pass-form2',\r\n  templateUrl: './forgot-pass-form2.component.html',\r\n  styleUrls: ['./forgot-pass-form2.component.css']\r\n})\r\nexport default class ForgotPassForm2Component implements OnInit {\r\n  forgotPassForm: FormGroup;\r\n  status = {\r\n    isVerSuccess: false,\r\n    isRecSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }\r\n\r\n  public isLoading = false;\r\n  submitted = false;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n  ];\r\n\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private tokenStorage: TokenStorageService,\r\n              public dialogRef: MatDialogRef<ForgotPassForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: TSVData) {\r\n    this.forgotPassForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //this.generateNewCodeFor2SV();\r\n  }\r\n\r\n  onSubmit(code: string): void {\r\n    if (this.status.isVerSuccess) {\r\n      this.dialogRef.close({message: 'Successful verification', data: this.data});\r\n    }\r\n    this.submitted = true;\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.data.username = username;\r\n\r\n    this.isLoading = true;\r\n    this.authService.TSV_ValidateCodeByName(username, this.data.email, code).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.tokenStorage.savePinCodeToken(data.pinCodeToken);\r\n        this.status.isVerSuccess = true;\r\n        this.status.isVerFailed = false;\r\n        this.errorFieldSubmitted = {} ;\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful verification';\r\n      },\r\n      error => {\r\n        const errorResponse = error.error;\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Verification error';\r\n        this.status.verErrorMessage = error.error.message;\r\n        this.status.isVerFailed = true;\r\n        this.errorFieldSubmitted = errorResponse.message;\r\n        console.log(errorResponse);\r\n        this.isLoading = false;\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Validate Code Request Finished\");}\r\n    );\r\n  }\r\n\r\n  generateNewCodeFor2SV() {\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.isLoading = true;\r\n    this.authService.ResetPassByMail(username, this.data.email).subscribe(\r\n      data => {\r\n          if (data.message == \"Password successfully sent to email!\") {\r\n            this.status.isRecSuccess = true;\r\n          }\r\n        console.log(\"Generating Temporary Password Succeeded\", data);\r\n      },\r\n      error => {\r\n        this.isLoading = false;\r\n        console.log(\"Error: Can't generate temporary password for user \");\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Sending generation temporary password request complete\");\r\n      });\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.forgotPassForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.forgotPassForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.forgotPassForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.forgotPassForm.get('phone')!;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TSVData",
            "id": "interface-TSVData-afa6865bc239ef13d10982b997d1805d1f4f6280dcf1a3d0bdee473776514e7a225b6f07a562741343ee4588d77a76fd13d6cd2a9f8a2e9ea10f84cd3ddffc57-1",
            "file": "src/app/login2/login-main/verification-form2/verification-form2.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, Inject, OnInit, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nexport interface TSVData {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'verification-form2',\r\n  templateUrl: './verification-form2.component.html',\r\n  styleUrls: ['./verification-form2.component.css']\r\n})\r\nexport default class VerificationForm2Component implements OnInit {\r\n  verificationForm: FormGroup;\r\n  status = {\r\n    isVerSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }\r\n\r\n  public isLoading = false;\r\n  submitted = false;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: true },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '5', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n\r\n  ];\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private tokenStorage: TokenStorageService,\r\n              public dialogRef: MatDialogRef<VerificationForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: TSVData) {\r\n    this.verificationForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n      email: new FormControl(data.email.toString(), Validators.email),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.generateNewCodeFor2SV();\r\n  }\r\n\r\n  onSubmit(code: string): void {\r\n    this.submitted = true;\r\n\r\n    this.isLoading = true;\r\n    this.authService.TSV_ValidateCodeByName(this.data.username, this.data.email, code).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.tokenStorage.savePinCodeToken(data.pinCodeToken);\r\n        this.status.isVerSuccess = true;\r\n        this.status.isVerFailed = false;\r\n        this.errorFieldSubmitted = {} ;\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful verification';\r\n        this.dialogRef.close('User Validate');\r\n      },\r\n      error => {\r\n        const errorResponse = error.error;\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Verification error';\r\n        this.status.verErrorMessage = error.error.message;\r\n        this.status.isVerFailed = true;\r\n        this.errorFieldSubmitted = errorResponse.message;\r\n        console.log(errorResponse);\r\n        this.isLoading = false;\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Validate Code Request Finished\");}\r\n    );\r\n  }\r\n\r\n  generateNewCodeFor2SV() {\r\n    this.isLoading = true;\r\n    this.authService.TSV_GenerateCodeByName(this.data.username, this.data.email).subscribe(\r\n      data => {\r\n        console.log(\"Generating Code Succeeded\", data);\r\n      },\r\n      error => {\r\n        this.isLoading = false;\r\n        console.log(\"Error: Can't generate code for user \");\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Sending Generation Code Request Complete\");\r\n      });\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.verificationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.verificationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.verificationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.verificationForm.get('phone')!;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TSVData-1"
        },
        {
            "name": "TSVData",
            "id": "interface-TSVData-6a6ec1484b46419fd4a8008ea584343701baf4c0f286c81ae9949e25e003d5ab6858c9c33bd0738a32678fceecd48009af1ed89899005474f2ac85cee2392c85-2",
            "file": "src/app/login2/login-main/reset-pass-form2/reset-pass-form2.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, Inject, OnInit, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nexport interface TSVData {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'reset-pass-form2',\r\n  templateUrl: './reset-pass-form2.component.html',\r\n  styleUrls: ['./reset-pass-form2.component.css']\r\n})\r\nexport default class ResetPassForm2Component implements OnInit {\r\n  forgotPassForm: FormGroup;\r\n  status = {\r\n    isVerSuccess: false,\r\n    isRecSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }\r\n\r\n  public isLoading = false;\r\n  submitted = false;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n  ];\r\n\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private tokenStorage: TokenStorageService,\r\n              public dialogRef: MatDialogRef<ResetPassForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: TSVData) {\r\n    this.forgotPassForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //this.generateNewCodeFor2SV();\r\n  }\r\n\r\n  onSubmit(code: string): void {\r\n    if (this.status.isVerSuccess) {\r\n      this.dialogRef.close({message: 'Successful verification', data: this.data});\r\n    }\r\n    this.submitted = true;\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.data.username = username;\r\n\r\n    this.isLoading = true;\r\n    this.authService.TSV_ValidateCodeByName(username, this.data.email, code).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.tokenStorage.savePinCodeToken(data.pinCodeToken);\r\n        this.status.isVerSuccess = true;\r\n        this.status.isVerFailed = false;\r\n        this.errorFieldSubmitted = {} ;\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful verification';\r\n      },\r\n      error => {\r\n        const errorResponse = error.error;\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Verification error';\r\n        this.status.verErrorMessage = error.error.message;\r\n        this.status.isVerFailed = true;\r\n        this.errorFieldSubmitted = errorResponse.message;\r\n        console.log(errorResponse);\r\n        this.isLoading = false;\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Validate Code Request Finished\");}\r\n    );\r\n  }\r\n\r\n  generateNewCodeFor2SV() {\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.isLoading = true;\r\n    this.authService.ResetPassByMail(username, this.data.email).subscribe(\r\n      data => {\r\n          if (data.message == \"Password successfully sent to email!\") {\r\n            this.status.isRecSuccess = true;\r\n            this.status.isVerSuccess = true;\r\n          }\r\n        console.log(\"Generating Temporary Password Succeeded\", data);\r\n      },\r\n      error => {\r\n        this.isLoading = false;\r\n        console.log(\"Error: Can't generate temporary password for user \");\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Sending generation temporary password request complete\");\r\n      });\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.forgotPassForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.forgotPassForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.forgotPassForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.forgotPassForm.get('phone')!;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "TSVData-2"
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "USERS",
            "id": "interface-USERS-c32a2004d42002764c7dde93c9a6305e45a02cdb58f10874db346dc34a55485151d55dbd3e8dd0334a8cfe9842e80b3919e9ca6c01d1c1a30aa12b018f4e061f",
            "file": "src/stories/actions/action-input/action-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {ActionInput} from \"./action-input.interface\";\r\n\r\n\r\ninterface USERS {\r\n  conditionName: String;\r\n  presentingMessage: String;\r\n  isFulfilled: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'action-input',\r\n  templateUrl: './action-input.component.html',\r\n  styleUrls: ['./action-input.component.css']\r\n})\r\nexport class ActionInputComponent implements OnInit {\r\n\r\n  actionInputs?: ActionInput[];\r\n  actionHeader?: string = \"The password must contain:\";\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public setConditions(actionInputs: ActionInput[]) {\r\n    this.actionInputs = actionInputs;\r\n  }\r\n\r\n  public setHeader(actionHeader: string) {\r\n    this.actionHeader = actionHeader;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "conditionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isFulfilled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "presentingMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ValidationForm",
            "id": "interface-ValidationForm-a8bf6f9f3ee48696a84f647daee0614f748fb21b7a6708379b17683b2aa56a9924b6bb8d1318b797febc5741d200455f940135f9f492167f4f911dd6a751671e",
            "file": "src/stories/inputs/account-input/account-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, HostBinding, Inject, Injector, Input, OnInit, Output} from '@angular/core';\r\nimport { AccountInput } from './account-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-account-input',\r\n  templateUrl: './account-input.component.html',\r\n  styleUrls: ['./account-input.scss']\r\n})\r\nexport class AccountInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: AccountInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Output() changePassword: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n    return this.currentForm.get(this.storyInput?.title.toString())!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "validationForm2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupForm",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ValidationForm",
            "id": "interface-ValidationForm-be96e96238929dff8bfd928c5cf8c038818005e86dff9e7ae41845ab644de31e2c93a4eea338864d6eef08cb6529ee0398325c2904ba2aaa22003b4fdfa926cc-1",
            "file": "src/stories/inputs/configuration-input/configuration-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { ConfigurationInput } from './configuration-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-configuration-input',\r\n  templateUrl: './configuration-input.component.html',\r\n  styleUrls: ['./configuration-input.scss']\r\n})\r\nexport class ConfigurationInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: ConfigurationInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Output() changePassword: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  @ViewChild('rangeInput', { static: false }) Input?: ElementRef;\r\n\r\n  @ViewChild('ddlauto') ddlauto!: ElementRef;\r\n  selectedTeam = '';\r\n  onSelectedDdlAuto():void {\r\n    this.selectedTeam = this.ddlauto.nativeElement.value;\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler?.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler?.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler?.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler?.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler?.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler?.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler?.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler?.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler?.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler?.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler?.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler?.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl | null{\r\n\r\n    return this.currentForm.get(this.storyInput?.name)!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "validationForm2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupForm",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ValidationForm-1"
        },
        {
            "name": "ValidationForm",
            "id": "interface-ValidationForm-8e93df7450b0d41cbefef3332e618f0b37ffd90aee1973f2c93d546ea00c01c5600a7b22dfea48dd1bd3faa2d72504444a3e14e57cfbcee4141e3263f197353f-2",
            "file": "src/stories/inputs/digitcode-input/digitcode-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component, ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  OnInit,\r\n  Output, ViewChild,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { DigitcodeInput } from './digitcode-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-digitcode-input',\r\n  templateUrl: './digitcode-input.component.html',\r\n  styleUrls: ['./digitcode-input.scss']\r\n})\r\nexport class DigitcodeInputComponent implements OnInit{\r\n\r\n  @Input() digitInput?: DigitcodeInput;\r\n\r\n  @ViewChild('input') public input!: ElementRef<HTMLInputElement>;\r\n  @Input() inputType !: string;\r\n  @Input() inputMode !: string;\r\n  @Input() disabled !: boolean;\r\n  @Input() autocapitalize ?: string;\r\n  @Input() isFirst ?: boolean;\r\n  @Input() isLast ?: boolean;\r\n  @Output() onClick: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() onPaste: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onKeydown: EventEmitter<Event> = new EventEmitter<Event>();\r\n  value: string = '';\r\n\r\n\r\n  public get classes(): string[] {\r\n\r\n    //const isFirst = (this.index === 1) ? 'storybook-digitcode-input--first' : 'storybook-digitcode-input--notFirst';\r\n\r\n    return ['storybook-digitcode-input'];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "validationForm2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupForm",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "ValidationForm-2"
        },
        {
            "name": "ValidationForm",
            "id": "interface-ValidationForm-c397e4cd1940e9a73068ce4006013135087918cff55397ff58e25051cbba233af1f4d533565159dc6b11b8b782100f685bb6a043362efd78ffed9dfef2fa800b-3",
            "file": "src/stories/inputs/input/story-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, HostBinding, Inject, Injector, Input, OnInit, Output} from '@angular/core';\r\nimport { StoryInput } from './story-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-input',\r\n  templateUrl: './story-input.component.html',\r\n  styleUrls: ['./story-input.scss']\r\n})\r\nexport class StoryInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: StoryInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  showPassChange(): void {\r\n    this.storyInput.type = (this.storyInput?.type == 'password' ? 'text' : 'password')\r\n  }\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n    return this.currentForm.get(this.storyInput?.title.toString())!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "validationForm2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupForm",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "ValidationForm-3"
        }
    ],
    "injectables": [
        {
            "name": "ApiErrorMessageService",
            "id": "injectable-ApiErrorMessageService-30d22181eaf2f05d3500d226f51105a7865ba701531c8716f671753b9e0a60083d6bbf915f914d2fd7e80b8b6cc251da78578f6590e256ee8602cae7a73957d6",
            "file": "src/app/storybook/pipes/api-error-message.service.ts",
            "properties": [
                {
                    "name": "dictionary",
                    "defaultValue": "{\r\n    'login-main': {\r\n      languange: 'login-main',\r\n      values: {\r\n        \"example\": \"Beispiel\",\r\n        \"must be a well-formed email address\": \"must be a well-formed email address\",\r\n        \"Error: A registry process should be made!\": \"Error: A registry process should be made!\",\r\n        \"Error: A registry process un valid!\": \"Incorrect user name\",\r\n        \"VALIDATION_FAILED\": \"* A registry process un valid!\",\r\n        \"Bad credentials\": \"Incorrect user name or password\",\r\n        \"Password matches one of %1$s previous passwords.\": \"Try again with a password you haven’t used before\",\r\n        \"Passwords do not match!\": \"* Passwords do not match!\",\r\n        \"Error: Email is already in use!\": \"Email is already in use!\",\r\n        \"Error: Invalidate Pin-Code! User Not Approved\": \"* The Verification Code does not match\",\r\n      },\r\n    },\r\n    eng: {\r\n      languange: 'eng',\r\n      values: {\r\n        \"example\": \"Example\",\r\n      },\r\n    },\r\n\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "language",
                    "defaultValue": "'login-main'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "languages",
                    "defaultValue": "['login-main', 'eng']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "apiErrorMessage",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\r\nimport {first} from \"rxjs/operators\";\r\n\r\n\r\n@Injectable()\r\nexport class ApiErrorMessageService {\r\n  public languages = ['login-main', 'eng']\r\n\r\n  public language  = 'login-main'\r\n\r\n  private dictionary: { [key: string]: TranslationSet } = {\r\n    'login-main': {\r\n      languange: 'login-main',\r\n      values: {\r\n        \"example\": \"Beispiel\",\r\n        \"must be a well-formed email address\": \"must be a well-formed email address\",\r\n        \"Error: A registry process should be made!\": \"Error: A registry process should be made!\",\r\n        \"Error: A registry process un valid!\": \"Incorrect user name\",\r\n        \"VALIDATION_FAILED\": \"* A registry process un valid!\",\r\n        \"Bad credentials\": \"Incorrect user name or password\",\r\n        \"Password matches one of %1$s previous passwords.\": \"Try again with a password you haven’t used before\",\r\n        \"Passwords do not match!\": \"* Passwords do not match!\",\r\n        \"Error: Email is already in use!\": \"Email is already in use!\",\r\n        \"Error: Invalidate Pin-Code! User Not Approved\": \"* The Verification Code does not match\",\r\n      },\r\n    },\r\n    eng: {\r\n      languange: 'eng',\r\n      values: {\r\n        \"example\": \"Example\",\r\n      },\r\n    },\r\n\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  apiErrorMessage(key: string): any {\r\n    if (this.dictionary[this.language ] != null) {\r\n      return this.dictionary[this.language ].values[key];\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport class TranslationSet {\r\n  public languange?: any;\r\n  public values: { [key: string]: any } = {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-b71afee521d7ca252e732d8a7ce88fba530f25e22ba486d4176955a1263f1a750b230369089f6421b9e72e6b6a79232abcc32701c8107dc9d8e171b1578c2dc4",
            "file": "src/app/_services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAccountDetails",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfigurationData",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPassExpireDate",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPermittedWebAppList",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToken",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roles",
                            "type": "Array<String>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roles",
                            "type": "Array<String>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerForm",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replacePassForm",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oldPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confirmPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "confirmPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ResetPassByMail",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setConfigurationData",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "TSV_GenerateCodeByEmail",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "TSV_GenerateCodeByName",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "TSV_ReplacePassForm",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oldPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confirmPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pinCodeToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "confirmPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pinCodeToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "TSV_ValidateCodeByName",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "webapptab",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "webapp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "webapp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AppConfig} from \"../app.config\";\r\n\r\n\r\n\r\nconst AUTH_API = AppConfig.accServer.ACCWEBServers+'/accGate/auth/';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signin', {\r\n      username,\r\n      password\r\n    }, httpOptions);\r\n  }\r\n\r\n  registerForm(username: string, email: string, password: string, phone: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'register-form', {\r\n      username,\r\n      email,\r\n      password,\r\n      phone,\r\n    }, {responseType: 'text'});\r\n  }\r\n\r\n  replacePassForm(username: string, oldPassword: string, password: string, confirmPassword: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'replace-pass-form', {\r\n      username,\r\n      oldPassword,\r\n      password,\r\n      confirmPassword,\r\n    }, {responseType: 'text'});\r\n  }\r\n\r\n  register(username: string, email: string, password: string, roles: Array<String>): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signup', {\r\n      username,\r\n      email,\r\n      password,\r\n      roles,\r\n    }, httpOptions);\r\n  }\r\n\r\n  getToken(url: string, username: string, email: string, password: string): Observable<any> {\r\n    return this.http.post(url, {\r\n      username,\r\n      email,\r\n      password\r\n    }, httpOptions);\r\n  }\r\n\r\n  // login, register\r\n  refreshToken(token: string): Observable<any>  {\r\n    return this.http.post(AUTH_API + 'refreshtoken', {\r\n      refreshToken: token\r\n    }, httpOptions);\r\n  }\r\n\r\n  // open app in a new browser tab\r\n  webapptab(token: string, webapp: string): Observable<any>  {\r\n    return this.http.post(AUTH_API + 'webapptab', {\r\n      refreshToken: token,\r\n      webApp: webapp\r\n    }, httpOptions);\r\n  }\r\n\r\n  getPassExpireDate(token: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'passexpdate', {\r\n      accessToken: token,\r\n    }, httpOptions);\r\n  }\r\n\r\n\r\n  getPermittedWebAppList(token: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'permitwebapplist', {\r\n      accessToken: token,\r\n    }, httpOptions);\r\n  }\r\n\r\n  getAccountDetails(token: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'accountdetails', {\r\n      accessToken: token,\r\n    }, httpOptions);\r\n  }\r\n\r\n  getConfigurationData(token: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'configurationdata', {\r\n      accessToken: token,\r\n    }, httpOptions);\r\n  }\r\n\r\n  setConfigurationData(token: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'satconfigurationdata', {\r\n      accessToken: token,\r\n    }, httpOptions);\r\n  }\r\n\r\n  TSV_ValidateCodeByName(username: string, email: string, code: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'tsv_codevalidatebyname', {\r\n      username,\r\n      email,\r\n      code,\r\n    }, httpOptions);\r\n  }\r\n\r\n  TSV_ReplacePassForm(username: string, oldPassword: string, password: string,\r\n                      confirmPassword: string, pinCodeToken: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'tsv_replace-pass-form', {\r\n      username,\r\n      oldPassword,\r\n      password,\r\n      confirmPassword,\r\n      pinCodeToken,\r\n    }, httpOptions);\r\n  }\r\n\r\n\r\n  ResetPassByMail( username: string, email: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'forgotpassword', {\r\n      username,\r\n      email,\r\n    }, httpOptions);\r\n  }\r\n\r\n  TSV_GenerateCodeByName( username: string, email: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'tsv_codegeneratebyname', {\r\n      username,\r\n      email,\r\n    }, httpOptions);\r\n  }\r\n\r\n  TSV_GenerateCodeByEmail( username: string, email: string): Observable<any> {\r\n    return this.http.post(AUTH_API + 'tsv_codegeneratebyemail', {\r\n      username,\r\n      email,\r\n    }, httpOptions);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EventBusService",
            "id": "injectable-EventBusService-4f7a4321cd72961b5eb291bf86a7afbbd7b6aefcec29488c86084e25348621557644034fa964099ca4799aef8afacfa67a8393c08255fa9acc101a407904f263",
            "file": "src/app/_shared/event-bus.service.ts",
            "properties": [
                {
                    "name": "subject$",
                    "defaultValue": "new Subject<EventData>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "emit",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "on",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { EventData } from './event.class';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventBusService {\r\n  private subject$ = new Subject<EventData>();\r\n  constructor() { }\r\n  emit(event: EventData) {\r\n    this.subject$.next(event);\r\n  }\r\n  on(eventName: string, action: any): Subscription {\r\n    return this.subject$.pipe(\r\n      filter((e: EventData) => e.name === eventName),\r\n      map((e: EventData) => e[\"value\"])).subscribe(action);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "TokenStorageService",
            "id": "injectable-TokenStorageService-6b296d0f15b1b9058926ed7064503657b5f2929dcfe0fd796552fbbc4df13ee52ac90f59939ae1e589747255072a246746110cd4bf70695f41fbb6e844dea871",
            "file": "src/app/_services/token-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPinCodeToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUsername",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSupervisorAdmin",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "savePinCodeToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveRefreshToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nconst TOKEN_KEY = 'token';\r\nconst REFRESHTOKEN_KEY = 'auth-refreshtoken';\r\nconst PINCODETOKEN_KEY = 'auth-pincodetoken';\r\nconst USER_KEY = 'user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenStorageService {\r\n  constructor() { }\r\n\r\n  signOut(): void {\r\n    window.sessionStorage.clear();\r\n  }\r\n\r\n  public saveToken(token: string): void {\r\n    window.sessionStorage.removeItem(TOKEN_KEY);\r\n    window.sessionStorage.setItem(TOKEN_KEY, token);\r\n    const user = this.getUser();\r\n    if (user.id) {\r\n      this.saveUser({ ...user, accessToken: token });\r\n    }\r\n  }\r\n\r\n  public getToken(): string | null {\r\n    return window.sessionStorage.getItem(TOKEN_KEY);\r\n  }\r\n\r\n  public saveRefreshToken(token: string): void {\r\n    window.sessionStorage.removeItem(REFRESHTOKEN_KEY);\r\n    window.sessionStorage.setItem(REFRESHTOKEN_KEY, token);\r\n    const user = this.getUser();\r\n    if (user.id) {\r\n      user.refreshToken = token;\r\n      this.saveUser(user);\r\n    }\r\n  }\r\n\r\n  public getRefreshToken(): string | null {\r\n    return window.sessionStorage.getItem(REFRESHTOKEN_KEY);\r\n  }\r\n\r\n  public savePinCodeToken(token: string): void {\r\n    window.sessionStorage.removeItem(PINCODETOKEN_KEY);\r\n    window.sessionStorage.setItem(PINCODETOKEN_KEY, token);\r\n  }\r\n\r\n  public getPinCodeToken(): string | null {\r\n    return window.sessionStorage.getItem(PINCODETOKEN_KEY);\r\n  }\r\n\r\n  public saveUser(user: any): void {\r\n    window.sessionStorage.removeItem(USER_KEY);\r\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\r\n  }\r\n\r\n  public getUser(): any {\r\n    const user = window.sessionStorage.getItem(USER_KEY);\r\n    if (user) {\r\n      return JSON.parse(user);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  public getRoles(): any {\r\n    const user = this.getUser();\r\n    if (user.roles) {\r\n      return user.roles;\r\n    }\r\n    return {};\r\n  }\r\n\r\n  public getUsername(): string {\r\n    const user = this.getUser();\r\n    return user.username.toString();\r\n  }\r\n\r\n  public isSupervisorAdmin(): boolean {\r\n    const user = this.getUser();\r\n    return (user.roles.toString() === 'SupervisorAdmin');\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-b88d3ab8d72b62fe3dad3f8aacb2a8b0a6dcbd0d82fcf18d9d8baaf6009ca468f074a1e7bce48080eb0bbcc1ef9b096789af096696b0ae8e2382ad09a20b085a",
            "file": "src/app/_services/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAccountDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAccVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAdminBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getModeratorBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPublicContent",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTowStepVerRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {AppConfig} from \"../app.config\";\r\n\r\nconst API_URL = AppConfig.accServer.ACCWEBServers+'/accGate/test/';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getPublicContent(): Observable<any> {\r\n    return this.http.get(API_URL + 'all', { responseType: 'text' });\r\n  }\r\n\r\n  getAccVersion(): Observable<any> {\r\n    return this.http.get(API_URL + 'accversion', { responseType: 'text' });\r\n  }\r\n\r\n  isTowStepVerRequired(): Observable<any> {\r\n    return this.http.get(API_URL + 'istsvon', httpOptions);\r\n  }\r\n\r\n  getUserBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'user', { responseType: 'text' });\r\n  }\r\n\r\n  getModeratorBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'mod', { responseType: 'text' });\r\n  }\r\n\r\n  getAdminBoard(): Observable<any> {\r\n    return this.http.get(API_URL + 'admin', { responseType: 'text' });\r\n  }\r\n\r\n  getAccountDetails(): Observable<any> {\r\n    return this.http.get(API_URL + 'accountdetails', { responseType: 'text' });\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AppRoutingGuard",
            "id": "injectable-AppRoutingGuard-5c5f20ae1e0244b96bf61d4423300e06b296f40e28095f1882bd89e0b2f35787fccbea64fa0cf0277fe58f5ce9c6e0e79d598a01ca1e92ea9b0707a14ce4b12b",
            "file": "src/app/app-routing.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "childRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "childRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canDeactivate",
                    "args": [
                        {
                            "name": "component",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nextState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canLoad",
                    "args": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "segments",
                            "type": "UrlSegment[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "segments",
                            "type": "UrlSegment[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isApproved",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanDeactivate, CanLoad, Route, RouterStateSnapshot, UrlSegment, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AppComponent } from './app.component';\r\nimport {TokenStorageService} from \"./_services/token-storage.service\";\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n\r\nconst jwtHelper = new JwtHelperService();\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppRoutingGuard implements CanActivate, CanActivateChild, CanDeactivate<unknown>, CanLoad {\r\n\r\n  constructor(private app: AppComponent,\r\n              private tokenService: TokenStorageService) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n  canActivateChild(\r\n    childRoute: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n  canDeactivate(\r\n    component: unknown,\r\n    currentRoute: ActivatedRouteSnapshot,\r\n    currentState: RouterStateSnapshot,\r\n    nextState?: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n  canLoad(\r\n    route: Route,\r\n    segments: UrlSegment[]): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isApproved();\r\n  }\r\n\r\n\r\n  private isApproved(): boolean {\r\n\r\n    const token = this.tokenService.getToken();\r\n    console.log('guard check for authentication..' + !jwtHelper.isTokenExpired(this.tokenService.getToken()) );\r\n    return !jwtHelper.isTokenExpired(this.tokenService.getToken());\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "app",
                        "type": "AppComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "app",
                        "type": "AppComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-fdcfd344ae5e22f4169fa95133f32a8bd8fe69a731a6451ecb2870992f95ba30f4c21c9fa3c69db4ff3171d4b2f9206fb0c96a78ecf2fdcf327ce8eafac796c6",
            "file": "src/app/_helpers/auth.interceptor.ts",
            "properties": [
                {
                    "name": "isRefreshing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "refreshTokenSubject",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTokenHeader",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forseRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handle401Error",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HTTP_INTERCEPTORS, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\n\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\r\n\r\n const TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\r\n//const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  private isRefreshing = false;\r\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  constructor(private tokenService: TokenStorageService, private authService: AuthService) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    let authReq = req;\r\n    const token = this.tokenService.getToken();\r\n    if (token != null && !authReq.url.includes('test/')) {\r\n      authReq = this.addTokenHeader(req, token);\r\n      // for Spring Boot back-end\r\n      // authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n\r\n      // for Node.js Express back-end\r\n      //authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\r\n    }\r\n    return next.handle(authReq).pipe(catchError(error => {\r\n      if (error instanceof HttpErrorResponse && !authReq.url.includes('auth/signin') && error.status === 401) {\r\n        return this.handle401Error(authReq, next);\r\n      }\r\n      return throwError(error);\r\n    }));\r\n  }\r\n\r\n\r\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshTokenSubject.next(null);\r\n      const token = this.tokenService.getRefreshToken();\r\n      if (token)\r\n        return this.authService.refreshToken(token).pipe(\r\n          switchMap((token: any) => {\r\n            this.isRefreshing = false;\r\n            this.tokenService.saveToken(token.accessToken);\r\n            this.tokenService.saveRefreshToken(token.refreshToken);\r\n            this.refreshTokenSubject.next(token.accessToken);\r\n\r\n            return next.handle(this.addTokenHeader(request, token.accessToken));\r\n          }),\r\n          catchError((err) => {\r\n            this.isRefreshing = false;\r\n\r\n            this.tokenService.signOut();\r\n            return throwError(err);\r\n          })\r\n        );\r\n    }\r\n    return this.refreshTokenSubject.pipe(\r\n      filter(token => token !== null),\r\n      take(1),\r\n      switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n    );\r\n  }\r\n  private addTokenHeader(request: HttpRequest<any>, token: string) {\r\n    /* for Spring Boot back-end */\r\n     return request.clone({ headers: request.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n    /* for Node.js Express back-end */\r\n    //return request.clone({ headers: request.headers.set(TOKEN_HEADER_KEY, token) });\r\n  }\r\n/*\r\n  public forseRefreshToken2() {\r\n    const token = this.tokenService.getRefreshToken();\r\n    if (token)\r\n      this.authService.refreshToken(token).pipe(\r\n        switchMap((token: any) => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.saveToken(token.accessToken);\r\n          this.refreshTokenSubject.next(token.accessToken);\r\n\r\n          filter(token => token !== null),\r\n            take(1),\r\n            switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n        }),\r\n        catchError((err) => {\r\n          this.isRefreshing = false;\r\n\r\n          this.tokenService.signOut();\r\n          return throwError(err);\r\n        })\r\n      );\r\n  }\r\n*/\r\n  public forseRefreshToken(): void {\r\n    const token = this.tokenService.getRefreshToken();\r\n    if (token)\r\n      this.authService.refreshToken(token).subscribe(\r\n        data => {\r\n          this.isRefreshing = false;\r\n          this.tokenService.saveToken(data.accessToken);\r\n          this.refreshTokenSubject.next(data.accessToken);\r\n\r\n\r\n        },\r\n        (err) => {\r\n          this.isRefreshing = false;\r\n\r\n          this.tokenService.signOut();\r\n          return throwError(err);\r\n        }\r\n      );\r\n  }\r\n}\r\n\r\nexport const authInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n];\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tokenService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "tokenService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "EventData",
            "id": "class-EventData-8925370f157c2f4d909b2cf58dccc2eca15e46b80c594223d867bedf9dd2a8cb0e44aa5947e26ed06f27efd18e65f263c2a1b44b89e1ee16fb6fcc21d07e4b8d",
            "file": "src/app/_shared/event.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class EventData {\r\n  name: string;\r\n  value: any;\r\n  constructor(name: string, value: any) {\r\n    this.name = name;\r\n    this.value = value;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PasswordValidators",
            "id": "class-PasswordValidators-f0bdfc636ed016995c8f29a24b3456e57f33b9ca68de0b32eab9ae2764ed74866464688b44f66fe729ac401e253965091547ac3a58c7d624b6b9a64126ef3378",
            "file": "src/app/login2/login-main/replace-pass-form2/replace-pass-form2.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Inject, Renderer2} from '@angular/core';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport {AuthService} from \"src/app/_services/auth.service\";\r\nimport {AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {DialogData} from \"../login-main.component\";\r\nimport RegisterForm2Component from \"../register-form2/register-form2.component\";\r\nimport {StoryInput} from \"../../../../stories/inputs/input/story-input.model\";\r\nimport {EventData} from \"../../../_shared/event.class\";\r\nimport {workingModeConfiguration} from \"../../../app.config\";\r\nimport {EventBusService} from \"../../../_shared/event-bus.service\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './replace-pass-form2.component.html',\r\n  styleUrls: ['./replace-pass-form2.component.css']\r\n})\r\nexport class ReplacePassForm2Component {\r\n  replacePassForm: FormGroup;\r\n  status = {\r\n    isRepSuccess: false,\r\n    isRepFailed: false,\r\n    submitted: false,\r\n    repErrorMessage: {},\r\n    apiResponse: { message: '', error: false },\r\n    errorFieldSubmitted: {},\r\n    closeResult: '',\r\n  };\r\n\r\n  public isLoading = false;\r\n\r\n  empList: Array<String> = [];\r\n\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '1', title: 'oldPassword', state: 'INITIAL PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'password', state: 'NEW PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'confirmPassword', state: 'RE-ENTER NEW PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n  ];\r\n\r\n\r\n\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private eventBusService: EventBusService,\r\n              private tokenStorageService: TokenStorageService,\r\n              public dialogRef: MatDialogRef<ReplacePassForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\r\n    this.replacePassForm = new FormGroup({\r\n      userName: new FormControl(data.username, Validators.required),\r\n      oldPassword: new FormControl(data.password, Validators.minLength(1)),\r\n      password: new FormControl('', Validators.compose([\r\n        Validators.minLength(8),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9])\"), {requiresDigit: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {requiresUppercase: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {requiresLowercase: true} ),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&#><{}()+~])\"), {requiresSpecialChars: true})\r\n      ])),\r\n      confirmPassword: new FormControl('', [\r\n        Validators.minLength(8),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9])\"), {requiresDigit: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {requiresUppercase: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {requiresLowercase: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&#><{}()+~])\"), {requiresSpecialChars: true})\r\n      ])\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.status.isRepSuccess) {\r\n      this.dialogRef.close({message: 'Replace Password Complete', data: this.data});\r\n    }\r\n    //else if (workingModeConfiguration.runMode.TSV && this.tokenStorageService.getPinCodeToken() == null) {\r\n    //  this.eventBusService.emit(new EventData('openVerification', null));\r\n    //}\r\n    else {\r\n      this.status.submitted = true;\r\n      this.isLoading = true;\r\n      this.changePassword().subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.status.isRepSuccess = true;\r\n          this.status.isRepFailed = false;\r\n          this.status.errorFieldSubmitted = {};\r\n          this.status.apiResponse.error = false;\r\n          this.status.apiResponse.message = 'Successful registration';\r\n          this.data.password = this.password.value.toString();\r\n        },\r\n        error => {\r\n          switch (error.error.message) {\r\n            case \"Error: Invalidate Pin-Code! User Not Approved\":\r\n              this.eventBusService.emit(new EventData('openVerification', null));\r\n              break;\r\n            default:\r\n              const errorResponse = JSON.parse(error.error);\r\n              this.status.apiResponse.error = true;\r\n              this.status.apiResponse.message = 'Replace password error';\r\n              this.status.repErrorMessage = errorResponse;\r\n              this.status.isRepFailed = true;\r\n              if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n                this.status.errorFieldSubmitted = errorResponse.data;\r\n              }\r\n          }\r\n\r\n          this.isLoading = false;\r\n\r\n          //Error: Invalidate Pin-Code! User Not Approved\r\n        },\r\n        () => {\r\n          this.isLoading = false;\r\n          console.log('Replace Password closed');}\r\n      );\r\n    }\r\n  }\r\n\r\n  private changePassword() {\r\n    const { userName, oldPassword, password, confirmPassword } = this.replacePassForm.value;\r\n    let pinCodeToken = this.tokenStorageService.getPinCodeToken();\r\n\r\n    if (pinCodeToken == null) {\r\n      pinCodeToken = 'dismiss';\r\n    }\r\n    return this.authService.TSV_ReplacePassForm(userName, oldPassword, password, confirmPassword, pinCodeToken);\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.replacePassForm.get('username')!;\r\n  }\r\n\r\n  get oldPassword(): AbstractControl {\r\n    return this.replacePassForm.get('oldPassword')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.replacePassForm.get('password')!;\r\n  }\r\n\r\n  get confirmPassword(): AbstractControl {\r\n    return this.replacePassForm.get('confirmPassword')!;\r\n  }\r\n\r\n}\r\n\r\nexport class PasswordValidators {\r\n  constructor() {\r\n  }\r\n\r\n  static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n      if (!control.value) {\r\n        // if the control value is empty return no error.\r\n        return null;\r\n      }\r\n\r\n      // test the value of the control against the regexp supplied.\r\n      const valid = regex.test(control.value);\r\n\r\n      // if true, return no error, otherwise return the error object passed in the second parameter.\r\n      return valid ? null : error;\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 151
            },
            "properties": [],
            "methods": [
                {
                    "name": "patternValidator",
                    "args": [
                        {
                            "name": "regex",
                            "type": "RegExp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "regex",
                            "type": "RegExp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TranslationSet",
            "id": "class-TranslationSet-30d22181eaf2f05d3500d226f51105a7865ba701531c8716f671753b9e0a60083d6bbf915f914d2fd7e80b8b6cc251da78578f6590e256ee8602cae7a73957d6",
            "file": "src/app/storybook/pipes/api-error-message.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Injectable} from \"@angular/core\";\r\nimport {first} from \"rxjs/operators\";\r\n\r\n\r\n@Injectable()\r\nexport class ApiErrorMessageService {\r\n  public languages = ['login-main', 'eng']\r\n\r\n  public language  = 'login-main'\r\n\r\n  private dictionary: { [key: string]: TranslationSet } = {\r\n    'login-main': {\r\n      languange: 'login-main',\r\n      values: {\r\n        \"example\": \"Beispiel\",\r\n        \"must be a well-formed email address\": \"must be a well-formed email address\",\r\n        \"Error: A registry process should be made!\": \"Error: A registry process should be made!\",\r\n        \"Error: A registry process un valid!\": \"Incorrect user name\",\r\n        \"VALIDATION_FAILED\": \"* A registry process un valid!\",\r\n        \"Bad credentials\": \"Incorrect user name or password\",\r\n        \"Password matches one of %1$s previous passwords.\": \"Try again with a password you haven’t used before\",\r\n        \"Passwords do not match!\": \"* Passwords do not match!\",\r\n        \"Error: Email is already in use!\": \"Email is already in use!\",\r\n        \"Error: Invalidate Pin-Code! User Not Approved\": \"* The Verification Code does not match\",\r\n      },\r\n    },\r\n    eng: {\r\n      languange: 'eng',\r\n      values: {\r\n        \"example\": \"Example\",\r\n      },\r\n    },\r\n\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  apiErrorMessage(key: string): any {\r\n    if (this.dictionary[this.language ] != null) {\r\n      return this.dictionary[this.language ].values[key];\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport class TranslationSet {\r\n  public languange?: any;\r\n  public values: { [key: string]: any } = {}\r\n}\r\n",
            "properties": [
                {
                    "name": "languange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "values",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "DynamicCompDirective",
            "id": "directive-DynamicCompDirective-1d25db858b6ea84ca0f9e3c6109af07f9d0743e057caa2f8490ada3b68cf8ee97f5468e6a513c9fe206d37199d83fbbad17569c11c8a2ec78a83c15acc75e0a6",
            "file": "src/stories/directive/dynamic-comp.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appDynamicComp]'\r\n})\r\nexport class DynamicCompDirective {\r\n\r\n  constructor(public viewContainerRef: ViewContainerRef) {}\r\n\r\n}\r\n",
            "selector": "[appDynamicComp]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "HighlightDirective",
            "id": "directive-HighlightDirective-f334ae9f70e5fb6cdd77004114a331b23c79e8ef2e3af9e5cbd68b36f50f6721d5f2d4e2b66734bc475db15d861bfaf38396b073777cf8b342db4fdfab8fb272",
            "file": "src/stories/buttons/button-fortest/custom-directive/Highlight.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[highlight]',\r\n})\r\nexport class HighlightDirective {\r\n  constructor(private eleRef: ElementRef) {}\r\n\r\n  @Input() highlight: any;\r\n  @Input() colorName: any;\r\n\r\n\r\n  @HostListener('mouseover') onMouseOver() {\r\n    this.eleRef.nativeElement.style.color = this.colorName;\r\n  }\r\n  @HostListener('mouseleave') onMouseLeave() {\r\n    this.eleRef.nativeElement.style.color = 'black';\r\n  }\r\n}\r\n",
            "selector": "[highlight]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "colorName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "highlight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16
                },
                {
                    "name": "mouseover",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eleRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "eleRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PopoverDirective",
            "id": "directive-PopoverDirective-6bc0823241f2ef3e551257a6c4a19fb0d857d6b3a6d4d99cdfbc35128f1b1f9efbec4361912c54488d72bfff5cb1b0523c8257a51fafd948c9ed401839ea9eb7",
            "file": "src/stories/directive/bubble-avatar/popover.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  ElementRef, EventEmitter,\r\n  HostListener,\r\n  Input, Output,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { PopoverOptions } from '../popover.interface';\r\nimport {BubbleAvatarComponent} from \"./bubble-avatar.component\";\r\n\r\n@Directive({\r\n  selector: '[twPopover]',\r\n})\r\nexport class PopoverDirective {\r\n  @Input(\"twPopover\") popover?: PopoverOptions;\r\n\r\n  popoverComponentRef?: ComponentRef<BubbleAvatarComponent>;\r\n  @HostListener('mouseover', ['$event']) onMouseOver($event: any){\r\n    this.popoverComponentRef?.instance.setHeader(this.header);\r\n    this.popoverComponentRef?.instance.setBubbleOn(this.bubbleOn);\r\n    this.popoverComponentRef?.instance.showPopup();\r\n    //this.eleRef.nativeElement.style.color = 'blue';\r\n  }\r\n\r\n  @HostListener('mouseleave', ['$event']) onLeave($event: any){\r\n    this.popoverComponentRef?.instance.hidePopup();\r\n  }\r\n\r\n  @HostListener('click', ['$event']) onClick($event: any){\r\n    this.popoverComponentRef?.instance.setHeader(this.header);\r\n    this.popoverComponentRef?.instance.setBubbleOn(this.bubbleOn);\r\n    this.popoverComponentRef?.instance.showPopup();\r\n  }\r\n\r\n\r\n\r\n\r\n  constructor(private eleRef: ElementRef,\r\n              private el: ElementRef,\r\n              private viewContainer: ViewContainerRef,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  @Input() highlight: any;\r\n  @Input() header: string = '';\r\n  @Input() bubbleOn: boolean = false;\r\n  @Output() actionButton: EventEmitter<any> = new EventEmitter<any> ();\r\n  @Output() avatarButton: EventEmitter<any> = new EventEmitter<any> ();\r\n\r\n\r\n/*\r\n  @HostListener('mouseover') onMouseOver() {\r\n    this.popoverComponentRef?.instance.showPopup();\r\n    this.eleRef.nativeElement.style.color = this.colorName;\r\n  }*/\r\n\r\n\r\n  ngOnInit(): void {\r\n    const factory =  this.componentFactoryResolver.resolveComponentFactory(BubbleAvatarComponent);\r\n\r\n    const comp = factory.create(this.viewContainer.injector);\r\n    comp.instance.display = \"I test some content\";\r\n    comp.instance.popover = this.popover?.content;\r\n    comp.instance.options = this.popover;\r\n    comp.instance.header = this.header;\r\n    comp.instance.bubbleOn = this.bubbleOn;\r\n\r\n    this.popoverComponentRef = comp;\r\n    this.el.nativeElement.classList.add(\"wrapper\");\r\n    this.el.nativeElement.appendChild(comp.location.nativeElement);\r\n\r\n    comp.hostView.detectChanges();\r\n\r\n    comp.instance.triggerDetectionChange.subscribe(() =>  {\r\n      comp.hostView.detectChanges();\r\n    });\r\n\r\n    comp.instance.actionButton.subscribe(($event: any) => {\r\n      this.actionButton.emit($event);\r\n    });\r\n  }\r\n\r\n}\r\n",
            "selector": "[twPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "bubbleOn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "highlight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "twPopover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "PopoverOptions",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionButton",
                    "defaultValue": "new EventEmitter<any> ()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "avatarButton",
                    "defaultValue": "new EventEmitter<any> ()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<any>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31
                },
                {
                    "name": "mouseleave",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                },
                {
                    "name": "mouseover",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20
                }
            ],
            "propertiesClass": [
                {
                    "name": "popoverComponentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<BubbleAvatarComponent>",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLeave",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseOver",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eleRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "eleRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PopoverInputDirective",
            "id": "directive-PopoverInputDirective-ee8392baf757600403a5fd0578f15ec661f9db1fc88070eb16449a107515ba38f8d8cc971161bcd4604c06b7098015fb69c0a00235f27bc5e039a58c89fd2b20",
            "file": "src/stories/directive/bubble-input/popover-input.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { PopoverOptions } from '../popover.interface';\r\nimport {BubbleInputComponent} from \"./bubble-input.component\";\r\nimport {ActionInput} from \"../../actions/action-input/action-input.interface\";\r\n\r\n@Directive({\r\n  selector: '[inputPopover]',\r\n})\r\nexport class PopoverInputDirective {\r\n  @Input(\"inputPopover\") popover?: PopoverOptions;\r\n\r\n  popoverComponentRef?: ComponentRef<BubbleInputComponent>;\r\n  @HostListener('mouseover', ['$event']) onMouseOver($event: any){\r\n    this.popoverComponentRef?.instance.setData(this.data!);\r\n    this.popoverComponentRef?.instance.showPopup();\r\n    //this.eleRef.nativeElement.style.color = 'blue';\r\n  }\r\n\r\n  @HostListener('mouseleave', ['$event']) onLeave($event: any){\r\n    this.popoverComponentRef?.instance.hidePopup();\r\n  }\r\n\r\n  @HostListener('click', ['$event']) onClick($event: any){\r\n    this.popoverComponentRef?.instance.setData(this.data!);\r\n    this.popoverComponentRef?.instance.showPopup();\r\n  }\r\n\r\n  @HostListener('keyup', ['$event']) onDataChange($event: any) {\r\n    this.popoverComponentRef?.instance.setData(this.data!);\r\n    this.popoverComponentRef?.instance.showPopup();\r\n  }\r\n\r\n\r\n  constructor(private eleRef: ElementRef,\r\n              private el: ElementRef,\r\n              private viewContainer: ViewContainerRef,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  @Input() highlight: any;\r\n  @Input() data?: ActionInput[] | undefined;\r\n  @Input() header?: string = '';\r\n\r\n/*\r\n  @HostListener('mouseover') onMouseOver() {\r\n    this.popoverComponentRef?.instance.showPopup();\r\n    this.eleRef.nativeElement.style.color = this.colorName;\r\n  }*/\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n    const factory =  this.componentFactoryResolver.resolveComponentFactory(BubbleInputComponent);\r\n\r\n    const comp = factory.create(this.viewContainer.injector);\r\n    comp.instance.display = \"I test some content\";\r\n    comp.instance.popover = this.popover?.content;\r\n    comp.instance.options = this.popover;\r\n    comp.instance.data = this.data;\r\n    comp.instance.header = this.header;\r\n\r\n    this.popoverComponentRef = comp;\r\n    this.el.nativeElement.classList.add(\"wrapper\");\r\n    this.el.nativeElement.appendChild(comp.location.nativeElement);\r\n\r\n    comp.hostView.detectChanges();\r\n\r\n    comp.instance.triggerDetectionChange.subscribe(() =>  {\r\n      comp.hostView.detectChanges();\r\n    });\r\n  }\r\n\r\n}\r\n",
            "selector": "[inputPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "ActionInput[] | undefined",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "highlight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "inputPopover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "PopoverOptions",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31
                },
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                },
                {
                    "name": "mouseleave",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                },
                {
                    "name": "mouseover",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "propertiesClass": [
                {
                    "name": "popoverComponentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<BubbleInputComponent>",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDataChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLeave",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseOver",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eleRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "eleRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AccountInputComponent",
            "id": "component-AccountInputComponent-a8bf6f9f3ee48696a84f647daee0614f748fb21b7a6708379b17683b2aa56a9924b6bb8d1318b797febc5741d200455f940135f9f492167f4f911dd6a751671e",
            "file": "src/stories/inputs/account-input/account-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-account-input",
            "styleUrls": [
                "./account-input.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "conditionList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "currentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "hideInput",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "storyInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "AccountInput",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changePassword",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isPasswordTextHide",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isStrength",
                    "defaultValue": "(this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "popover",
                    "defaultValue": "{\r\n    content: ActionInputComponent\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopoverOptions",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorHeader",
                    "args": [
                        {
                            "name": "controllerType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "controllerType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorList",
                    "args": [
                        {
                            "name": "conditionList",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActionInput[]",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "conditionList",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
                    "description": "<p>Component method to trigger the onArchive event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6310,
                                "end": 6312,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6304,
                                "end": 6309,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onPin event\n",
                    "description": "<p>Component method to trigger the onPin event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6163,
                                "end": 6165,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6157,
                                "end": 6162,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, HostBinding, Inject, Injector, Input, OnInit, Output} from '@angular/core';\r\nimport { AccountInput } from './account-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-account-input',\r\n  templateUrl: './account-input.component.html',\r\n  styleUrls: ['./account-input.scss']\r\n})\r\nexport class AccountInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: AccountInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Output() changePassword: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n    return this.currentForm.get(this.storyInput?.title.toString())!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n\r\n\r\n$tottal-height: 160px !default;\r\n\r\n.main {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100px;\r\n  top: 0;\r\n  /*left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n  margin-bottom: 20px;*/\r\n  background-color: rgba(255, 255, 255, 0);\r\n\r\n}\r\n\r\n#storybook-pass {\r\n  border: 1px solid rgba(255, 0, 0, 0.11);\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n#parent1 {\r\n  position: sticky;\r\n  top: 1px;\r\n  height: 100px;\r\n  width: 100%;\r\n  /*border: 1px solid #c0077f;*/\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n#parent3 {\r\n  position: relative;\r\n  width: 100%;\r\n  margin: 10px 0 0 0;\r\n  /*height: 160px ;\r\n   border: 1px solid #072cc0;\r\nmargin-bottom: 3px;*/\r\n  /*background-color: rgba(255, 255, 255, 0);*/\r\n}\r\n\r\n/*\r\nspan.absolute {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 28px;\r\n  bottom: 0;\r\n  border: 1px solid #8AC007;\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n*/\r\n\r\n\r\n.user-name {\r\n  position: absolute;\r\n  width: 300px;\r\n  height: 35px;\r\n  left: 0%;\r\n  right: 82.7%;\r\n  top: 10%;\r\n  bottom: 68.37%;\r\n  /* identical to box height, or 223% */\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: -0.011em;\r\n  text-transform: uppercase;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n/* D Caps Regular */\r\n.D-Caps-Regular {\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 31px;\r\n}\r\n\r\n.UserNameType {\r\n  position: absolute;\r\n  width: 228px;\r\n  height: 32px;\r\n  left: 0;\r\n  bottom: 0;\r\n  margin: 4.2px 1px 2.8px 0;\r\n\r\n  /* D Regular */\r\n\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n\r\n  display: flex;\r\n  align-items: self-start;\r\n  letter-spacing: -0.011em;\r\n\r\n  color: #000000;\r\n}\r\n\r\n.inputField {\r\n  position: relative;\r\n  height: 25px;\r\n  width: 228px;\r\n  left: 35px;\r\n  bottom: -5px;\r\n  margin: 4.2px 1px 2.8px 20.3px;\r\n\r\n  /* D Example Italic */\r\n  object-fit: contain;\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 48%;\r\n  /* or 65% */\r\n\r\n  box-shadow: none;\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: -0.19px;\r\n\r\n  border-color: rgba(255, 255, 255, 0);\r\n  color: #000000;\r\n}\r\n\r\n.EnableProfilePicture{\r\n  display: inline;\r\n  position: relative;\r\n  margin: 4.2px 1px 2.8px 0;\r\n\r\n\r\n  /* D Regular */\r\n\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n\r\n  text-align: right;\r\n  letter-spacing: -0.011em;\r\n\r\n  color: #000000;\r\n}\r\n\r\n.user-checkbox-header {\r\n  position: absolute;\r\n  right: 1px;\r\n  top: 50px;\r\n  padding: 0;\r\n  margin: 0;\r\n  border-bottom-width: 0px;\r\n  background-color: rgba(45, 148, 55, 0);\r\n  object-fit: contain;\r\n\r\n}\r\n\r\n\r\n.icon-input-edit {\r\n  position: absolute;\r\n  width: 18.4px;\r\n  height: 19.51px;\r\n  right: 10px;\r\n  bottom: 11px;\r\n  padding-top: 0px;\r\n  margin: 0;\r\n  border-bottom-width: 0px;\r\n  background-color: rgba(45, 148, 55, 0);\r\n}\r\n\r\nimg.icon-input-edit {\r\n  position: absolute;\r\n  bottom: 1px;\r\n  right: 1px;\r\n  width: inherit;\r\n  height: inherit;\r\n  padding: 0px;\r\n  margin: 0px;\r\n  /*object-fit: contain;\r\n  box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nimg.icon-input {\r\n  position: absolute;\r\n  width: 22.72px;\r\n  height: 26.74px;\r\n  left: 17px;\r\n  bottom: 7px;\r\n\r\n  transform: rotate(0deg);\r\n  background-position: bottom;\r\n}\r\n\r\ninput:focus {\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\n\r\ninput::placeholder {\r\n  color: #C8C8C8;\r\n}\r\n\r\ninput[type=password]:focus {\r\n  color: #000000;\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\ninput[type=tel]:focus {\r\n  color: #000000;\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\n.Vector2 {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  //width: 100%;\r\n\r\n  left: 0.2%;\r\n  right: 10.03%;\r\n  top: 42.66%;\r\n  bottom: 0;\r\n\r\n  /* Blue */\r\n  border: 2px solid #3D8ECF;\r\n  border-radius: 10px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.Button-App-Label {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 33px;\r\n  horiz-align: center;\r\n\r\n}\r\n\r\n.storybook-input--addStrength {\r\n    height: 130px;\r\n\r\n\r\n\r\n}\r\n\r\n.storybook-input--clearStrength {\r\n\r\n\r\n    height: 110px;\r\n\r\n\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./account-input.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 74
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 79
                    }
                },
                "passwordValid": {
                    "name": "passwordValid",
                    "getSignature": {
                        "name": "passwordValid",
                        "type": "",
                        "returnType": "",
                        "line": 179
                    }
                },
                "requiredValid": {
                    "name": "requiredValid",
                    "getSignature": {
                        "name": "requiredValid",
                        "type": "",
                        "returnType": "",
                        "line": 183
                    }
                },
                "minLengthValid": {
                    "name": "minLengthValid",
                    "getSignature": {
                        "name": "minLengthValid",
                        "type": "",
                        "returnType": "",
                        "line": 187
                    }
                },
                "requiresDigitValid": {
                    "name": "requiresDigitValid",
                    "getSignature": {
                        "name": "requiresDigitValid",
                        "type": "",
                        "returnType": "",
                        "line": 191
                    }
                },
                "requiresUppercaseValid": {
                    "name": "requiresUppercaseValid",
                    "getSignature": {
                        "name": "requiresUppercaseValid",
                        "type": "",
                        "returnType": "",
                        "line": 195
                    }
                },
                "requiresLowercaseValid": {
                    "name": "requiresLowercaseValid",
                    "getSignature": {
                        "name": "requiresLowercaseValid",
                        "type": "",
                        "returnType": "",
                        "line": 199
                    }
                },
                "requiresSpecialCharsValid": {
                    "name": "requiresSpecialCharsValid",
                    "getSignature": {
                        "name": "requiresSpecialCharsValid",
                        "type": "",
                        "returnType": "",
                        "line": 203
                    }
                },
                "requiresEmailValid": {
                    "name": "requiresEmailValid",
                    "getSignature": {
                        "name": "requiresEmailValid",
                        "type": "",
                        "returnType": "",
                        "line": 207
                    }
                },
                "requiresPhoneValid": {
                    "name": "requiresPhoneValid",
                    "getSignature": {
                        "name": "requiresPhoneValid",
                        "type": "",
                        "returnType": "",
                        "line": 211
                    }
                },
                "formControler": {
                    "name": "formControler",
                    "getSignature": {
                        "name": "formControler",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 215
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 235
                    }
                }
            },
            "templateData": "<div id=\"parent3\"  [hidden]=\"storyInput?.hide\" [ngClass]=\"classes\"  >\r\n  <div id=\"parent1\" >\r\n    <div class=\"main\"  [formGroup]=\"this.currentForm\">\r\n      <div>\r\n        <a class=\"user-name D-Caps-Regular\">{{storyInput?.state}}</a>\r\n\r\n        <br>\r\n        <span [ngSwitch]=\"storyInput?.type\">\r\n          <span *ngSwitchCase=\"'password'\" >\r\n            <storybook-button-continue   size=\"small\" label=\"Change Password\" type=\"button\" (onClick)=\"this.changePassword.emit()\" >\r\n            </storybook-button-continue>\r\n          </span>\r\n          <span *ngSwitchCase=\"'enable-profile-picture'\" >\r\n            <label class=\"UserNameType\" >{{storyInput?.title}}  </label>\r\n            <div class=\"user-checkbox-header\">\r\n            <input  style=\"position: relative; margin: 0 2px 0 2px;   top: 1px; right: 3px;\"  type=\"checkbox\"/>\r\n            <label class=\"EnableProfilePicture\" >Enable Profile Picture</label>\r\n\r\n              <!--img src=\"./assets/images/EditIconA.png\" class=\"icon-input-edit\" alt=\"icon input type\" /-->\r\n\r\n            </div>\r\n          </span>\r\n          <span *ngSwitchDefault >\r\n            <label  [attr.aria-label]=\"storyInput?.id + ''\" for=\"{{ storyInput?.title }}\" class=\"Vector2 \">\r\n              <img src=\"{{ storyInput?.icon }}\" class=\"icon-input\" alt=\"icon input userName\"  name=\"{{ storyInput?.title }}\" />\r\n              <div [inputPopover] = \"this.popover\" [data]=\"this.getErrorList(this.conditionList)\" [header]=\"this.getErrorHeader(this.storyInput.title)\">\r\n                <input\r\n                  type=\"{{storyInput?.type}}\"\r\n                  id=\"{{ storyInput?.id }}\"\r\n                  class=\"inputField\"\r\n                  name=\"{{storyInput?.title}}\"\r\n                  formControlName=\"{{storyInput?.title}}\"\r\n                  placeholder=\"{{storyInput?.placeholder}}\"\r\n                  required />\r\n              </div>\r\n\r\n\r\n              <br>\r\n\r\n\r\n            </label>\r\n\r\n            <button  class=\"icon-input-edit\"  type=\"button\">\r\n              <img src=\"./assets/images/EditIconA.png\" class=\"icon-input-edit\" alt=\"icon input type\" />\r\n            </button>\r\n          </span>\r\n        </span>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n</div>\r\n"
        },
        {
            "name": "ActionAvatarComponent",
            "id": "component-ActionAvatarComponent-0ae8a40bed9461b131d0fa083a36ce03a575862caddb7f48cd20d2e21b35e1cfa320dc51a7bb6452c99d1f903b2d1cec6d856b89bb4a0a38981aa64689d2fdfe",
            "file": "src/stories/actions/action-avatar/action-avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "action-avatar",
            "styleUrls": [
                "./action-avatar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./action-avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "actionButton",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actionHeader",
                    "defaultValue": "\"Your password will expire in 3 Days.\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "bubbleOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setBubbleOn",
                    "args": [
                        {
                            "name": "bubbleOn",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "bubbleOn",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeader",
                    "args": [
                        {
                            "name": "actionHeader",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionHeader",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\nimport {ActionInput} from \"../action-input/action-input.interface\";\r\n\r\n@Component({\r\n  selector: 'action-avatar',\r\n  templateUrl: './action-avatar.component.html',\r\n  styleUrls: ['./action-avatar.component.css']\r\n})\r\nexport class ActionAvatarComponent implements OnInit {\r\n\r\n  bubbleOn?: boolean;\r\n  actionHeader?: string = \"Your password will expire in 3 Days.\";\r\n\r\n  @Output() actionButton = new EventEmitter<any>();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public setHeader(actionHeader: string) {\r\n    this.actionHeader = actionHeader;\r\n  }\r\n\r\n  public setBubbleOn(bubbleOn: boolean) {\r\n    this.bubbleOn = bubbleOn;\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".password-alert-text {\r\n\r\n  /* D Regular */\r\n  text-align: start;\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* or 183% */\r\n\r\n  letter-spacing: -0.011em;\r\n\r\n  color: #000000;\r\n\r\n}\r\n\r\n.action-text {\r\n  text-decoration-line: underline;\r\n}\r\n\r\n\r\n\r\n",
                    "styleUrl": "./action-avatar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"password-alert-text\">\r\n<p>\r\n  {{this.actionHeader}}\r\n</p>\r\n<a [highlight]=\"'red'\" [colorName]=\"'red'\" (click)=\"this.actionButton.emit()\" class=\"action-text\" >Change it now ></a>\r\n</div>\r\n"
        },
        {
            "name": "ActionInputComponent",
            "id": "component-ActionInputComponent-c32a2004d42002764c7dde93c9a6305e45a02cdb58f10874db346dc34a55485151d55dbd3e8dd0334a8cfe9842e80b3919e9ca6c01d1c1a30aa12b018f4e061f",
            "file": "src/stories/actions/action-input/action-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "action-input",
            "styleUrls": [
                "./action-input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./action-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actionHeader",
                    "defaultValue": "\"The password must contain:\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "actionInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionInput[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setConditions",
                    "args": [
                        {
                            "name": "actionInputs",
                            "type": "ActionInput[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionInputs",
                            "type": "ActionInput[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeader",
                    "args": [
                        {
                            "name": "actionHeader",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionHeader",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {ActionInput} from \"./action-input.interface\";\r\n\r\n\r\ninterface USERS {\r\n  conditionName: String;\r\n  presentingMessage: String;\r\n  isFulfilled: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'action-input',\r\n  templateUrl: './action-input.component.html',\r\n  styleUrls: ['./action-input.component.css']\r\n})\r\nexport class ActionInputComponent implements OnInit {\r\n\r\n  actionInputs?: ActionInput[];\r\n  actionHeader?: string = \"The password must contain:\";\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public setConditions(actionInputs: ActionInput[]) {\r\n    this.actionInputs = actionInputs;\r\n  }\r\n\r\n  public setHeader(actionHeader: string) {\r\n    this.actionHeader = actionHeader;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".password-alert-text {\r\n\r\n\r\n  /* D Regular */\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  font-size: 13px;\r\n  line-height: 12px;\r\n  text-align: start;\r\n  /* or 94% */\r\n\r\n  letter-spacing: -0.011em;\r\n\r\n  color: #0A0000;\r\n\r\n}\r\n\r\n.password-condition-text {\r\n\r\n\r\n  /* D Regular */\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  font-size: 13px;\r\n  line-height: 25px;\r\n  /* or 94% */\r\n\r\n  letter-spacing: -0.011em;\r\n\r\n  color: #0A0000;\r\n\r\n}\r\n\r\n",
                    "styleUrl": "./action-input.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"password-alert-text\" Style=\"text-indent: 27px; padding-bottom: 15px\">\r\n<tr><strong>{{this.actionHeader}}</strong></tr>\r\n</div>\r\n<div >\r\n\r\n  <table >\r\n\r\n    <!--thead>\r\n\r\n    </thead-->\r\n    <tbody>\r\n      <tr *ngFor=\"let actionInput of actionInputs\">\r\n        <td  *ngIf=\"actionInput.isFulfilled\" Style=\"color: green\">✔</td>\r\n        <td  *ngIf=\"!actionInput.isFulfilled\" Style=\"color: red\">X</td>\r\n        <td Style=\"text-indent: 7px\">{{ actionInput.presentingMessage }}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n\r\n\r\n</div>\r\n"
        },
        {
            "name": "ActionsComponent",
            "id": "component-ActionsComponent-7b03e6016c60d54d20459ab5ce6b4103c5bc961c02733472c91fa99258b9722613c41ba8e91002c51dfc3ef6db41ce045765b305abab05273ce73b26ec5897ad",
            "file": "src/stories/actions/actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-actions",
            "styleUrls": [
                "./actions.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./actions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-actions',\r\n  templateUrl: './actions.component.html',\r\n  styleUrls: ['./actions.component.css']\r\n})\r\nexport class ActionsComponent implements OnInit {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".password-alert-text {\r\n\r\n  /* D Regular */\r\n  text-align: start;\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* or 183% */\r\n\r\n  letter-spacing: -0.011em;\r\n\r\n  color: #000000;\r\n\r\n}\r\n\r\n\r\n\r\n",
                    "styleUrl": "./actions.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"password-alert-text\">\r\n<p>\r\nYour password will expire in 3 Days.\r\n</p>\r\n<a style=\"text-decoration-line: underline;\">Change it now ></a>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-589e2d8add012654359ce15c31cd47f36db72561865de682d8eb997c895261e6e9f1eb200389840a69974f2920ed4389061c81787519bb87d6c5df6cc333734e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eventBusSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "showAdminBoard",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showModeratorBoard",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "is2SVRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy  } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { TokenStorageService } from './_services/token-storage.service';\r\nimport { EventBusService } from './_shared/event-bus.service';\r\nimport {Router} from \"@angular/router\";\r\nimport {workingModeConfiguration} from \"./app.config\";\r\nimport { UserService } from 'src/app/_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  private roles: string[] = [];\r\n  public isLoggedIn = false;\r\n  showAdminBoard = false;\r\n  showModeratorBoard = false;\r\n  username?: string;\r\n  eventBusSub?: Subscription;\r\n  title?: 'accGate';\r\n\r\n  constructor(private tokenStorageService: TokenStorageService,\r\n              private eventBusService: EventBusService,\r\n              private userService: UserService,\r\n              private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\r\n\r\n    if (this.isLoggedIn) {\r\n      const user = this.tokenStorageService.getUser();\r\n      this.roles = user.roles;\r\n\r\n      this.showAdminBoard = (this.roles.includes('Admin') || this.roles.includes('SupervisorAdmin'));\r\n      this.showModeratorBoard = this.roles.includes('SupervisorMonitor');\r\n\r\n      this.username = user.username;\r\n    }\r\n\r\n    this.eventBusSub = this.eventBusService.on('logout', () => {\r\n      this.logout();\r\n    });\r\n\r\n    this.eventBusSub = this.eventBusService.on('is2SVRequired', () => {\r\n      this.is2SVRequired();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.eventBusSub)\r\n      this.eventBusSub.unsubscribe();\r\n  }\r\n\r\n  logout(): void {\r\n    console.log(\"logging out\")\r\n    this.tokenStorageService.signOut();\r\n    this.isLoggedIn = false;\r\n    this.roles = [];\r\n    this.showAdminBoard = false;\r\n    this.showModeratorBoard = false;\r\n    this.router.navigate(['/login2']);\r\n  }\r\n\r\n  is2SVRequired(): void {\r\n    console.log(\"is2SVRequired: \")\r\n    this.userService.isTowStepVerRequired().subscribe(\r\n      data => { console.log(\"data.data: \" + data.data);\r\n        console.log(\"data.message: \" + data.message);\r\n        workingModeConfiguration.runMode.TSV = (data.data);\r\n        console.log(\"workingModeConfiguration.runMode.TSV: \" + workingModeConfiguration.runMode.TSV.toString());},\r\n      err => { console.log(\"Can't detect 2SV operation mode:  \"+ err.error); }\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tokenStorageService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "tokenStorageService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\r\n<router-outlet  id=\"app\" ></router-outlet>\r\n\r\n<!--div id=\"app\">\r\n  <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\r\n\r\n    <a href=\"#\" class=\"navbar-brand\">\r\n      <img _ngcontent-c0=\"accGate\" class=\"nav-img\" srcset=\"./assets/images/TadiranTelecom2.webp\"  width=\"56\"\r\n           height=\"56\"><label>accGate</label>\r\n    </a>\r\n    <ul class=\"navbar-nav mr-auto\" routerLinkActive=\"active\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/login-main\" class=\"nav-link\" routerLink=\"login-main\">Page </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/home\" class=\"nav-link\" routerLink=\"home\">Home </a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showAdminBoard\">\r\n        <a href=\"/admin\" class=\"nav-link\" routerLink=\"admin\">Admin Board</a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showModeratorBoard\">\r\n        <a href=\"/mod\" class=\"nav-link\" routerLink=\"mod\">Moderator Board</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/user\" class=\"nav-link\" *ngIf=\"isRegSuccess\" routerLink=\"user\">User</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"!isRegSuccess\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/register\" class=\"nav-link\" routerLink=\"register\">Sign Up</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/login\" class=\"nav-link\" routerLink=\"login\">Login</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"isRegSuccess\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/profile\" class=\"nav-link\" routerLink=\"profile\">{{ username }}</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href class=\"nav-link\" (click)=\"logout()\">LogOut</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div-->\r\n"
        },
        {
            "name": "AppMenuComponent",
            "id": "component-AppMenuComponent-c40e7eaec6c2c04aa2759e63dc53cec6d48b01804fc39b1088df7b70aa90c96a07a676f5171d198d40eec5c57ea64c908f179fe8616ef876e13ddf7380471378",
            "file": "src/stories/app-menu/app-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-app-menu",
            "styleUrls": [
                "./app-menu.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "AuthService",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "profileApps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "storyInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "StoryInput[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "openNewTabForApp",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter"
                },
                {
                    "name": "openNewWinForApp",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "credentials",
                    "defaultValue": "{\r\n    username: null,\r\n    password: null\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "isLoginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "loginErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "validationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openReplacePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../inputs/input/story-input.model\";\r\nimport { AuthService } from '../../app/_services/auth.service';\r\nimport {MdbModalRef} from \"mdb-angular-ui-kit/modal\";\r\n//import {Profile2Expose} from \"src/app/profile2/profile2.interface\";\r\n\r\nexport interface Profile2Expose {\r\n  agent: boolean;\r\n  realtime: boolean;\r\n  scriptDesigner: boolean;\r\n  admin: boolean;\r\n  aeonixAdmin: boolean;\r\n}\r\n\r\nexport interface AeonixAppCenterForm {\r\n  username: null, //new FormControl('ea2', Validators.min(2)),\r\n  password: null  //new FormControl('zaqwsx', Validators.min(2))\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-app-menu',\r\n  templateUrl: './app-menu.component.html',\r\n  styleUrls: ['./app-menu.css'],\r\n})\r\nexport class AppMenuComponent implements OnInit {\r\n\r\n  /*form: AeonixAppCenterForm = {\r\n    username: null,     //new FormControl('ea2', Validators.min(2)),\r\n    password: null      //new FormControl('zaqwsx', Validators.min(2))\r\n  };*/\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  isLoginFailed = false;\r\n  loginErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  constructor() {\r\n    this.validationForm = new FormGroup({\r\n      username: new FormControl('Telecom2', Validators.minLength(2)),\r\n      //email: new FormControl(null, Validators.email),\r\n      password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n      //phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  validationForm: FormGroup;\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() openNewWinForApp = new EventEmitter<any>();\r\n\r\n  @Output() openNewTabForApp = new EventEmitter<any>();\r\n\r\n  @Input() profileApps?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n    this.credentials.username=this.validationForm.get('username')?.value;\r\n    this.credentials.password=this.validationForm.get('password')?.value;\r\n\r\n    this.openNewWinForApp.emit(this.credentials);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.validationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.validationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.validationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.validationForm.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n.card-container.card {\r\n  max-width: 1000px !important;\r\n  padding: 10px 10px;\r\n  /*top: 5.18%;\r\n  bottom: 4.78%;*/\r\n\r\n}\r\n\r\nstorybook-spinner1 {\r\n  position: absolute;\r\n  width: 70px;\r\n  height: 70px;\r\n  left: calc(50% - 75px/2 - 0.25px);\r\n  top: calc(50% - 70px/2 - 0.5px);\r\n}\r\n\r\n.grid-container {\r\n  display: grid;\r\n  justify-content: center;\r\n  grid-template-columns: auto auto auto auto auto auto;\r\n  gap: 10%;\r\n  background-color: #2196F3;\r\n  padding: 0px;\r\n}\r\n\r\n.grid-container > div {\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n  text-align: center;\r\n  padding: 0 0;\r\n  font-size: 30px;\r\n}\r\n\r\n.item1 {\r\n  grid-area: 1 / 1 / span 1 / span 2;\r\n}\r\n.item2 {\r\n  grid-area: 1 / 3 / span 1 / span 2;\r\n}\r\n.item3 {\r\n  grid-area: 1 / 5 / span 1 / span 2;\r\n}\r\n\r\n.item4 {\r\n  grid-area: 2 / 2 / span 1 / span 2;\r\n}\r\n.item5 {\r\n  grid-area: 2 / 4 / span 1 / span 2;\r\n}\r\n\r\n\r\n.col-md-12{\r\n  position: center;\r\n  width: 965px;\r\n  height: 819px;\r\n  left: calc(50% - 965px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n  border-radius: 32px;\r\n\r\n}\r\n\r\n.Aeonix-App-Center {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  /*width: 447px;*/\r\n  height: 82px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n",
                    "styleUrl": "./app-menu.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 48
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "storyInputs": {
                    "name": "storyInputs",
                    "setSignature": {
                        "name": "storyInputs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 110
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 114
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 118
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 122
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\" ></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <div class=\"Aeonix-App-Center\">\r\n      <a>Aeonix App Center</a>\r\n    </div>\r\n    <div><storybook-spinner1  *ngIf=\"isLoading\"></storybook-spinner1></div>\r\n\r\n    <div class=\"grid-container\">\r\n      <div class=\"item1\"><storybook-button-apps application=\"Agent\" label=\"Continue\" type=\"button\" [isDisabled]=\"!profileApps?.agent\"\r\n        id=\"openNewAgentTab\" (click)='this.openNewWinForApp.emit([\"AGENT\",\"/accAgent/\"])'  ></storybook-button-apps></div>\r\n      <div class=\"item2\"><storybook-button-apps application=\"WebRT\" label=\"Continue\" type=\"button\" [isDisabled]=\"!profileApps?.realtime\"\r\n        id=\"openNewWebRTTab\" (click)='this.openNewTabForApp.emit([\"ACCREALTIME\",\"/accRealTime/\"])' ></storybook-button-apps></div>\r\n      <div class=\"item3\"><storybook-button-apps application=\"Script-Designer\" label=\"Continue\" type=\"button\" [isDisabled]=\"!profileApps?.scriptDesigner\"\r\n        id=\"openNewGccsTab\" (click)='this.openNewTabForApp.emit([\"GCCS\",\"/accGCCS/\"])' ></storybook-button-apps></div>\r\n      <div class=\"item4\"><storybook-button-apps application=\"Admin\" label=\"Continue\" type=\"button\" [isDisabled]=\"!profileApps?.admin\"\r\n        ></storybook-button-apps></div>\r\n      <div class=\"item5\"><storybook-button-apps application=\"Aeonix-Admin\" label=\"Continue\" type=\"button\" [isDisabled]=\"!profileApps?.aeonixAdmin\"\r\n        id=\"openNewGccsTab2\" (click)='this.openNewTabForApp.emit([\"GCCS\",\"/accGCCS/\"])' ></storybook-button-apps></div>\r\n    </div>\r\n\r\n\r\n\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-b8ac8e13906d5d8ba764b4f75434daab52abfdc313ae684297d25a9605501961e601610b1cc64f831be5db797450c6f85531b452ea9f948cd94f04ac9bdbfec0",
            "file": "src/stories/avatars/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-avatar",
            "styleUrls": [
                "./avatar.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "'header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 583,
                            "end": 596,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 584,
                                "end": 592,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nHeader contents\n\n",
                    "description": "<p>Header contents</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isNotify",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1085,
                            "end": 1098,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1086,
                                "end": 1094,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 55,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionButton",
                    "defaultValue": "new EventEmitter<any> ()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 69,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "popover",
                    "defaultValue": "{\n    content: ActionAvatarComponent\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopoverOptions",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n} from '@angular/core';\nimport {PopoverOptions} from \"../directive/popover.interface\";\nimport {ActionAvatarComponent} from \"../actions/action-avatar/action-avatar.component\";\n/**/\n@Component({\n  selector: 'storybook-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.scss'],\n})\nexport  class AvatarComponent {\n  popover: PopoverOptions = {\n    content: ActionAvatarComponent\n  };\n\n\n  @Output() actionButton: EventEmitter<any> = new EventEmitter<any> ();\n\n  /**\n   * Header contents\n   *\n   * @required\n   */\n  @Input()\n  header? = 'header';\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  isNotify: boolean = false;\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-avatar--primary' : 'storybook-avatar--secondary';\n\n    return ['storybook-avatar', `storybook-avatar--${this.size}`, mode];\n  }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\n.storybook-avatar {\n  position: absolute;\n  width: 114px;\n  height: calc(10px + 58.37px + 32px + 5px);\n}\n\n.main {\n  position: absolute;\n  width: 114px;\n  height: calc(58.37px + 32px + 5px);\n  margin: 0 0 0 0;\n  padding: 0;\n  border-color: rgba(46, 138, 0, 0.97);\n  /*filter: drop-shadow(0px 1px 1px rgba(61, 142, 207, 0.96));*/\n\n}\n\n\n.circle {\n  position: absolute;\n  width: 58px;\n  height: 58px;\n  left: calc(114px/2 - 58px/2);\n  top: 10px;\n  /*padding: 2px;*/\n\n  /*top: 0;\n  /*bottom: 1.1%;*/\n  border-radius: 50%;\n\n  /* Blue */\n  border: 2px solid #3D8ECF;\n}\n\n\nimg.Avatar-Icon {\n  position: absolute;\n  width: 19.95px;\n  height: 23.02px;\n  left: 33.33%;\n  right: 31.67%;\n  top: 28.57%;\n  bottom: 31.05%;\n\n\n  /*transform: matrix(-1, 0, 0, 1, 0, 0);*/\n\n  object-fit: fill;\n  /*box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\n}\n\n.Avatar-Label {\n  position: absolute;\n  width: 114px;\n  height: 33px;\n  /*horiz-align: center;*/\n  top: calc(10px + 57px + 10px);\n  left: 0;\n\n}\n\n\n.a.font {\n  position: absolute;\n  width: 114px;\n  height: 32px;\n  bottom: 0;\n  /*width: 447px;*/\n  font-family: \"Noto Sans\", ui-serif;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 17px;\n  line-height: 31px;\n  /*display: flex;*/\n  align-items: start;\n  text-align: center;\n  letter-spacing: -0.011em;\n  color: #000000;\n}\n\n.exclamation-mark {\n  position: absolute;\n  //border: 2px solid #4ca7af;\n  /*horiz-align: center;*/\n  top: calc(1px);\n  left: calc(114px/2 + 58px/2 - 35px/2);\n\n}\n\n.storybook-avatar--primary {\n  color: white;\n}\n.storybook-avatar--secondary {\n  color: #000000;\n  background-color: transparent;\n}\n.storybook-avatar--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-avatar--medium {\n  color: #000000;\n  font-size: 17px;\n  padding: 0 0;\n}\n.storybook-avatar--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./avatar.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 71
                    }
                }
            },
            "templateData": "\r\n<div [twPopover] = \"this.popover\" header=\"{{this.header}}\" [bubbleOn]=\"this.isNotify\" (actionButton)=\"this.actionButton.emit($event)\">\r\n<!-- a (mouseover)=\"popover.show()\" (mouseleave)=\"popover.hide()\"\r\n   class=\"form-check-label white-text\"   mdbPopoverTitle=\"Account recovery\" #popover=\"mdbPopover\"\r\n   mdbPopover=\"To help keep your account safe, we will make sure that it’s really you trying to sign in\">\r\n</a\r\n  Forgot password?-->\r\n\r\n\r\n<button class=\"main\" highlight=\"blue\" colorName=\"blue\"\r\n        type=\"button\"\r\n        (click)=\"onClick.emit($event)\"\r\n        [ngClass]=\"classes\"\r\n        [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n\r\n  <div class=\"circle\">\r\n\r\n    <img src=\"./assets/images/ProfileIcon-70.svg\" srcset=\"./assets/images/ProfileIcon-70@2x.png, ./assets/images/ProfileIcon-70@3x.png\"\r\n         class=\"Avatar-Icon\"  alt=\"profile-image\">\r\n\r\n  </div>\r\n  <storybook-button-exclamation-mark  *ngIf=\"this.isNotify\" class=\"exclamation-mark\" size=\"small\" ></storybook-button-exclamation-mark>\r\n  <div class=\"Avatar-Label\"><a class=\"font\">{{ label }}</a></div>\r\n</button>\r\n\r\n</div>\r\n"
        },
        {
            "name": "Background1Component",
            "id": "component-Background1Component-b5c07ed8068a3c2021dc0bd75c571850a3a16ace0f7488c8054a8c5676bb31d9652e88e60553cea875689c12aae17ecb88f01e440941031eb36699c0532b1e30",
            "file": "src/stories/pages/background1/background1Component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-background1",
            "styleUrls": [
                "./background1Component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./background1Component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "background",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Page2Component'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 557,
                            "end": 570,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 558,
                                "end": 566,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n\n\n@Component({\n  selector: 'storybook-background1',\n  templateUrl: './background1Component.html',\n  styleUrls: ['./background1Component.scss']\n})\nexport default class Background1Component {\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = true;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  background?: string;\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Page2Component';\n\n  /*user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n\n  }*/\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-background1--primary' : 'storybook-background1--secondary';\n\n    return ['storybook-background1', mode];\n  }\n\n  constructor() {}\n\n\n\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.storybook-background1 {\r\n  position: absolute;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n.Desktop-1Login-1 {\r\n  width: 100%;\r\n  height: 100%;\r\n  flex-grow: 0;\r\n}\r\n\r\n\r\ndiv.relative {\r\n  position: relative;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n\r\n\r\n\r\n.Frame-1 {\r\n  width: 1920px;\r\n  height: 1080px;\r\n  flex-grow: 0;\r\n}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\nimg.icon-1 {\r\n  position: absolute;\r\n  width: 305.7px;\r\n  height: 309px;\r\n  transform: rotate(0deg);\r\n  background-position: bottom;\r\n}\r\n\r\nimg.icon-2 {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 372px;\r\n  height: 343px;\r\n  flex-grow: 0;\r\n}\r\n\r\n\r\n.storybook-background1--primary {\r\n\r\n  background: linear-gradient(228.37deg, #EFF8FF 22.25%, #B0DCFF 88.18%);\r\n}\r\n",
                    "styleUrl": "./background1Component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 59
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 55
                    }
                }
            },
            "templateData": "\r\n<figure class=\"Desktop-1Login-1\"  [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': background }\" >\r\n  <!--div [ngStyle]=\"{ 'background-color': background }\" ></div-->\r\n  <img src=\"assets/images/icon-1.webp\" srcset=\"./assets/images/icon-1@2x.webp 2x, /assets/images/icon-1@3x.webp 3x\"\r\n       alt=\"icon-1\" />\r\n\r\n  <img src=\"assets/images/icon-2.webp\" srcset=\"./assets/images/icon-2@2x.webp 2x, /assets/images/icon-2@3x.webp 3x\"\r\n       class=\"icon-2  \" alt=\"icon-2fdf\" />\r\n\r\n\r\n</figure>\r\n\r\n<storybook-button-language size=\"large\"></storybook-button-language>\r\n<storybook-button-tadiran></storybook-button-tadiran>\r\n<storybook-button-globe hidden ></storybook-button-globe>\r\n"
        },
        {
            "name": "BoardAdmin2Component",
            "id": "component-BoardAdmin2Component-d82ea1e753a2e22e615d42fd771e2f3a0dfeb3a3465ff5fdf3831eaf5f2eee630014beaeabb3ad6e5af03c64ec81ef3eec1d8240f0d1081c0b2a3aa0ed625286",
            "file": "src/app/login2/profile2/board-admin2/board-admin2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-admin2",
            "styleUrls": [
                "./board-admin2.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-admin2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "validateMail",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter<String>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "apiResponse",
                    "defaultValue": "{ message: '', error: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "configurationData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "configurationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "empList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "errorFieldSubmitted",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'form', {static: false}"
                        }
                    ]
                },
                {
                    "name": "isRegFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isRegSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "properties",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Prop>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "regErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[\r\n    {...mStoryInput.PassExpDays.args?.['storyInput'], id: '1'  },\r\n    {...mStoryInput.PreviousAlertPassExpDays.args?.['storyInput'], id: '2'  },\r\n    {...mStoryInput.TSV.args?.['storyInput'], id: '3'  },\r\n    {...mStoryInput.DdlAuto.args?.['storyInput'], id: '4'  },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigurationInput[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "userField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'username', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeNameToField",
                    "args": [
                        {
                            "name": "propName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "propName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getConfigurationData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openChangePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "returnPortal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter,Inject, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { UserService } from 'src/app/_services/user.service';\r\nimport {AuthService} from \"src/app/_services/auth.service\";\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {ConfigurationInput} from \"../../../../stories/inputs/configuration-input/configuration-input.model\";\r\nimport {EventBusService} from \"../../../_shared/event-bus.service\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport MyAccountFormComponent from \"../../../../stories/forms/my-account-form/my-account-form.component\";\r\nimport * as mStoryInput from \"../../../../stories/inputs/configuration-input/configuration-input.stories\";\r\nimport {PasswordValidators} from \"../../login-main/replace-pass-form2/replace-pass-form2.component\";\r\nimport {throwError} from \"rxjs\";\r\nimport {EventData} from \"../../../_shared/event.class\";\r\nimport {MyAccountData} from \"../my-account-form2/my-account-form2.component\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n\r\nexport interface Prop {\r\n  propName: String;\r\n  propValue: String;\r\n\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-board-admin2',\r\n  templateUrl: './board-admin2.component.html',\r\n  styleUrls: ['./board-admin2.component.css']\r\n})\r\nexport class BoardAdmin2Component implements OnInit {\r\n  configurationForm: FormGroup;\r\n  isRegSuccess = false;\r\n  isRegFailed = false;\r\n  submitted = false;\r\n  regErrorMessage: any;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  @ViewChild('username', { static: false }) userField?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  configurationData: any;\r\n  closeResult = '';\r\n\r\n  properties: Array<Prop>= [];\r\n\r\n\r\n\r\n\r\n\r\n  @Output() validateMail: EventEmitter<String> = new EventEmitter();\r\n\r\n  storyInputsInOrder: ConfigurationInput[]  = [\r\n    {...mStoryInput.PassExpDays.args?.['storyInput'], id: '1'  },\r\n    {...mStoryInput.PreviousAlertPassExpDays.args?.['storyInput'], id: '2'  },\r\n    {...mStoryInput.TSV.args?.['storyInput'], id: '3'  },\r\n    {...mStoryInput.DdlAuto.args?.['storyInput'], id: '4'  },\r\n  ];\r\n\r\n  constructor(private eventBusService: EventBusService,\r\n              private token: TokenStorageService,\r\n              private authService: AuthService,\r\n              private router: Router,\r\n              private activatedRoute:ActivatedRoute,\r\n              /*public dialogRef: MatDialogRef<MyAccountFormComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: MyAccountData*/) {\r\n    this.configurationForm = new FormGroup({\r\n      tadiran_gate_passExpDays: new FormControl(22),\r\n      tadiran_gate_PreviousAlertPassExpDays: new FormControl(15),\r\n      tadiran_gate_TSV: new FormControl(false),/**/\r\n      spring_jpa_hibernate_ddlAuto: new FormControl('create'),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getConfigurationData();\r\n    /*this.userService.getAccountDetails().subscribe(\r\n      data => { this.accountDetails = data; },\r\n      err => { this.accountDetails = JSON.parse(err.error).message; }\r\n    );*/\r\n  }\r\n\r\n\r\n  // Change name of property Ex. \"tadiran.gate.pass-exp-days\" => \"tadiran_gate_passExpDays\"\r\n  changeNameToField(propName: string) {\r\n    return propName.replace(/\\./gi,'_')\r\n      .split(\"-\").map(function(input){return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : ''}).join(\"\");\r\n  }\r\n\r\n  getConfigurationData(): void {\r\n    //let prop: any;\r\n    const token = this.token.getToken();\r\n    if (token)\r\n      this.authService.getConfigurationData(token).subscribe(configurationData => {\r\n        this.configurationData=configurationData;\r\n\r\n        this.properties = (this.configurationData.prop as Array<Prop>);\r\n        this.properties.forEach((p ) => {\r\n          let configInput = this.storyInputsInOrder.find(configInput => configInput.type.match(p.propName.valueOf().toString()));\r\n          if (configInput != null) {\r\n            let pn = p.propName.replace(/\\./gi,'_');\r\n            this.configurationForm.get(configInput.name)?.setValue(p.propValue);\r\n            console.log(\"propValue:   \"+p.propValue);\r\n          }\r\n          //let prop: new Prop\r\n        });\r\n\r\n        console.log('Account Details is received from server.');\r\n      }, (err) => {\r\n        console.log('Can not get user account details');\r\n        return throwError(err);\r\n      });\r\n\r\n  }\r\n\r\n  doLogout(): void {\r\n    console.log(\"logging out\");\r\n    this.eventBusService.emit(new EventData('logout', null));\r\n  }\r\n\r\n  openChangePassword() {\r\n    this.eventBusService.emit(new EventData('openChangePassword', null));\r\n  }\r\n\r\n  returnPortal() {\r\n    //todo: display warn message to user - changes will not be saved!\r\n    console.log(\"openPortal\");\r\n    this.router.navigate(['../'], {relativeTo: this.activatedRoute});\r\n    //this.eventBusService.emit(new EventData('openPortal', null));\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.isRegSuccess) {\r\n      //todo: Display confirmation message - changes have been applied!\r\n    }\r\n    else {\r\n      this.submitted = true;\r\n      const { username, password, email, phone } = this.configurationForm.getRawValue();\r\n\r\n\r\n      this.authService.setConfigurationData(username).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.isRegSuccess = true;\r\n          this.isRegFailed = false;\r\n          this.errorFieldSubmitted = {} ;\r\n          this.apiResponse.error = false;\r\n          this.apiResponse.message = 'Successful registration';\r\n        },\r\n        error => {\r\n          const errorResponse = JSON.parse(error.error);\r\n          this.apiResponse.error = true;\r\n          this.apiResponse.message = 'Registration error';\r\n          this.regErrorMessage = errorResponse;\r\n          this.isRegFailed = true;\r\n          if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n            this.errorFieldSubmitted = errorResponse.data;\r\n          }\r\n        },\r\n        () => {\r\n          console.log(\"Configuration Saved\");}\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "label {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.card-container {\r\n  max-width: 50% !important;\r\n  padding: 40px 40px;\r\n}\r\n\r\n.col-md-12{\r\n  position: center;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.card {\r\n  background-color: #f7f7f7;\r\n  padding: 20px 25px 30px;\r\n  margin: 0 auto 25px;\r\n  margin-top: 50px;\r\n  -moz-border-radius: 2px;\r\n  -webkit-border-radius: 2px;\r\n\r\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  border-radius: 3em;\r\n}\r\n\r\n.profile-img-card {\r\n  width: 96px;\r\n  height: 96px;\r\n  margin: 0 auto 10px;\r\n  display: block;\r\n  -moz-border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  border-radius: 50%;\r\n}\r\n\r\n.input-box {\r\n  position: relative;\r\n  max-width: 100%;\r\n}\r\n\r\n\r\n.input-label {\r\n  position: sticky;\r\n  display: inline;\r\n\r\n  width: 150px;\r\n  left: 1px;\r\n}\r\n\r\n\r\n\r\n.input-field {\r\n  position: absolute;\r\n  display: inline;\r\n  width: 150px;\r\n  right: 1px;\r\n  border-radius: 9px;\r\n\r\n\r\n}\r\n\r\n.save-changes-button {\r\n  align-items: center;\r\n  width: 150px;\r\n}\r\n\r\n",
                    "styleUrl": "./board-admin2.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "token",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "token",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<storybook-background1></storybook-background1>\r\n\r\n<storybook-configuration-form  #form\r\n                               [isRegSuccess]=\"isRegSuccess\"\r\n                               [isRegFailed]=\"isRegFailed\"\r\n                               [regErrorMessage]=\"regErrorMessage\"\r\n                               [storyInputs]=\"storyInputsInOrder\"\r\n                               [mForm]=\"configurationForm\"\r\n                               (saveChanges)=\"onSubmit()\"\r\n                               (clickXButton)=\"returnPortal()\"\r\n                               (onLogout)=\"doLogout()\"\r\n                               (changePassword)=\"openChangePassword()\">\r\n</storybook-configuration-form>\r\n\r\n\r\n"
        },
        {
            "name": "BoardAdminComponent",
            "id": "component-BoardAdminComponent-08ad466c47c60df8f15b262d06b955dd8c06defd258f88cd5f8d4a58cceba4df3d647fbabb1c2ac4cd4870bc21137d9bb2e65c775d95428d0aa65a263c876d68",
            "file": "src/app/login2/profile2/board-admin/board-admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-admin",
            "styleUrls": [
                "./board-admin.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "form",
                    "defaultValue": "{\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null,\r\n    roles: null,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isSignUpFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isSuccessful",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "rolesList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from 'src/app/_services/user.service';\r\nimport {AuthService} from \"src/app/_services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'app-board-admin',\r\n  templateUrl: './board-admin.component.html',\r\n  styleUrls: ['./board-admin.component.css']\r\n})\r\nexport class BoardAdminComponent implements OnInit {\r\n  content?: string;\r\n  form: any = {\r\n    username: null,\r\n    email: null/*new FormControl('', Validators.email)*/,\r\n    password: null,\r\n    roles: null,\r\n  };\r\n  isSuccessful = false;\r\n  isSignUpFailed = false;\r\n  errorMessage = '';\r\n  rolesList: Array<String> = [];\r\n\r\n  constructor(private userService: UserService, private authService: AuthService) {\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getAdminBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const { username, email, password, roles } = this.form;\r\n    this.rolesList.push(roles);\r\n\r\n    this.authService.register(username, email, password, this.rolesList).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.isSuccessful = true;\r\n        this.isSignUpFailed = false;\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isSignUpFailed = true;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "label {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.card-container {\r\n  max-width: 50% !important;\r\n  padding: 40px 40px;\r\n}\r\n\r\n.col-md-12{\r\n  position: center;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.card {\r\n  background-color: #f7f7f7;\r\n  padding: 20px 25px 30px;\r\n  margin: 0 auto 25px;\r\n  margin-top: 50px;\r\n  -moz-border-radius: 2px;\r\n  -webkit-border-radius: 2px;\r\n\r\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  border-radius: 3em;\r\n}\r\n\r\n.profile-img-card {\r\n  width: 96px;\r\n  height: 96px;\r\n  margin: 0 auto 10px;\r\n  display: block;\r\n  -moz-border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  border-radius: 50%;\r\n}\r\n\r\n.input-box {\r\n  position: relative;\r\n  max-width: 100%;\r\n}\r\n\r\n\r\n.input-label {\r\n  position: sticky;\r\n  display: inline;\r\n\r\n  width: 150px;\r\n  left: 1px;\r\n}\r\n\r\n\r\n\r\n.input-field {\r\n  position: absolute;\r\n  display: inline;\r\n  width: 150px;\r\n  right: 1px;\r\n  border-radius: 9px;\r\n\r\n\r\n}\r\n\r\n.save-changes-button {\r\n  align-items: center;\r\n  width: 150px;\r\n}\r\n\r\n",
                    "styleUrl": "./board-admin.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<storybook-background1></storybook-background1>\r\n\r\n<storybook-configuration-form>\r\n\r\n</storybook-configuration-form>\r\n\r\n<div class=\"container\">\r\n\r\n  <header class=\"jumbotron\">\r\n    <p>{{ content }}</p>\r\n  </header>\r\n\r\n\r\n  <!--storybook-card-rugged  ></storybook-card-rugged-->\r\n    <div class=\"col-md-12\">\r\n\r\n      <!--div class=\"card\"-->\r\n\r\n\r\n      <form\r\n        *ngIf=\"!isSuccessful\"\r\n        name=\"form\"\r\n        (ngSubmit)=\"f.form.valid && onSubmit()\"\r\n        #f=\"ngForm\"\r\n        novalidate\r\n        style=\"bottom: 2px;\"\r\n      >\r\n        <div class=\"form-group input-box\">\r\n          <label for=\"userName\" class=\"input-label\">Time for password to be expired </label>\r\n\r\n          <input type=\"number\" style=\"width: 70px;\" class=\"form-control input-field\" name=\"userName\" [(ngModel)]=\"form.userName\"\r\n                 required minlength=\"3\" maxlength=\"20\" #userName=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"userName.errors && f.submitted\">\r\n            <div *ngIf=\"userName.errors.required\">Username is required</div>\r\n            <div *ngIf=\"userName.errors.minlength\">\r\n              Username must be at least 3 characters\r\n            </div>\r\n            <div *ngIf=\"userName.errors.maxlength\">\r\n              Username must be at most 20 characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group input-box\">\r\n          <label for=\"email\" class=\"input-label\">Alert duration before for pass expired</label>\r\n          <input type=\"number\" class=\"form-control input-field\" name=\"email\" [(ngModel)]=\"form.email\"\r\n                 required email #email=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\r\n            <div *ngIf=\"email.errors.required\">Email is required</div>\r\n            <div *ngIf=\"email.errors.email\">\r\n              Email must be a valid email address\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group input-box\">\r\n          <label for=\"password\" class=\"input-label\">Password</label>\r\n          <input type=\"password\" class=\"form-control input-field\" name=\"password\" [(ngModel)]=\"form.password\"\r\n                 required minlength=\"6\" #password=\"ngModel\"/>\r\n          <div class=\"alert-danger\" *ngIf=\"password.errors && f.submitted\">\r\n            <div *ngIf=\"password.errors.required\">Password is required</div>\r\n            <div *ngIf=\"password.errors.minlength\">\r\n              Password must be at least 6 characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group input-box\">\r\n          <label for=\"privilege\" class=\"input-label\">Privilege Level</label>\r\n          <select type=\"privilege\" class=\"form-control  input-field\" name=\"privilege\" id=\"pet-select\"\r\n                  [(ngModel)]=\"form.roles\" required #roles=\"ngModel\">\r\n            <option value=\"\">--Please choose an option--</option>\r\n            <option value=\"admin\">Admin</option>\r\n            <option value=\"mod\">Moderator</option>\r\n            <option value=\"user\">User</option>\r\n          </select>\r\n        </div>\r\n        <br>\r\n        <div class=\"form-group\" style=\"position: static; display: flex; justify-content: center;\">\r\n          <button class=\"btn btn-primary btn-block save-changes-button \">Save Changes</button>\r\n        </div>\r\n\r\n        <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\r\n          Signup failed!<br />{{ errorMessage }}\r\n        </div>\r\n      </form>\r\n\r\n      <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n        Your registration is successful!\r\n      </div>\r\n\r\n    </div>\r\n  <!--/div-->\r\n</div>\r\n"
        },
        {
            "name": "BoardModeratorComponent",
            "id": "component-BoardModeratorComponent-25248f379fc02ae801bf95b48ce872aaa8708222108e046297aab9e3901d3564f607d389858e2b3d487296399f5582ddab239b0f7b42b3a6fc1a2cb8e2a58a87",
            "file": "src/app/login2/profile2/board-moderator/board-moderator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-moderator",
            "styleUrls": [
                "./board-moderator.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-moderator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from 'src/app/_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-board-moderator',\r\n  templateUrl: './board-moderator.component.html',\r\n  styleUrls: ['./board-moderator.component.css']\r\n})\r\nexport class BoardModeratorComponent implements OnInit {\r\n  content?: string;\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getModeratorBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./board-moderator.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <header class=\"jumbotron\">\r\n    <p>{{ content }}</p>\r\n  </header>\r\n</div>\r\n"
        },
        {
            "name": "BoardUserComponent",
            "id": "component-BoardUserComponent-8e4061855287eebacb5f1b5404cb5110ba56063307d2f2ea3290bfe05470d4b91e3dd01f4621c8c619ebd49edd8e2aeffaa7520a6eda0ad3e9bde397f246c636",
            "file": "src/app/login2/profile2/board-user/board-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-user",
            "styleUrls": [
                "./board-user.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from 'src/app/_services/user.service';\r\nimport { EventBusService } from 'src/app/_shared/event-bus.service';\r\nimport { EventData } from 'src/app/_shared/event.class';\r\n\r\n@Component({\r\n  selector: 'app-board-user',\r\n  templateUrl: './board-user.component.html',\r\n  styleUrls: ['./board-user.component.css']\r\n})\r\nexport class BoardUserComponent implements OnInit {\r\n  content?: string;\r\n\r\n  constructor(private userService: UserService, private eventBusService: EventBusService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getUserBoard().subscribe(\r\n      data => {\r\n        this.content = data;\r\n      },\r\n      err => {\r\n        this.content = err.error.message || err.error || err.message;\r\n        if (err.status === 403)\r\n          this.eventBusService.emit(new EventData('logout', null));\r\n      }\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.font_0 {\r\n  font-size:44px;\r\n  text-align:left;\r\n  color:#FFFFFF;\r\n}\r\n\r\n.alert, .alert-success {\r\n  width: 50%;\r\n}\r\n\r\n\r\n.background {\r\n  background-size: cover;\r\n  background-origin: border-box;\r\n  background-image: url(/assets/images/Background.webp);\r\n  /*linear-gradient(to right, rgba(30, 75, 115, 1), rgba(255, 255, 255, 0));*/\r\n  background-repeat: no-repeat;\r\n  background-position: top left;\r\n\r\n}\r\n\r\n/*\r\niframe {\r\n  border: 1px solid black;\r\n  width: 100%;\r\n}\r\n\r\n.output {\r\n  background: #eee;\r\n}\r\n*/\r\n",
                    "styleUrl": "./board-user.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <br>\r\n  <header class=\"background jumbotron  \">\r\n    <h1 class=\"font_0\">\r\n      <span class=\"\" style=\"font-size:44px;\">\r\n        <span>{{ content }}</span>\r\n      </span>\r\n    </h1>\r\n  </header>\r\n\r\n  <embed type=\"text/html\" src=\"https://www.tadirantele.com/\" height=\"300px\" width=\"100%\" >\r\n\r\n  <h2>Iframe - Target for a Link</h2>\r\n.\r\n  <iframe src=\"https://localhost:8445/accRealTime\" sandbox=\"allow-top-navigation-by-user-activation allow-same-origin allow-scripts allow-popups allow-forms\"  name=\"iframe_a\" height=\"300px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe>\r\n\r\n\r\n\r\n\r\n  <p><a href=\"https://172.28.8.245:8443/aeonix/mainForm.jsf\" target=\"iframe_a\">aeonix</a></p>\r\n  <p><a href=\"https://en.wikipedia.org/wiki/Avocado\" id=\"testid\" target=\"iframe_a\">wikipedia</a></p>\r\n  <p><a href=\"https://172.28.1.130:8445/accRealTime\" target=\"iframe_a\">accRealTime</a></p>\r\n  <p>When the target attribute of a link matches the name of an iframe, the link will open in the iframe.</p>\r\n\r\n    <!--iframe src=\"https://172.28.1.130:8445/accRealTime\" name=\"iframe_a\" height=\"300px\" width=\"100%\" title=\"Iframe Example\">\r\n  </iframe-->\r\n</div>\r\n"
        },
        {
            "name": "BubbleAvatarComponent",
            "id": "component-BubbleAvatarComponent-cc835cc08b5070cf320567a0da3bd07a8c49ff5a083a4e9bdc761e265be32ae9a49241522f9c26b00e0e3a9ab479e2d2d0495286d604a5df071259c5ddeb273e",
            "file": "src/stories/directive/bubble-avatar/bubble-avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bubble-avatar",
            "styleUrls": [
                "./bubble-avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bubble-avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bubbleOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "display",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "PopoverOptions",
                    "decorators": []
                },
                {
                    "name": "popover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionButton",
                    "defaultValue": "new EventEmitter<any> ()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "triggerDetectionChange",
                    "defaultValue": "new EventEmitter<void> ()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actionAvatarComponentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicCompDirective",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DynamicCompDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "isDynamic",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "hidePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadCarComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setBubbleOn",
                    "args": [
                        {
                            "name": "bubbleOn",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bubbleOn",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeader",
                    "args": [
                        {
                            "name": "header",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "header",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showPopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  OnInit,\r\n  AfterViewInit,\r\n  ComponentFactoryResolver,\r\n  ChangeDetectionStrategy,\r\n  ApplicationRef,\r\n  Output,\r\n  EventEmitter,\r\n  Type, ComponentRef\r\n} from '@angular/core';\r\nimport { DynamicCompDirective } from '../dynamic-comp.directive';\r\nimport { PopoverOptions } from '../popover.interface'\r\nimport {ActionAvatarComponent} from \"src/stories/actions/action-avatar/action-avatar.component\";\r\n\r\n\r\n@Component({\r\n  selector: 'bubble-avatar',\r\n    templateUrl: './bubble-avatar.component.html',\r\n  styleUrls: ['./bubble-avatar.component.scss']\r\n})\r\nexport class BubbleAvatarComponent implements OnInit, AfterViewInit{\r\n  @Input() display: any;\r\n  @Input() popover: any;\r\n  @Input() bubbleOn?: boolean;\r\n  @Input() header?: string;\r\n  @Input()  options?: PopoverOptions;\r\n  show: boolean = false;\r\n  isDynamic: boolean = false;\r\n  @ViewChild(DynamicCompDirective, {static: true}) content!: DynamicCompDirective;\r\n  @Output() triggerDetectionChange: EventEmitter<void> = new EventEmitter<void> ();\r\n  @Output() actionButton: EventEmitter<any> = new EventEmitter<any> ();\r\n  actionAvatarComponentRef?: ComponentRef<any>;\r\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    if (this.options && typeof this.options.content !== \"string\") {\r\n      this.isDynamic = true;\r\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.options.content);\r\n      const viewContainerRef = this.content.viewContainerRef;\r\n      viewContainerRef.clear();\r\n      this.actionAvatarComponentRef = viewContainerRef.createComponent(componentFactory);\r\n      this.actionAvatarComponentRef.instance.setHeader(this.header);\r\n      this.actionAvatarComponentRef.instance.setBubbleOn(this.bubbleOn);\r\n      this.actionAvatarComponentRef.instance.actionButton.subscribe(($event: any) => {\r\n        this.actionButton.emit($event);\r\n        console.log(\"Click: Change it now\");\r\n      });\r\n    }\r\n  }\r\n  ngAfterViewInit(): void {}\r\n\r\n  showPopup() {\r\n    if (this.bubbleOn) {\r\n      this.show = true;\r\n      this.triggerDetectionChange.emit();\r\n    }\r\n  }\r\n\r\n  hidePopup() {\r\n    this.show = false;\r\n    this.triggerDetectionChange.emit();\r\n  }\r\n\r\n  setHeader(header: string) {\r\n    this.header = header;\r\n    this.actionAvatarComponentRef?.instance.setHeader(this.header);\r\n  }\r\n\r\n  setBubbleOn(bubbleOn: boolean) {\r\n    this.bubbleOn = bubbleOn;\r\n  }\r\n\r\n  loadCarComponent(){\r\n    const _viewContainerRef = this.content.viewContainerRef;\r\n\r\n    //removes all views in that container\r\n    _viewContainerRef.clear();\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.options?.content);\r\n\r\n    //Create an instance of the component\r\n    const carComponentRef = _viewContainerRef.createComponent<ActionAvatarComponent>(componentFactory);\r\n/*\r\n    //Pass data to the component\r\n    carComponentRef.instance.image = 'https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80';\r\n*/\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n\r\n  position: relative;\r\n  display: inline-block;\r\n  text-align: center;\r\n  background-color: yellow;\r\n  cursor: pointer;\r\n  -webkit-transform: translateZ(0); /* webkit flicker fix */\r\n  -webkit-font-smoothing: antialiased; /* webkit text rendering fix */\r\n}\r\n\r\n.tooltip {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  border: 2px solid #3D8ECF;\r\n  width: 200px;\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  top: 100%;\r\n  color: #000000;\r\n  display: block;\r\n  left: 17px;\r\n  margin-bottom: 15px;\r\n  opacity: 0;\r\n  padding: 20px;\r\n  pointer-events: none;\r\n  /*width: 100%;*/\r\n  -webkit-transform: translateY(10px);\r\n  -moz-transform: translateY(10px);\r\n  -ms-transform: translateY(10px);\r\n  -o-transform: translateY(10px);\r\n  transform: translateY(10px);\r\n  -webkit-transition: all .25s ease-out;\r\n  -moz-transition: all .25s ease-out;\r\n  -ms-transition: all .25s ease-out;\r\n  -o-transition: all .25s ease-out;\r\n  transition: all .25s ease-out;\r\n  -webkit-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\r\n  -moz-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\r\n  -ms-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\r\n  -o-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\r\n  box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\r\n}\r\n\r\n/* This bridges the gap so you can mouse into the tooltip without it disappearing */\r\n.tooltip:before {\r\n  border-left: solid transparent 10px;\r\n  border-right: solid transparent;\r\n  border-right-width: 10px;\r\n  border-bottom: solid  #3D8ECF 10px;\r\n\r\n\r\n  top: -11.5px;\r\n  content: \"\";\r\n  height: 7px;\r\n  left: 20%;\r\n  margin-left: -13px;\r\n  position: absolute;\r\n  width: 0;\r\n  /*\r\n  top: -40px;\r\n  content: \" \";\r\n  display: block;\r\n  height: 40px;\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;*/\r\n}\r\n\r\n/* CSS Triangles - see Trevor's post */\r\n.tooltip::after {\r\n  border-left: solid transparent 10px;\r\n  border-right: solid transparent;\r\n  border-right-width:10px;\r\n  border-bottom: solid  #FFFFFF 10px;\r\n\r\n  /*border-block-start: solid;\r\n  border: 10px solid #3D8ECF;*/\r\n  top: -9px;\r\n  content: \"\";\r\n  height: 7px;\r\n  left: 20%;\r\n  margin-left: -13px;\r\n  position: absolute;\r\n  width: 0;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n.tooltip-display {\r\n  opacity: 1;\r\n  pointer-events: auto;\r\n  -webkit-transform: translateY(0px);\r\n  -moz-transform: translateY(0px);\r\n  -ms-transform: translateY(0px);\r\n  -o-transform: translateY(0px);\r\n  transform: translateY(0px);\r\n}\r\n\r\n/* IE can just show/hide with no transition */\r\n.lte8 .wrapper .tooltip {\r\n  display: none;\r\n}\r\n\r\n.lte8 .wrapper:hover .tooltip {\r\n  display: block;\r\n}\r\n",
                    "styleUrl": "./bubble-avatar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"tooltip\" [ngClass]=\"{'tooltip-display' : show}\">\r\n  <!--button (click)=\"loadCarComponent()\">Load Car Component</button-->\r\n  <span *ngIf=\"!isDynamic\">{{popover}}</span>\r\n  <ng-template    appDynamicComp>\r\n  </ng-template>\r\n\r\n</div>\r\n\r\n"
        },
        {
            "name": "BubbleInputComponent",
            "id": "component-BubbleInputComponent-7494e8f2c4c12209fc8b790cd07e02bad0049c2ccbee0a3f5ca28ba5fe00918222789b5ff62e47234a1a81149a1b001e8abec1b37225ae3be438433af3efc6fc",
            "file": "src/stories/directive/bubble-input/bubble-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bubble-input",
            "styleUrls": [
                "./bubble-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bubble-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "ActionInput[]",
                    "decorators": []
                },
                {
                    "name": "display",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "PopoverOptions",
                    "decorators": []
                },
                {
                    "name": "popover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "triggerDetectionChange",
                    "defaultValue": "new EventEmitter<void> ()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actionInputComponentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicCompDirective",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DynamicCompDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "isDynamic",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "hidePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "data",
                            "type": "ActionInput[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ActionInput[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeader",
                    "args": [
                        {
                            "name": "header",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "header",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showPopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  OnInit,\r\n  AfterViewInit,\r\n  ComponentFactoryResolver,\r\n  ChangeDetectionStrategy,\r\n  ApplicationRef,\r\n  Output,\r\n  EventEmitter,\r\n  Type, ComponentRef\r\n} from '@angular/core';\r\nimport { DynamicCompDirective } from '../dynamic-comp.directive';\r\nimport { PopoverOptions } from '../popover.interface'\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"../../actions/action-input/action-input.interface\";\r\n\r\n\r\n@Component({\r\n  selector: 'bubble-input',\r\n    templateUrl: './bubble-input.component.html',\r\n  styleUrls: ['./bubble-input.component.scss']\r\n})\r\nexport class BubbleInputComponent implements OnInit, AfterViewInit{\r\n  @Input() display: any;\r\n  @Input() popover: any;\r\n  @Input() data?: ActionInput[];\r\n  @Input() header?: string;\r\n  @Input()  options?: PopoverOptions;\r\n  show: boolean = false;\r\n  isDynamic: boolean = false;\r\n  @ViewChild(DynamicCompDirective, {static: true}) content!: DynamicCompDirective;\r\n  @Output() triggerDetectionChange: EventEmitter<void> = new EventEmitter<void> ();\r\n  actionInputComponentRef?: ComponentRef<any>;\r\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    if (this.options && typeof this.options.content !== \"string\") {\r\n      this.isDynamic = true;\r\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.options.content);\r\n      const viewContainerRef = this.content.viewContainerRef;\r\n      viewContainerRef.clear();\r\n      this.actionInputComponentRef = viewContainerRef.createComponent(componentFactory);\r\n      this.actionInputComponentRef.instance.setConditions(this.data);\r\n      this.actionInputComponentRef.instance.setHeader(this.header);\r\n    }\r\n\r\n  }\r\n  ngAfterViewInit(): void {}\r\n\r\n  showPopup() {\r\n    if (this.data != undefined && this.data?.length > 0) {\r\n      this.show = true;\r\n      this.triggerDetectionChange.emit();\r\n    }\r\n  }\r\n\r\n  hidePopup() {\r\n    this.show = false;\r\n    this.triggerDetectionChange.emit();\r\n  }\r\n\r\n  setData(data: ActionInput[]) {\r\n    this.data = data;\r\n    this.actionInputComponentRef?.instance.setConditions(this.data);\r\n  }\r\n\r\n  setHeader(header: string) {\r\n    this.header = header;\r\n    this.actionInputComponentRef?.instance.setHeader(this.header);\r\n  }\r\n\r\n  /*   loadCarComponent(){\r\n     const _viewContainerRef = this.content.viewContainerRef;\r\n\r\n     //removes all views in that container\r\n     _viewContainerRef.clear();\r\n\r\n     const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.options?.content);\r\n\r\n     //Create an instance of the compo\r\n     /*    const carComponentRef = _viewContainerRef.createComponent<ActionInputComponent>(componentFactory);\r\n\r\n         //Pass data to the component\r\n         carComponentRef.instance.image = 'https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80';\r\n\r\n   }*/\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n\r\n  position: relative;\r\n  display: inline-block;\r\n  text-align: center;\r\n  background-color: yellow;\r\n  cursor: pointer;\r\n  -webkit-transform: translateZ(0); /* webkit flicker fix */\r\n  -webkit-font-smoothing: antialiased; /* webkit text rendering fix */\r\n}\r\n\r\n.tooltip {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  border: 2px solid #3D8ECF;\r\n  width: 253px;\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  bottom: 55%;\r\n  color: #000000;\r\n  display: block;\r\n  right: -17px;\r\n  margin-bottom: 15px;\r\n  opacity: 0;\r\n  padding: 20px;\r\n  pointer-events: none;\r\n  -webkit-transform: translateY(10px);\r\n  -moz-transform: translateY(10px);\r\n  -ms-transform: translateY(10px);\r\n  -o-transform: translateY(10px);\r\n  transform: translateY(10px);\r\n  -webkit-transition: all .25s ease-out;\r\n  -moz-transition: all .25s ease-out;\r\n  -ms-transition: all .25s ease-out;\r\n  -o-transition: all .25s ease-out;\r\n  transition: all .25s ease-out;\r\n  -webkit-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\r\n  -moz-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\r\n  -ms-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\r\n  -o-box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\r\n  box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\r\n}\r\n\r\n/* This bridges the gap so you can mouse into the tooltip without it disappearing */\r\n.tooltip:before {\r\n  border-left: solid transparent 10px;\r\n  border-right: solid transparent 10px;\r\n  border-top: solid  #3D8ECF 10px;\r\n\r\n\r\n  bottom: -11.5px;\r\n  content: \"\";\r\n  height: 7px;\r\n  right: 20%;\r\n  margin-left: -13px;\r\n  position: absolute;\r\n  width: 0;\r\n  /*\r\n  top: -40px;\r\n  content: \" \";\r\n  display: block;\r\n  height: 40px;\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;*/\r\n}\r\n\r\n/* CSS Triangles - see Trevor's post */\r\n.tooltip::after {\r\n  border-left: solid transparent 10px;\r\n  border-right: solid transparent 10px;\r\n  border-top: solid  #FFFFFF 10px;\r\n\r\n  /*border-block-start: solid;\r\n  border: 10px solid #3D8ECF;*/\r\n  bottom: -9px;\r\n  content: \"\";\r\n  height: 7px;\r\n  right: 20%;\r\n  margin-left: -13px;\r\n  position: absolute;\r\n  width: 0;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n.tooltip-display {\r\n  opacity: 1;\r\n  pointer-events: auto;\r\n  -webkit-transform: translateY(0px);\r\n  -moz-transform: translateY(0px);\r\n  -ms-transform: translateY(0px);\r\n  -o-transform: translateY(0px);\r\n  transform: translateY(0px);\r\n}\r\n\r\n/* IE can just show/hide with no transition */\r\n.lte8 .wrapper .tooltip {\r\n  display: none;\r\n}\r\n\r\n.lte8 .wrapper:hover .tooltip {\r\n  display: block;\r\n}\r\n",
                    "styleUrl": "./bubble-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"tooltip\" [ngClass]=\"{'tooltip-display' : show}\">\r\n  <!--button (click)=\"loadCarComponent()\">Load Car Component</button-->\r\n  <span *ngIf=\"!isDynamic\">{{popover}}</span>\r\n  <ng-template appDynamicComp>\r\n  </ng-template>\r\n\r\n</div>\r\n\r\n"
        },
        {
            "name": "ButtonAppsComponent",
            "id": "component-ButtonAppsComponent-a0ee231b06002255366f510bb31db78ce9aae1e9ac3a8baeaa8485c04cd72b675ae80600bed7e5e6568a3b1307d412bd92e2dd50eda68cad2b55b0a46b344cfc",
            "file": "src/stories/buttons/button-apps/button-apps.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-apps",
            "styleUrls": [
                "./button-apps.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-apps.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "application",
                    "defaultValue": "'Admin'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat application should the button linked to?\n",
                    "description": "<p>What application should the button linked to?</p>\n",
                    "line": 39,
                    "type": "\"Agent\" | \"WebRT\" | \"Script-Designer\" | \"Admin\" | \"Aeonix-Admin\"",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 875,
                            "end": 888,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 876,
                                "end": 884,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 33,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-apps',\n  templateUrl: './button-apps.component.html',\n  styleUrls: ['./button-apps.component.scss']\n})\nexport class ButtonAppsComponent {\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  isDisabled: boolean = false;\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * What application should the button linked to?\n   */\n  @Input()\n  application: 'Agent' | 'WebRT' | 'Script-Designer' | 'Admin' | 'Aeonix-Admin' = 'Admin';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-apps--primary' : 'storybook-button-apps--secondary';\n\n    return ['storybook-button-apps', `storybook-button-apps--${this.application}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":root {\r\n  --label_width: 30px;\r\n  --white: #ffffff;\r\n}\r\n\r\nbutton[disabled] {\r\n  background-color: rgba(43, 166, 203, 0);\r\n  .circle {\r\n    background: linear-gradient(151.78deg, rgba(187, 187, 187, 0.76) 13.27%, rgba(98, 97, 97, 0.76) 83.89%);\r\n  }\r\n\r\n  &:hover {\r\n    background-color: currentcolor;\r\n\r\n    .circle {\r\n      background-color: currentcolor;\r\n    }\r\n  }\r\n\r\n  &:active {\r\n    box-shadow: none;\r\n    background: currentcolor;\r\n  }\r\n}\r\n\r\n\r\nbutton:not([disabled]) {\r\n  background-color: rgba(43, 166, 203, 0);\r\n  .circle {\r\n    background: linear-gradient(151.78deg, #74C1FF 13.27%, #3D8ECF 83.89%);\r\n  }\r\n\r\n  &:hover {\r\n    background-color: currentcolor;\r\n\r\n    .circle {\r\n      background-image: linear-gradient(151.78deg, #58a6f0 13.27%, #275ea8 83.89%);\r\n    }\r\n  }\r\n\r\n  &:active {\r\n    .circle {\r\n      box-shadow: none;\r\n      background: linear-gradient(151.78deg, #7EC6FF 2.44%, #ADDBFF 93.73%);\r\n    }\r\n  }\r\n}\r\n\r\n#button-successfully {\r\n  max-width: 155.09px;\r\n}\r\n\r\n.container {\r\n  position: relative;\r\n  max-width: 155.09px;\r\n  height: 189.09px;\r\n  float: left;\r\n  padding: 0;\r\n}\r\n\r\nimg.Apps-Button-Icon {\r\n  position: absolute;\r\n  width: 65.54px;\r\n  height: 82.79px;\r\n  left: calc(50% - 65.54px/2);\r\n  top: calc(50% - 82.79px/2);\r\n  object-fit: contain;\r\n  /*box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n}\r\n\r\n.circle {\r\n  position: relative;\r\n  height: 155.09px;\r\n  width: 155.09px;\r\n  border-radius: 50%;\r\n}\r\n\r\n\r\n\r\n.center {\r\n  margin: auto;\r\n  text-align: center;\r\n}\r\n\r\n.mfont {\r\n  /*width: 447px;*/\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  letter-spacing: -0.011em;\r\n  color: #000000;\r\n}\r\n\r\n.Button-App-Label {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 33px;\r\n  horiz-align: center;\r\n\r\n}\r\n\r\n\r\n.a {\r\n  position: relative;\r\n  width: 129px;\r\n  height: 33px;\r\n  /*width: 447px;*/\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  color: #000000;\r\n}\r\n\r\n.storybook-button-apps--Agent {\r\n  width: 154.09px;\r\n  height: 154.09px;\r\n}\r\n.storybook-button-apps--WebRT {\r\n  width: 152.94px;\r\n  height: 197px;\r\n}\r\n.storybook-button-apps--Admin {\r\n  width: 154.09px;\r\n  height: 154.09px;\r\n}\r\n.storybook-button-apps--Script-Designer {\r\n  width: 154.09px;\r\n  height: 152.94px;\r\n}\r\n",
                    "styleUrl": "./button-apps.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 59
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 55
                    }
                }
            },
            "templateData": "<button id=\"button-apps\" class=\"container\"  [disabled]=\"isDisabled\"  >\n<div id=\"circle\" class=\"circle\"   >\n\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/{{application?.toString()}}.png\" class=\"Apps-Button-Icon center\"  alt=\"apps-button-icon\"/>\n</div>\n\n<div class=\"Button-App-Label \">\n  <div class=\"center mfont\">\n\n    {{ application.toString() }}\n\n  </div>\n</div>\n\n</button>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-3f7e98e5000c180c82a9b6e6a41f48f7ce92b1e343b1e46b1a57c0db38b878a7760ab9e7aba0488d3005d9ca4bb98534ac5f5726daaefb73543c9d6d43a5db25",
            "file": "src/stories/buttons/button-example/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 717,
                            "end": 730,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 718,
                                "end": 726,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonConfigurationComponent",
            "id": "component-ButtonConfigurationComponent-e2745df54f8a697b3724eadfaf93578a0c54aafc5277666b3ea5b1f37ed696fef91ce3eb4144764c582fc6f0e6932b7ad2df96bafa9d980e67bde46fe91623a6",
            "file": "src/stories/buttons/button-configuration/button-configuration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-configuration",
            "styleUrls": [
                "./button-configuration.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button-configuration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 626,
                            "end": 639,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 627,
                                "end": 635,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-configuration',\n  templateUrl: './button-configuration.component.html',\n  styleUrls: ['./button-configuration.component.css']\n})\nexport class ButtonConfigurationComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-form--primary' : 'storybook-button-form--secondary';\n\n    return ['storybook-button-form', `storybook-language-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: absolute;\r\n  top: 28px;\r\n  right: 38px;\r\n  width: 72px;\r\n  height: 27px;\r\n  padding: 0;\r\n  margin: 0;\r\n  border-bottom-width: 0px;\r\n  background-color: rgba(45, 148, 55, 0);\r\n  object-fit: contain;\r\n}\r\n\r\nimg.Language-Desktop-Icon {\r\n  position: absolute;\r\n  display: inline;\r\n  top: 1px;\r\n  right: 1px;\r\n  width: 26px;\r\n  height: 26px;\r\n  /*margin: 4.2px 1px 2.8px 0;\r\n  object-fit: contain;\r\n  box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n}\r\n\r\n.EnableProfilePicture{\r\n  position: absolute;\r\n  display: inline;\r\n  top: 1px;\r\n  left: 1px;\r\n  /*margin: 4.2px 1px 2.8px 0;*/\r\n\r\n\r\n  /* D Regular */\r\n\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 26px;\r\n  /* identical to box height, or 183% */\r\n\r\n\r\n  text-align: left;\r\n  letter-spacing: -0.011em;\r\n\r\n  color: #000000;\r\n}\r\n",
                    "styleUrl": "./button-configuration.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "<button class=\"Vector\" (click)=\"onClick.emit($event)\" >\n  <label class=\"EnableProfilePicture\">Tools</label>\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/AacConfiguration.png\"\n       srcset=\"./assets/images/language-desktop-icon@2x.png 2x,\n             /assets/images/language-desktop-icon@3x.png 3x\"\n       class=\"Language-Desktop-Icon\"  alt=\"form-desktop-icon\"/>\n\n</button>\n"
        },
        {
            "name": "ButtonContinueComponent",
            "id": "component-ButtonContinueComponent-dde750ad6237b5dba9dd59315cf2499b5ce8d52f9a24cf8576ae564dd60ae317a170f5e5928c9c5d8127e4f55d4d02375e8c44dcaa1495b6a5c7fa75fd523e28",
            "file": "src/stories/buttons/button-continue/button-continue.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-continue",
            "styleUrls": [
                "./button-continue.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-continue.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "gallery",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this gallery attribute are set?\n",
                    "description": "<p>Is this gallery attribute are set?</p>\n",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Continue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 970,
                            "end": 983,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 971,
                                "end": 979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 36,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-continue',\n  templateUrl: './button-continue.component.html',\n  /*template: `<div class=\"storybook-button-continue\">\n    <img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n         src=\"./assets/images/img_2.png\" class=\"Language-Desktop-Icon\"  alt=\"form-desktop-icon\"/>\n  </div>`,*/\n  styleUrls: ['./button-continue.component.scss'],\n})\nexport class ButtonContinueComponent {\n\n  /**\n   * Is this gallery attribute are set?\n   */\n  @Input()\n  gallery = false;\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Continue';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-continue--primary' : 'storybook-button-continue--secondary';\n    const galleryMode = this.gallery ? 'storybook-button-continue--set-in' : 'storybook-button-continue--set-out';\n\n    return ['storybook-button-continue', `storybook-button-continue--${this.size}`, mode, galleryMode];\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n.button {\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n.storybook-button-continue {\r\n    width: 446px;\r\n    height: 63px;\r\n    margin: 26px 0 0 1px;\r\n    padding: 17px 136px 17px 139px;\r\n    border-radius: 7px;\r\n    background-image: linear-gradient(180deg, #3D8ECF 0%, #58A6E4 100%);\r\n\r\n    font-family: 'Noto Sans', ui-serif;\r\n    font-style: normal;\r\n    font-weight: 700;\r\n    font-size: 21px;\r\n    line-height: 11px;\r\n    //transition: background-color 300ms ease-out;\r\n    //box-shadow: 0 4px 4px rgba(0, 0, 0, 0.25);\r\n\r\n    &:hover {\r\n      background: #3D8ECF;\r\n    }\r\n\r\n    &:active {\r\n      box-shadow: none;\r\n      background: linear-gradient(116.01deg, #7EC6FF 2.44%, #ADDBFF 93.73%);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n.storybook-button-continue--primary {\r\n  top: 50px;\r\n  bottom: unset;\r\n  left: 30px;\r\n}\r\n\r\n.storybook-button-continue--secondary {\r\n  top: unset;\r\n  bottom: 50px;\r\n  left: 30px;\r\n}\r\n*/\r\n\r\n.storybook-button-continue--small {\r\n  font-size: 20.7945px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button-continue--medium {\r\n  font-size: 21px;\r\n  padding: 17px 136px 17px 139px;\r\n}\r\n.storybook-button-continue--large {\r\n  font-size: 28px;\r\n  padding: 17px 136px;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./button-continue.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 52
                    }
                }
            },
            "templateData": "<button id=\"login-button\" class=\"login-button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\" >\n{{label}}\n</button>\n"
        },
        {
            "name": "ButtonExclamationMarkComponent",
            "id": "component-ButtonExclamationMarkComponent-cc6eea3638b9892c0a2c370e1ecde69bd50ac315184071d9e09200f81e85791f4a5c4f6e4b2d1bc273a98721dd9e272f81a43820a86b651f51289431f7124d2a",
            "file": "src/stories/buttons/button-exclamation-mark/button-exclamation-mark.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-exclamation-mark",
            "styleUrls": [
                "./button-exclamation-mark.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-exclamation-mark.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 639,
                            "end": 652,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 640,
                                "end": 648,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-exclamation-mark',\n  templateUrl: './button-exclamation-mark.component.html',\n  styleUrls: ['./button-exclamation-mark.component.scss']\n})\nexport class ButtonExclamationMarkComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-exclamation-mark--primary' : 'storybook-button-exclamation-mark--secondary';\n\n    return ['storybook-button-exclamation-mark', `storybook-button-exclamation-mark--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":root {\r\n  --label_width: 30px;\r\n  --white: #ffffff;\r\n}\r\n\r\n$height: 142px !default;\r\n$width: 142px !default;\r\n\r\n.container {\r\n  position: absolute;\r\n  //border: 2px solid #4CAF50;\r\n  width: calc(var(--veriable-width));\r\n  height: calc(var(--veriable-height));\r\n  float: left;\r\n  padding: 0;\r\n}\r\n\r\nimg.Exclamation-Mark-Icon {\r\n  position: absolute;\r\n  width: 83.98px;\r\n  height: 62.42px;\r\n  left: calc(50% - 83.98px/2);\r\n  top: calc(50% - 62.42px/2);\r\n  object-fit: contain;\r\n  /*box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n}\r\n\r\n.circle {\r\n  position: relative;\r\n  height: 142px;\r\n  width: 142px;\r\n  background: linear-gradient(180deg, #FA4F4F 47.92%, #DD3333 100%);\r\n  border-radius: 50%;\r\n}\r\n\r\n.center {\r\n  margin: auto;\r\n\r\n  text-align: center;\r\n\r\n\r\n}\r\n\r\n.storybook-button-exclamation-mark--small {\r\n\r\n  /* .img {*/\r\n  $height: 35px;\r\n  $width: 35px;\r\n  height: 35px;\r\n  width: 35px;\r\n  // }\r\n  > img {\r\n    //$hight: 35.68px;\r\n    height: 30.27px;\r\n    width: 5.27px;\r\n    left: calc(50% - 5.27px/2);\r\n    //top: calc(50% - var(--veriable-height/2));\r\n    top: 5.25%;\r\n    bottom: 8.26%;\r\n\r\n  }\r\n}\r\n\r\n\r\n.storybook-button-exclamation-mark--medium {\r\n\r\n  $height: 142px;\r\n  $width: 142px;\r\n  height: 142px;\r\n  width: 142px;\r\n\r\n  > img {\r\n    width: 83.98px;\r\n    height: 62.42px;\r\n\r\n    top: 5.25%;\r\n    bottom: 8.26%;\r\n  }\r\n\r\n}\r\n\r\n",
                    "styleUrl": "./button-exclamation-mark.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 46
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 42
                    }
                }
            },
            "templateData": "<div id=\"button-exclamation-mark\" class=\"container\">\n<div id=\"button-exclamation-mark-circle\" class=\"circle\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\n\n<img\n     src=\"./assets/images/Exclamation.png\" class=\"Exclamation-Mark-Icon center\" alt=\"exclamation-mark-button-icon\"/>\n</div>\n\n\n</div>\n"
        },
        {
            "name": "ButtonExComponent",
            "id": "component-ButtonExComponent-e89c4c5fb320132c982572a6917072aa4fe2696fd60788cb8a90c5340b94975cd584b98fb239e26d23e600a6b92b95de075e389563fb380fcfe48f508b725e71",
            "file": "src/stories/buttons/button-ex/button-ex.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-ex",
            "styleUrls": [
                "./button-ex.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button-ex.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 582,
                            "end": 595,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 583,
                                "end": 591,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-ex',\n  templateUrl: './button-ex.component.html',\n  styleUrls: ['./button-ex.component.css']\n})\nexport class ButtonExComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-ex--primary' : 'storybook-button-ex--secondary';\n\n    return ['storybook-button-ex', `storybook-button-ex--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button.Vector {\r\n  position: absolute;\r\n  width: 20px;\r\n  height: 20px;\r\n  padding: 0;\r\n  margin: 0;\r\n  background: rgba(255, 255, 255, 0);\r\n}\r\n\r\nimg.Ex-Icon {\r\n  position: absolute;\r\n  top: 1px;\r\n  right: 1px;\r\n  width: 19px;\r\n  height: 19px;\r\n  object-fit: contain;\r\n  box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);\r\n}\r\n",
                    "styleUrl": "./button-ex.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "\n<button class=\"Vector\" (click)=\"onClick.emit($event)\" >\n\n    <img  [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n       src=\"./assets/images/x_close.png\"\n           class=\"Ex-Icon\"  alt=\"Ex-Icon\"/>\n\n</button>\n\n"
        },
        {
            "name": "ButtonFortestComponent",
            "id": "component-ButtonFortestComponent-d64fb26ad3ca6f32236f2d75688486c1b764e1b7ac327d7fc2dfb9521b1f041ce0e3fee1a89a5602fd7f859027d7cffcda091bd5173a0fa23b8db1ffd307291f",
            "file": "src/stories/buttons/button-fortest/button-fortest.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-fortest",
            "styleUrls": [
                "./button-fortest.css"
            ],
            "styles": [],
            "template": "<p >Highlight Directive</p>   <button highlight=\"blue\" colorName=\"blue\"\n   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 799,
                            "end": 812,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 800,
                                "end": 808,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 33,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-fortest',\n  template: ` <p >Highlight Directive</p>\n    <button highlight=\"blue\" colorName=\"blue\"\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button-fortest.css'],\n})\nexport  class ButtonFortestComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button-fortest.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 49
                    }
                }
            }
        },
        {
            "name": "ButtonGlobeComponent",
            "id": "component-ButtonGlobeComponent-b11f565231843b2e8069aad6cd260525c4844aa441266f76654a57bc8bc675433f989b883e9e7b5c03ba040e06ee052ede81edc9b5c3184d67f5049e8a4f9e77",
            "file": "src/stories/buttons/button-globe/button-globe.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-globe",
            "styleUrls": [
                "./button-globe.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button-globe.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 594,
                            "end": 607,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 595,
                                "end": 603,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-globe',\n  templateUrl: './button-globe.component.html',\n  styleUrls: ['./button-globe.component.css']\n})\nexport class ButtonGlobeComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-tadiran--primary' : 'storybook-button-tadiran--secondary';\n\n    return ['storybook-button-tadiran', `storybook-tadiran-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: absolute;\r\n  bottom: 49px;\r\n  left: 247px;\r\n  width: 123px;\r\n  height: 45px;\r\n}\r\n\r\nimg.Language-Desktop-Icon {\r\n  position: absolute;\r\n  bottom: 1px;\r\n  left: 1px;\r\n  width: 123px;\r\n  height: 45px;\r\n  object-fit: contain;\r\n  /*box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n}\r\n",
                    "styleUrl": "./button-globe.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"Vector\">\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/GlobeIcon.png\" class=\"Language-Desktop-Icon\"  alt=\"form-desktop-icon\"/>\n</div>\n"
        },
        {
            "name": "ButtonLanguageComponent",
            "id": "component-ButtonLanguageComponent-af2c8ceffa147df0406e38c28a51040112f1d9fdfae4732589bb4bdc0d20bfd9c07a4a81ace05faf781d395913e12482552af0b9f9c49b9300b0fefbbcc925f7",
            "file": "src/stories/buttons/button-language/button-language.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-language",
            "styleUrls": [
                "./button-language.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button-language.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 606,
                            "end": 619,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 607,
                                "end": 615,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-language',\n  templateUrl: './button-language.component.html',\n  styleUrls: ['./button-language.component.css']\n})\nexport class ButtonLanguageComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-form--primary' : 'storybook-button-form--secondary';\n\n    return ['storybook-button-form', `storybook-language-icon--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: absolute;\r\n  top: 54px;\r\n  right: 68px;\r\n  width: 26px;\r\n  height: 26px;\r\n}\r\n\r\nimg.Language-Desktop-Icon {\r\n  position: absolute;\r\n  top: 1px;\r\n  right: 1px;\r\n  width: 26px;\r\n  height: 26px;\r\n  object-fit: contain;\r\n  box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);\r\n}\r\n",
                    "styleUrl": "./button-language.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"Vector\">\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   src=\"./assets/images/language-desktop-icon.png\"\n       srcset=\"./assets/images/language-desktop-icon@2x.png 2x,\n             /assets/images/language-desktop-icon@3x.png 3x\"\n       class=\"Language-Desktop-Icon\"  alt=\"form-desktop-icon\"/>\n\n</div>\n"
        },
        {
            "name": "ButtonSuccessfullyComponent",
            "id": "component-ButtonSuccessfullyComponent-563365d991521b72dcdc935a6a90cd70b39e9e7821d11ec5d872a615ccf22b7e85beab2ca3e0251479aec658c35f828907370e5bdcbbc1abb78c473f4f8678d1",
            "file": "src/stories/buttons/button-successfully/button-successfully.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-successfully",
            "styleUrls": [
                "./button-successfully.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button-successfully.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 623,
                            "end": 636,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 624,
                                "end": 632,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-successfully',\n  templateUrl: './button-successfully.component.html',\n  styleUrls: ['./button-successfully.component.css']\n})\nexport class ButtonSuccessfullyComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-successfully--primary' : 'storybook-button-successfully--secondary';\n\n    return ['storybook-button-successfully', `storybook-button-successfully--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":root {\r\n  --label_width: 30px;\r\n  --white: #ffffff;\r\n}\r\n\r\n#button-successfully {\r\n  max-width: 155.09px;\r\n\r\n}\r\n\r\n.container {\r\n  position: absolute;\r\n  max-width: 155.09px;\r\n  height: 189.09px;\r\n  float: left;\r\n  padding: 0;\r\n}\r\n\r\nimg.Vee-Icon {\r\n  position: absolute;\r\n  width: 83.98px;\r\n  height: 62.42px;\r\n  left: calc(50% - 83.98px/2);\r\n  top: calc(50% - 62.42px/2);\r\n  object-fit: contain;\r\n  /*box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n}\r\n\r\n.circle {\r\n  position: relative;\r\n  height: 142px;\r\n  width: 142px;\r\n  background: linear-gradient(180deg, #63EAA1 41.15%, #53CE8C 100%);\r\n  border-radius: 50%;\r\n}\r\n\r\n.center {\r\n  margin: auto;\r\n\r\n  text-align: center;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n.storybook-button-successfully--medium {\r\n  width: 154.09px;\r\n  height: 154.09px;\r\n}\r\n\r\n",
                    "styleUrl": "./button-successfully.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 46
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 42
                    }
                }
            },
            "templateData": "<div id=\"button-successfully\" class=\"container\">\n<div class=\"circle\">\n\n<img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n     src=\"./assets/images/Vee.png\" class=\"Vee-Icon center\" alt=\"successfully-button-icon\"/>\n</div>\n\n\n</div>\n"
        },
        {
            "name": "ButtonTadiranComponent",
            "id": "component-ButtonTadiranComponent-b16677aa1a775c3bc5332adb3d8e478266b6e872ddb6615317349032ec276a3053690d87b3d4c9553117bb55988c56c74e4feff947d716a0521db8d3c0467ba0",
            "file": "src/stories/buttons/button-tadiran/button-tadiran.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-tadiran",
            "styleUrls": [
                "./button-tadiran.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"storybook-button-tadiran\">    <img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n         src=\"./assets/images/img_2.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "gallery",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this gallery attribute are set?\n",
                    "description": "<p>Is this gallery attribute are set?</p>\n",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 970,
                            "end": 983,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 971,
                                "end": 979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 36,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button-tadiran',\n  /*templateUrl: './button-continue.component.html',*/\n  template: `<div class=\"storybook-button-tadiran\">\n    <img (click)=\"onClick.emit($event)\" [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n         src=\"./assets/images/img_2.png\" class=\"Language-Desktop-Icon\"  alt=\"language-desktop-icon\"/>\n  </div>`,\n  styleUrls: ['./button-tadiran.component.scss'],\n})\nexport class ButtonTadiranComponent {\n\n  /**\n   * Is this gallery attribute are set?\n   */\n  @Input()\n  gallery = false;\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-tadiran--primary' : 'storybook-button-tadiran--secondary';\n    const galleryMode = this.gallery ? 'storybook-button-tadiran--set-in' : 'storybook-button-tadiran--set-out';\n\n    return ['storybook-button-tadiran', `storybook-button-tadiran--${this.size}`, mode, galleryMode];\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button-tadiran {\r\n  position: absolute;\r\n  bottom: 50px;\r\n  left: 30px;\r\n  width: 151px;\r\n  height: 39px;\r\n}\r\n\r\nimg.Language-Desktop-Icon {\r\n  position: absolute;\r\n  bottom: 1px;\r\n  left: 1px;\r\n  width: 151px;\r\n  height: 39px;\r\n  object-fit: contain;\r\n  /*box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n}\r\n\r\n\r\n.storybook-button-tadiran--primary {\r\n  top: 50px;\r\n  bottom: unset;\r\n  left: 30px;\r\n}\r\n\r\n.storybook-button-tadiran--secondary {\r\n  top: unset;\r\n  bottom: 50px;\r\n  left: 30px;\r\n}\r\n",
                    "styleUrl": "./button-tadiran.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 52
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-dfe279c24d717c8e822567caa1cd69e8618a2dc0c07ab178f2211c08b8daabf3cc598936642d32bcb09489cf0d244d4455d38e4269c4c610aff47c3ce0088453",
            "file": "src/stories/cards/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-card",
            "styleUrls": [
                "./card.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 598,
                            "end": 612,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 599,
                                "end": 607,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.css']\r\n})\r\nexport default class CardComponent  {\r\n\r\n\r\n\r\n  /**\r\n   * Is this the principal call to action on the login-main?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large'  = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-card--primary' : 'storybook-card--secondary';\r\n\r\n    return ['storybook-card', `storybook-card--${this.size}`, mode];\r\n  }\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: absolute;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.card {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  /* Width: 42.65625%;\r\n  left: 28.671875%;\r\n   right: 28.671875%;\r\n   Width: 42.65625%;*/\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #FFFFFF;/**/\r\n}\r\n\r\n\r\n\r\n.storybook-card {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-card--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-card--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-card--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-card--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-card--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./card.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 45
                    }
                }
            },
            "templateData": "\r\n  <div class=\"card\">\r\n\r\n  </div>\r\n\r\n\r\n"
        },
        {
            "name": "CardRuggedComponent",
            "id": "component-CardRuggedComponent-6cb21326fe6f2230f024bb93e7aecefdee0fe06cad08916eac67462a52f984f30d2513707fac150e0f8118bbe4b5b143c4eae2d8874c62e99ec5818658ca8d06",
            "file": "src/stories/cards/card-rugged/card-rugged.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-card-rugged",
            "styleUrls": [
                "./card-rugged.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-rugged.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 624,
                            "end": 638,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 625,
                                "end": 633,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-card-rugged',\r\n  templateUrl: './card-rugged.component.html',\r\n  styleUrls: ['./card-rugged.css']\r\n})\r\nexport default class CardRuggedComponent {\r\n\r\n\r\n\r\n  /**\r\n   * Is this the principal call to action on the login-main?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large'  = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-card--primary' : 'storybook-card--secondary';\r\n\r\n    return ['storybook-card', `storybook-card--${this.size}`, mode];\r\n  }\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: absolute;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.card {\r\nposition: absolute;\r\n\r\n  background-color: #f7f7f7;\r\n\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  /*  padding: 0 25px 30px 0;\r\n/*margin-top: 20px;\r\n  Width: 42.65625%;\r\n    left: 28.671875%;\r\n    right: 28.671875%;\r\n\r\n    Width: 42.65625%;\r\n\r\n     */\r\n  margin: auto auto 10px auto;\r\n  /*  */\r\n  -moz-box-shadow: 0 2px 2px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 0 2px 2px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.3);\r\n  border-radius: 3em;\r\n\r\n}\r\n\r\n\r\n/*.card {\r\n  background-color: #f7f7f7;\r\n  padding: 20px 25px 30px;\r\n  margin: 0 auto 25px;\r\n  margin-top: 50px;\r\n  -moz-border-radius: 2px;\r\n  -webkit-border-radius: 2px;\r\n\r\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  border-radius: 3em;\r\n}\r\n*/\r\n.storybook-card {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-card--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-card--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-card--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-card--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-card--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./card-rugged.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 45
                    }
                }
            },
            "templateData": "\r\n  <div class=\"card\">\r\n\r\n\r\n  </div>\r\n\r\n\r\n"
        },
        {
            "name": "CheckboxInputComponent",
            "id": "component-CheckboxInputComponent-b4a9df9755de4de4c771591359d32cb148bdd7cd5418e365141e8d2a1a304ad03753f02593a2df2c2947354b4e458ec635850033968a1733edab4ff21fc1ce2d",
            "file": "src/stories/inputs/checkbox-input/checkbox-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-checkbox",
            "styleUrls": [
                "./checkbox-input.css"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 595,
                            "end": 608,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 596,
                                "end": 604,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-checkbox',\n  templateUrl: './checkbox-input.component.html',\n  styleUrls: ['./checkbox-input.css'],\n})\nexport default class CheckboxInputComponent {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n/* The container */\n.container {\n  display: block;\n  position: relative;\n  padding-left: 35px;\n  margin-bottom: 12px;\n  cursor: pointer;\n  font-size: 22px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n/* Hide the browser's default checkbox */\n.container input {\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n}\n\n/* Create a custom checkbox */\n.checkmark {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 25px;\n  width: 25px;\n  background-color: #eee;\n}\n\n/* On mouse-over, add a grey background color */\n.container:hover input ~ .checkmark {\n  background-color: #ccc;\n}\n\n/* When the checkbox is checked, add a blue background */\n.container input:checked ~ .checkmark {\n  background-color: #2196F3;\n}\n\n/* Create the checkmark/indicator (hidden when not checked) */\n.checkmark:after {\n  content: \"\";\n  position: absolute;\n  display: none;\n}\n\n/* Show the checkmark when checked */\n.container input:checked ~ .checkmark:after {\n  display: block;\n}\n\n/* Style the checkmark/indicator */\n.container .checkmark:after {\n  left: 9px;\n  top: 7px;\n  width: 5px;\n  height: 10px;\n  border: solid white;\n  border-width: 0 3px 3px 0;\n  -webkit-transform: rotate(45deg);\n  -ms-transform: rotate(45deg);\n  transform: rotate(45deg);\n}\n\n\n.storybook-button {\n\n}\n.storybook-button--primary {\n\n}\n.storybook-button--secondary {\n\n}\n.storybook-button--small {\n\n}\n.storybook-button--medium {\n\n}\n.storybook-button--large {\n\n}\n",
                    "styleUrl": "./checkbox-input.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<label class=\"container\">One\r\n  <input type=\"checkbox\" checked=\"checked\">\r\n  <span class=\"checkmark\"></span>\r\n</label>\r\n\r\n\r\n\r\n\r\n"
        },
        {
            "name": "CodeInputComponent",
            "id": "component-CodeInputComponent-a133f0b31752ae228c422f54d65ed9e29cd9779e7ed4dedb6973e25e3a1b28082add8d1c117e76954aefa7056e78df2fd8b54def56753cfee0a09a6c62152a88",
            "file": "src/stories/inputs/code-input/code-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "code-input",
            "styleUrls": [
                "./code-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "code-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autocapitalize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string | number",
                    "decorators": []
                },
                {
                    "name": "codeLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "initialFocusField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "inputMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isCharsCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isCodeHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isFocusingOnLastByClickIfFilled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isNonDigitsCode",
                    "defaultValue": "false",
                    "deprecated": true,
                    "deprecationMessage": "Use isCharsCode prop instead.",
                    "jsdoctags": [
                        {
                            "pos": 1391,
                            "end": 1433,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 1392,
                                "end": 1402,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Use isCharsCode prop instead.</p>\n"
                        }
                    ],
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isPrevFocusableAfterClearing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "codeChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter"
                },
                {
                    "name": "codeCompleted",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_codeLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "inputs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLInputElement[]",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "inputsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<DigitcodeInputComponent>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'storyInput'"
                        }
                    ]
                },
                {
                    "name": "inputsListSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "inputsStates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputState[]",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "placeholders",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "{\n    isFocusingAfterAppearingCompleted: false,\n    isInitialFocusFieldEnabled: false\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "storyInputsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'storyInput'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "canInputValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 443,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 371,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "emitCode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 375,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focusOnField",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusOnInputAfterAppearing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getCurrentFilledCode",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getStateForInput",
                    "args": [
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "InputState | undefined",
                    "typeParameters": [],
                    "line": 461,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isBackspaceKey",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDeleteKey",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 421,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmpty",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 466,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLife cycle\n",
                    "description": "<p>Life cycle</p>\n"
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCodeLengthChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "e",
                            "type": "GenericEvent<HTMLInputElement>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "GenericEvent<HTMLInputElement>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputCodeChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onInputsListChanges",
                    "args": [
                        {
                            "name": "list",
                            "type": "QueryList<DigitcodeInputComponent>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 340,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "QueryList<DigitcodeInputComponent>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeydown",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [
                        {
                            "name": "e",
                            "type": "ClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "ClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [
                        {
                            "name": "isChangesEmitting",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethods\n",
                    "description": "<p>Methods</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isChangesEmitting",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInputValue",
                    "args": [
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 425,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStateForInput",
                    "args": [
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "InputState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 452,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "InputState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewChecked,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChildren\n} from '@angular/core';\nimport {\n  CodeInputComponentConfig,\n  CodeInputComponentConfigToken,\n  defaultComponentConfig\n} from './code-input.component.config';\nimport { Subscription } from 'rxjs';\nimport {DigitcodeInputComponent} from \"../digitcode-input/digitcode-input.component\";\n\nenum InputState {\n  ready = 0,\n  reset = 1\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\ninterface GenericEvent<T> extends Omit<Event, 'target'> {\n  target: T;\n}\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: ['./code-input.component.scss']\n})\nexport class CodeInputComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy, AfterViewChecked, CodeInputComponentConfig {\n\n  @ViewChildren('storyInput') storyInputsList !: QueryList<ElementRef>;\n  @ViewChildren('storyInput') inputsList !: QueryList<DigitcodeInputComponent>;\n  //inputsList !: List<ElementRef>;\n  //= this.storyInputsList.map((e) => { e.nativeElement.input});\n\n\n  @Input() codeLength !: number;\n  @Input() inputType !: string;\n  @Input() inputMode !: string;\n  @Input() initialFocusField?: number;\n  /** @deprecated Use isCharsCode prop instead. */\n  @Input() isNonDigitsCode = false;\n  @Input() isCharsCode !: boolean;\n  @Input() isCodeHidden !: boolean;\n  @Input() isPrevFocusableAfterClearing !: boolean;\n  @Input() isFocusingOnLastByClickIfFilled !: boolean;\n  @Input() code ?: string | number;\n  @Input() disabled !: boolean;\n  @Input() autocapitalize ?: string;\n\n  @Output() readonly codeChanged = new EventEmitter<string>();\n  @Output() readonly codeCompleted = new EventEmitter<string>();\n\n  public placeholders: number[] = [];\n\n  private inputs: HTMLInputElement[] = [];\n  private inputsStates: InputState[] = [];\n  private inputsListSubscription !: Subscription;\n\n  // tslint:disable-next-line:variable-name\n  private _codeLength !: number;\n  private state = {\n    isFocusingAfterAppearingCompleted: false,\n    isInitialFocusFieldEnabled: false\n  };\n\n  constructor(@Optional() @Inject(CodeInputComponentConfigToken) config?: CodeInputComponentConfig) {\n    Object.assign(this, defaultComponentConfig);\n\n    if (!config) {\n      return;\n    }\n\n    // filtering for only valid config props\n    for (const prop in config) {\n      if (!config.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      if (!defaultComponentConfig.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      // @ts-ignore\n      this[prop] = config[prop];\n    }\n  }\n\n  /**\n   * Life cycle\n   */\n\n  ngOnInit(): void {\n    // defining the state\n    this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\n    // initiating the code\n    this.onCodeLengthChanges();\n  }\n\n  ngAfterViewInit(): void {\n    // initiation of the inputs\n    this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\n    this.onInputsListChanges(this.inputsList);\n  }\n\n  ngAfterViewChecked(): void {\n    this.focusOnInputAfterAppearing();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.code) {\n      this.onInputCodeChanges();\n    }\n    if (changes.codeLength) {\n      this.onCodeLengthChanges();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.inputsListSubscription) {\n      this.inputsListSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Methods\n   */\n\n  reset(isChangesEmitting = false): void {\n    // resetting the code to its initial value or to an empty value\n    this.onInputCodeChanges();\n\n    if (this.state.isInitialFocusFieldEnabled) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.focusOnField(this.initialFocusField!);\n    }\n\n    if (isChangesEmitting) {\n      this.emitChanges();\n    }\n  }\n\n  focusOnField(index: number): void {\n    if (index >= this._codeLength) {\n      throw new Error('The index of the focusing input box should be less than the codeLength.');\n    }\n\n    this.inputs[index].focus();\n  }\n\n  onClick(e: any): void {\n    // handle click events only if the the prop is enabled\n    if (!this.isFocusingOnLastByClickIfFilled) {\n      return;\n    }\n\n    const target = e.target;\n    const last = this.inputs[this._codeLength - 1];\n    // already focused\n    if (target === last) {\n      return;\n    }\n\n    // check filling\n    const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\n    if (!isFilled) {\n      return;\n    }\n\n    // focusing on the last input if is filled\n    setTimeout(() => last.focus());\n  }\n\n\n\n  onInput(e: GenericEvent<HTMLInputElement>, i: number): void {\n    const target = e.target;\n    const value = /*e.data ||*/ target.value;\n\n    if (this.isEmpty(value)) {\n      return;\n    }\n\n    // only digits are allowed if isCharsCode flag is absent/false\n    if (!this.canInputValue(value)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setInputValue(target, null);\n      this.setStateForInput(target, InputState.reset);\n      return;\n    }\n\n    const values = value.toString().trim().split('');\n    for (let j = 0; j < values.length; j++) {\n      const index = j + i;\n      if (index > this._codeLength - 1) {\n        break;\n      }\n\n      this.setInputValue(this.inputs[index], values[j]);\n    }\n    this.emitChanges();\n\n    const next = i + values.length;\n    if (next > this._codeLength - 1) {\n      target.blur();\n      return;\n    }\n\n    this.inputs[next].focus();\n  }\n\n  onPaste(e: ClipboardEvent, i: number): void {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\n\n    if (this.isEmpty(data)) {\n      return;\n    }\n\n    // Convert paste text into iterable\n    // tslint:disable-next-line:no-non-null-assertion\n    const values = data!.split('');\n    let valIndex = 0;\n\n    for (let j = i; j < this.inputs.length; j++) {\n      // The values end is reached. Loop exit\n      if (valIndex === values.length) {\n        break;\n      }\n\n      const input = this.inputs[j];\n      const val = values[valIndex];\n\n      // Cancel the loop when a value cannot be used\n      if (!this.canInputValue(val)) {\n        this.setInputValue(input, null);\n        this.setStateForInput(input, InputState.reset);\n        return;\n      }\n\n      this.setInputValue(input, val.toString());\n      valIndex++;\n    }\n\n    this.inputs[i].blur();\n    this.emitChanges();\n  }\n\n  async onKeydown(e: any, i: number): Promise<void> {\n    const target = e.target;\n    const isTargetEmpty = this.isEmpty(target.value);\n    const prev = i - 1;\n\n    // processing only the backspace and delete key events\n    const isBackspaceKey = await this.isBackspaceKey(e);\n    const isDeleteKey = this.isDeleteKey(e);\n    if (!isBackspaceKey && !isDeleteKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this.setInputValue(target, null);\n    if (!isTargetEmpty) {\n      this.emitChanges();\n    }\n\n    // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\n    if (prev < 0 || isDeleteKey) {\n      return;\n    }\n\n    if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\n      this.inputs[prev].focus();\n    }\n  }\n\n  private onInputCodeChanges(): void {\n    if (!this.inputs.length) {\n      return;\n    }\n\n    if (this.isEmpty(this.code)) {\n      this.inputs.forEach((input: HTMLInputElement) => {\n        this.setInputValue(input, null);\n      });\n      return;\n    }\n\n    // tslint:disable-next-line:no-non-null-assertion\n    const chars = this.code!.toString().trim().split('');\n    // checking if all the values are correct\n    let isAllCharsAreAllowed = true;\n    for (const char of chars) {\n      if (!this.canInputValue(char)) {\n        isAllCharsAreAllowed = false;\n        break;\n      }\n    }\n\n    this.inputs.forEach((input: HTMLInputElement, index: number) => {\n      const value = isAllCharsAreAllowed ? chars[index] : null;\n      this.setInputValue(input, value);\n    });\n  }\n\n  private onCodeLengthChanges(): void {\n    if (!this.codeLength) {\n      return;\n    }\n\n    this._codeLength = this.codeLength;\n    if (this._codeLength > this.placeholders.length) {\n      const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\n      this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\n    }\n    else if (this._codeLength < this.placeholders.length) {\n      this.placeholders.splice(this._codeLength);\n    }\n  }\n\n  private onInputsListChanges(list: QueryList<DigitcodeInputComponent>): void {\n    if (list.length > this.inputs.length) {\n      const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\n      this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.input.nativeElement));\n      const states = Array(inputsToAdd.length).fill(InputState.ready);\n      this.inputsStates.splice(this.inputsStates.length, 0, ...states);\n    }\n    else if (list.length < this.inputs.length) {\n      this.inputs.splice(list.length);\n      this.inputsStates.splice(list.length);\n    }\n\n    // filling the inputs after changing of their count\n    this.onInputCodeChanges();\n  }\n\n  private focusOnInputAfterAppearing(): void {\n    if (!this.state.isInitialFocusFieldEnabled) {\n      return;\n    }\n\n    if (this.state.isFocusingAfterAppearingCompleted) {\n      return;\n    }\n\n    // tslint:disable-next-line:no-non-null-assertion\n    this.focusOnField(this.initialFocusField!);\n    // tslint:disable-next-line:no-non-null-assertion\n    //this.state.isFocusingAfterAppearingCompleted = (document.activeElement === this.inputs[this.initialFocusField!]);\n  }\n\n  private emitChanges(): void {\n    setTimeout(() => this.emitCode(), 50);\n  }\n\n  private emitCode(): void {\n    const code = this.getCurrentFilledCode();\n\n    this.codeChanged.emit(code);\n\n    if (code.length >= this._codeLength) {\n      this.codeCompleted.emit(code);\n    }\n  }\n\n  private getCurrentFilledCode(): string {\n    let code = '';\n\n    for (const input of this.inputs) {\n      if (!this.isEmpty(input.value)) {\n        code += input.value;\n      }\n    }\n\n    return code;\n  }\n\n  private isBackspaceKey(e: any): Promise<boolean> {\n    const isBackspace = (e.key && e.key.toLowerCase() === 'backspace') || (e.keyCode && e.keyCode === 8);\n    if (isBackspace) {\n      return Promise.resolve(true);\n    }\n\n    // process only key with placeholder keycode on android devices\n    if (!e.keyCode || e.keyCode !== 229) {\n      return Promise.resolve(false);\n    }\n\n    return new Promise<boolean>((resolve) => {\n      setTimeout(() => {\n        const input = e.target;\n        const isReset = this.getStateForInput(input) === InputState.reset;\n        if (isReset) {\n          this.setStateForInput(input, InputState.ready);\n        }\n        // if backspace key pressed the caret will have position 0 (for single value field)\n        resolve(input.selectionStart === 0 && !isReset);\n      });\n    });\n  }\n\n  private isDeleteKey(e: any): boolean {\n    return (e.key && e.key.toLowerCase() === 'delete') || (e.keyCode && e.keyCode === 46);\n  }\n\n  private setInputValue(input: HTMLInputElement, value: any): void {\n    const isEmpty = this.isEmpty(value);\n    const valueClassCSS = 'has-value';\n    const emptyClassCSS = 'empty';\n    if (isEmpty) {\n      input.value = '';\n      input.classList.remove(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement!.classList.add(emptyClassCSS);\n    }\n    else {\n      input.value = value;\n      input.classList.add(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement!.classList.remove(emptyClassCSS);\n    }\n  }\n\n  private canInputValue(value: any): boolean {\n    if (this.isEmpty(value)) {\n      return false;\n    }\n\n    const isDigitsValue = /^[0-9]+$/.test(value.toString());\n    return isDigitsValue || (this.isCharsCode || this.isNonDigitsCode);\n  }\n\n  private setStateForInput(input: HTMLInputElement, state: InputState): void {\n    const index = this.inputs.indexOf(input);\n    if (index < 0) {\n      return;\n    }\n\n    this.inputsStates[index] = state;\n  }\n\n  private getStateForInput(input: HTMLInputElement): InputState | undefined {\n    const index = this.inputs.indexOf(input);\n    return this.inputsStates[index];\n  }\n\n  private isEmpty(value: any): boolean {\n    return  value === null || value === undefined || !value.toString().length;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  --text-security-type: disc;\n  --item-spacing: 0;\n  --item-height: 91px;\n  --item-border: 1px solid #dddddd;\n  --item-border-bottom: 1px solid #dddddd;\n  --item-border-has-value: 1px solid #dddddd;\n  --item-border-bottom-has-value: 1px solid #dddddd;\n  --item-border-focused: 1px solid #dddddd;\n  --item-border-bottom-focused: 1px solid #dddddd;\n  --item-shadow-focused: 0px 1px 5px rgba(221, 221, 221, 1);\n  --item-border-radius: 5px;\n  --item-background: transparent;\n  --item-font-weight: 300;\n  --color: #171516;\n\n  display: flex;\n  transform: translate3d(0, 0, 0);\n  font-size: inherit;\n  color: var(--color);\n\n  span {\n    display: block;\n    flex: 1;\n    padding-right: var(--item-spacing);\n\n    &:first-child {\n      padding-left: var(--item-spacing);\n    }\n\n    &.code-hidden input {\n      text-security: var(--text-security-type);\n      -webkit-text-security: var(--text-security-type);\n      -moz-text-security: var(--text-security-type);\n    }\n  }\n\n  input {\n    width: 100%;\n    height: var(--item-height);\n    color: inherit;\n    background: var(--item-background);\n    text-align: center;\n    font-size: inherit;\n    font-weight: var(--item-font-weight);\n    border: var(--item-border);\n    border-bottom: var(--item-border-bottom);\n    border-radius: var(--item-border-radius);\n    -webkit-appearance: none;\n    transform: translate3d(0, 0, 0);\n    -webkit-transform: translate3d(0, 0, 0);\n    outline: none;\n\n    &.has-value {\n      border: var(--item-border-has-value);\n      border-bottom: var(--item-border-bottom-has-value);\n    }\n\n    &:focus {\n      border: var(--item-border-focused);\n      border-bottom: var(--item-border-bottom-focused);\n      box-shadow: var(--item-shadow-focused);\n    }\n  }\n}\n",
                    "styleUrl": "./code-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "CodeInputComponentConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "CodeInputComponentConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnInit",
                "OnChanges",
                "OnDestroy",
                "AfterViewChecked",
                "CodeInputComponentConfig"
            ],
            "templateData": "<span *ngFor=\"let holder of placeholders; index as i; let first = first; let last = last;\"\n      [class.code-hidden]=\"isCodeHidden\"  >\n  <storybook-digitcode-input\n    #storyInput\n    (onClick)=\"onClick($event)\"\n    (onPaste)=\"onPaste($event,i)\"\n    (onInput)=\"onInput($event, i)\"\n    (onKeydown)=\"onKeydown($event, i)\"\n    [inputType]=\"inputType\"\n    [disabled]=\"disabled\"\n    [inputMode]=\"inputMode\"\n    [autocapitalize]=\"autocapitalize\"\n    [isFirst]=\"first\"\n    [isLast]=\"last\">\n  </storybook-digitcode-input>\n\n</span>\n"
        },
        {
            "name": "ConfigurationFormComponent",
            "id": "component-ConfigurationFormComponent-40b6dcf7928cd22620f0b8ab0f78a6edcd10768f2049f8633267af45c2035e25c697bfc480d03e8dd5730861234a4bc59e365ce5f6e6ebe573bca1206b7d8589",
            "file": "src/stories/forms/configuration-form/configuration-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-configuration-form",
            "styleUrls": [
                "./configuration-form.css"
            ],
            "styles": [],
            "templateUrl": [
                "./configuration-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "AuthService",
                    "decorators": []
                },
                {
                    "name": "isRegFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRegSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "regErrorMessage",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "storyInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "ConfigurationInput[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changePassword",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "clickXButton",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "openUser",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                },
                {
                    "name": "saveChanges",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "changeLog",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "credentials",
                    "defaultValue": "{\r\n    username: null,\r\n    password: null\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "mainHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formHeader', {static: false}"
                        }
                    ]
                },
                {
                    "name": "param",
                    "defaultValue": "{language: 'login-main'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "storybookInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'storybook-input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigurationInput[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "methodsClass": [
                {
                    "name": "doLogout",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSuccessfullyLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openReplacePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewChecked,\r\n  Component, Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input, OnChanges,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  Renderer2, SimpleChanges, Type, ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {ApiErrorMessageService} from \"../../../app/storybook/pipes/api-error-message.service\";\r\nimport {ConfigurationInput} from \"../../inputs/configuration-input/configuration-input.model\";\r\nimport {typeofExpr} from \"@angular/compiler/src/output/output_ast\";\r\n//import {BehaviorSubject} from \"rxjs\";\r\n//import {AccountInputComponent} from \"../inputs/input/story-input.component\";\r\n\r\n/*\r\n@Directive({selector: 'storybook-input'})\r\nexport class AccountInput {\r\n  @Input() storyInput!: AccountInput;\r\n}\r\n*/\r\n@Component({\r\n  selector: 'storybook-configuration-form',\r\n  templateUrl: './configuration-form.component.html',\r\n  styleUrls: ['./configuration-form.css'],\r\n})\r\nexport default class ConfigurationFormComponent implements OnInit, AfterViewChecked, OnChanges {\r\n\r\n  @Output() onLogout = new EventEmitter<Event>();\r\n\r\n  @Output() openUser = new EventEmitter<Event>();\r\n\r\n  doLogout(event: Event) {\r\n    this.onLogout.emit(event);\r\n    this.clickXButton.emit();\r\n  }\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  @Input() isRegFailed = false;\r\n  @Input() regErrorMessage: any = {};\r\n\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\r\n  @ViewChild('storybook-input', { static: false }) storybookInput?: ElementRef;\r\n\r\n\r\n  param = {language: 'login-main'};\r\n\r\n  constructor(private renderer: Renderer2) {\r\n  }\r\n\r\n  storyInputsInOrder: ConfigurationInput[] = [];\r\n\r\n  @Input() mForm: FormGroup  = new FormGroup({});\r\n  /*username: new FormControl('', Validators.minLength(2)),\r\n  password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n  email: new FormControl('', Validators.email),\r\n  phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))*/\r\n\r\n  changeLog: string[] = [];\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRegSuccess) {\r\n      if (!changes.isRegSuccess.previousValue &&  changes.isRegSuccess.currentValue) {\r\n        console.warn('Register Request Succeeded!');\r\n        this.loadSuccessfullyLoggedIn();\r\n      }\r\n    }\r\n    /*if (changes.isRegFailed || changes.regErrorMessage) {\r\n      console.log('isRegFailed' + this.regErrorMessage['message'])\r\n    }*/\r\n  }\r\n\r\n\r\n\r\n  @Input() isRegSuccess = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() saveChanges: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() changePassword: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: ConfigurationInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t =>  t.state == t.state || t.state === 'USER NAME1' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t =>  t.state == t.state || t.state === 'PASSWORD' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION');\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Registry Request Sent!');\r\n    this.saveChanges.emit();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.mForm?.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.mForm?.get('phone')!;\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    //console.log(this.childComp?.length)\r\n  }\r\n\r\n  loadSuccessfullyLoggedIn(){\r\n    this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully complete your registeration!');\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: relative;\r\n  width: 837.5px;\r\n  height: 550px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 479px/2 - 0.5px);\r\n}\r\n\r\n.form {\r\n  position: absolute;\r\n  left: 3.18%;\r\n  right: 14.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n\r\n.card-container.card {\r\n  max-width: 600px !important;\r\n  padding: 10px 10px;\r\n}\r\n.col-md-12{\r\n  position: center;\r\n  width: 965px;\r\n  height: 849px;\r\n  left: calc(50% - 965px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n  border-radius: 32px;\r\n}\r\n\r\n\r\n.profile-img-card {\r\n  position: relative;\r\n  right: 20px;\r\n  width: 96px;\r\n  height: 96px;\r\n  margin: 0 auto 10px;\r\n  -moz-border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  border-radius: 50%;\r\n}\r\n\r\n.card {\r\n  position: absolute;\r\n  left: 5.18%;\r\n  right: 4.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n.form-header {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n  display: inline;\r\n  width: 830px;\r\n  height: 92px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n.main-form-header {\r\n  position: relative;\r\n  display: inline;\r\n  width: 647px;\r\n  height: 52px;\r\n  flex-grow: 0;\r\n  margin: 0 0 0 0;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n.login-button {\r\n  position: relative;\r\n  width: 830px;\r\n  height: 102px;\r\n  left: calc(50% - 880px/2 - 80.5px);\r\n  top: calc(50% - 281.16px/2 - 171.58px);\r\n}\r\n\r\n\r\n.forgot-password {\r\n  /* D UnderLine Regular */\r\n\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n#button-successfully {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 102px;\r\n  margin-top: 50px;\r\n  margin-bottom: 100px;\r\n  left: 0;\r\n}\r\n\r\nstorybook-button-successfully {\r\n  position: relative;\r\n  left: 240px;\r\n}\r\n\r\n\r\n#button-ex {\r\n  position: absolute;\r\n  top: 48px;\r\n  left: 99px;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0;\r\n}\r\n\r\n#button-log-out {\r\n  position: absolute;\r\n  top: 42.5px;\r\n  right: 99px;\r\n  width: 66px;\r\n  height: 31px;\r\n  padding: 1px;\r\n  margin: 0 0 0.25rem;\r\n  background-color: rgba(61, 142, 207, 0);\r\n\r\n\r\n\r\n/* D UnderLine Regular */\r\n\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  text-align: center;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: inline;\r\n  align-items: end;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n.login-failed-message {\r\n  position: relative;\r\n  height: 55px;\r\n\r\n\r\n  /* D Regular */\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  align-items: start;\r\n  letter-spacing: -0.011em;\r\n\r\n  /* Red */\r\n\r\n  color: #FA4F4F;\r\n\r\n}\r\n\r\n.thematic-break {\r\n  position: relative;\r\n  margin: 0 2px 0 2.5px;\r\n  background-color: #3d8ecf;\r\n  border-top-width: 1px;\r\n  border-top-color: rgb(61, 142, 207);\r\n  border-top-style: solid;\r\n\r\n}\r\n\r\n.button-configuration {\r\n  position: absolute;\r\n  height: 6px;\r\n\r\n  background-image: linear-gradient(180deg, #3D8ECF 0%, #58A6E4 100%);\r\n\r\n  line-height: 0.19px;\r\n  top: -80px;\r\n  right: -40px;\r\n  border-radius: 7px;\r\n}\r\n",
                    "styleUrl": "./configuration-form.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewChecked",
                "OnChanges"
            ],
            "accessors": {
                "storyInputs": {
                    "name": "storyInputs",
                    "setSignature": {
                        "name": "storyInputs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "ConfigurationInput[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 108,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "ConfigurationInput[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 130
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 134
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 138
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 142
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card-rugged class=\"\"></storybook-card-rugged>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\" (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <button id=\"button-log-out\" (click)=\"this.doLogout($event)\" >Reset</button>\r\n    <label style=\"top: 1px; display: inline;\">Log out</label>\r\n    <div class=\"form-header\">\r\n      <img\r\n        id=\"profile-img\"\r\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n        class=\"profile-img-card\"\r\n      />\r\n      <a class=\"main-form-header\" #formHeader>Board-Admin</a>\r\n\r\n\r\n      <br>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n      <div class=\"Vector\">\r\n\r\n\r\n        <div *ngIf=\"isRegSuccess\" id=\"button-successfully\" style=\"\">\r\n          <storybook-button-successfully   style=\"position: relative; margin-bottom: 50px;\"></storybook-button-successfully>\r\n        </div>\r\n\r\n        <div class=\"login-button\">\r\n            <div *ngIf=\"!isRegSuccess\">\r\n              <storybook-configuration-input\r\n                [storyInput]=\"storyInputsInOrder[0]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-configuration-input>\r\n              <div class=\"thematic-break\"></div>\r\n              <storybook-configuration-input\r\n                [storyInput]=\"storyInputsInOrder[1]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-configuration-input>\r\n              <div class=\"thematic-break\"></div>\r\n              <storybook-configuration-input\r\n                [storyInput]=\"storyInputsInOrder[2]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-configuration-input>\r\n              <div class=\"thematic-break\"></div>\r\n              <storybook-configuration-input\r\n                [storyInput]=\"storyInputsInOrder[3]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (changePassword)=\"changePassword.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-configuration-input>\r\n\r\n            </div>\r\n\r\n            <div class=\"login-failed-message\" role=\"alert\" >\r\n              <p *ngIf=\"isRegFailed\">*  {{ this.regErrorMessage['message'] | apiErrorMessage: param }}</p>\r\n            </div>\r\n\r\n        </div>\r\n            <storybook-button-continue [label]=\"'Save Changes'\" size=\"small\" style=\"position: absolute; bottom: 10px; right: 70px;\"\r\n                                       label=\"Continue\" type=\"button\" (click)=\"onSubmit()\" >\r\n            </storybook-button-continue>\r\n\r\n\r\n      </div>\r\n\r\n    </form>\r\n  </div>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "ConfigurationInputComponent",
            "id": "component-ConfigurationInputComponent-be96e96238929dff8bfd928c5cf8c038818005e86dff9e7ae41845ab644de31e2c93a4eea338864d6eef08cb6529ee0398325c2904ba2aaa22003b4fdfa926cc",
            "file": "src/stories/inputs/configuration-input/configuration-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-configuration-input",
            "styleUrls": [
                "./configuration-input.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./configuration-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "conditionList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "currentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "hideInput",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "storyInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "ConfigurationInput",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changePassword",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "ddlauto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ddlauto'"
                        }
                    ]
                },
                {
                    "name": "Input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 85,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'rangeInput', {static: false}"
                        }
                    ]
                },
                {
                    "name": "isPasswordTextHide",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isStrength",
                    "defaultValue": "(this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "popover",
                    "defaultValue": "{\r\n    content: ActionInputComponent\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopoverOptions",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "selectedTeam",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorHeader",
                    "args": [
                        {
                            "name": "controllerType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "controllerType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorList",
                    "args": [
                        {
                            "name": "conditionList",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActionInput[]",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "conditionList",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
                    "description": "<p>Component method to trigger the onArchive event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6654,
                                "end": 6656,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6648,
                                "end": 6653,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onPin event\n",
                    "description": "<p>Component method to trigger the onPin event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6507,
                                "end": 6509,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6501,
                                "end": 6506,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSelectedDdlAuto",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { ConfigurationInput } from './configuration-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-configuration-input',\r\n  templateUrl: './configuration-input.component.html',\r\n  styleUrls: ['./configuration-input.scss']\r\n})\r\nexport class ConfigurationInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: ConfigurationInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Output() changePassword: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  @ViewChild('rangeInput', { static: false }) Input?: ElementRef;\r\n\r\n  @ViewChild('ddlauto') ddlauto!: ElementRef;\r\n  selectedTeam = '';\r\n  onSelectedDdlAuto():void {\r\n    this.selectedTeam = this.ddlauto.nativeElement.value;\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler?.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler?.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler?.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler?.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler?.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler?.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler?.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler?.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler?.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler?.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler?.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler?.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler?.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl | null{\r\n\r\n    return this.currentForm.get(this.storyInput?.name)!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n\r\n\r\n$tottal-height: 160px !default;\r\n\r\n.main {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 50px;\r\n  top: 0;\r\n  /*left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n  margin-bottom: 20px;*/\r\n  background-color: rgba(255, 255, 255, 0);\r\n\r\n}\r\n\r\n#storybook-pass {\r\n  border: 1px solid rgba(255, 0, 0, 0.11);\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n#parent1 {\r\n  position: sticky;\r\n  top: 1px;\r\n  height: 55px;\r\n  width: 100%;\r\n  /*border: 1px solid #c0077f;*/\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n#parent3 {\r\n  position: relative;\r\n  width: 100%;\r\n  margin: 10px 0 0 0;\r\n  /*height: 160px ;\r\n   border: 1px solid #072cc0;\r\nmargin-bottom: 3px;*/\r\n  /*background-color: rgba(255, 255, 255, 0);*/\r\n}\r\n\r\n/*\r\nspan.absolute {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 28px;\r\n  bottom: 0;\r\n  border: 1px solid #8AC007;\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n*/\r\n\r\n\r\n.user-name {\r\n  position: absolute;\r\n  width: 300px;\r\n  height: 20px;\r\n  left: 0%;\r\n  right: 82.7%;\r\n  top: 10%;\r\n  bottom: 68.37%;\r\n  /* identical to box height, or 223% */\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: -0.011em;\r\n  text-transform: uppercase;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n/* D Caps Regular */\r\n.D-Caps-Regular {\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 21px;\r\n}\r\n\r\n.UserNameType {\r\n  position: absolute;\r\n  width: 628px;\r\n  height: 22px;\r\n  left: 0;\r\n  bottom: 0;\r\n  margin: 4.2px 1px 2.8px 0;\r\n\r\n  /* D Regular */\r\n\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n\r\n  display: flex;\r\n  align-items: self-start;\r\n  letter-spacing: -0.011em;\r\n\r\n  color: #000000;\r\n}\r\n\r\n.inputField {\r\n  position: relative;\r\n  height: 25px;\r\n  width: 228px;\r\n  left: 35px;\r\n  bottom: -5px;\r\n  margin: 4.2px 1px 2.8px 20.3px;\r\n\r\n  /* D Example Italic */\r\n  object-fit: contain;\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 48%;\r\n  /* or 65% */\r\n\r\n  box-shadow: none;\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: -0.19px;\r\n\r\n  border-color: rgba(255, 255, 255, 0);\r\n  color: #000000;\r\n}\r\n\r\n.EnableProfilePicture{\r\n  display: inline;\r\n  position: relative;\r\n  margin: 4.2px 1px 2.8px 0;\r\n\r\n\r\n  /* D Regular */\r\n\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n\r\n  text-align: right;\r\n  letter-spacing: -0.011em;\r\n\r\n  color: #000000;\r\n}\r\n\r\n.user-checkbox-header {\r\n  position: absolute;\r\n  right: 1px;\r\n  top: 10px;\r\n  padding: 0;\r\n  margin: 0;\r\n  border-bottom-width: 0px;\r\n  background-color: rgba(45, 148, 55, 0);\r\n  object-fit: contain;\r\n\r\n}\r\n\r\n\r\n.icon-input-edit {\r\n  position: absolute;\r\n  width: 18.4px;\r\n  height: 19.51px;\r\n  right: 10px;\r\n  bottom: 11px;\r\n  padding-top: 0px;\r\n  margin: 0;\r\n  border-bottom-width: 0px;\r\n  background-color: rgba(45, 148, 55, 0);\r\n}\r\n\r\nimg.icon-input-edit {\r\n  position: absolute;\r\n  bottom: 1px;\r\n  right: 1px;\r\n  width: inherit;\r\n  height: inherit;\r\n  padding: 0px;\r\n  margin: 0px;\r\n  /*object-fit: contain;\r\n  box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nimg.icon-input {\r\n  position: absolute;\r\n  width: 22.72px;\r\n  height: 26.74px;\r\n  left: 17px;\r\n  bottom: 7px;\r\n\r\n  transform: rotate(0deg);\r\n  background-position: bottom;\r\n}\r\n\r\ninput:focus {\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\n\r\ninput::placeholder {\r\n  color: #C8C8C8;\r\n}\r\n\r\ninput[type=password]:focus {\r\n  color: #000000;\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\ninput[type=tel]:focus {\r\n  color: #000000;\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\n.Vector2 {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  //width: 100%;\r\n\r\n  left: 0.2%;\r\n  right: 10.03%;\r\n  top: 42.66%;\r\n  bottom: 0;\r\n\r\n  /* Blue */\r\n  border: 2px solid #3D8ECF;\r\n  border-radius: 10px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.Button-App-Label {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 33px;\r\n  horiz-align: center;\r\n\r\n}\r\n\r\n.storybook-input--addStrength {\r\n    height: 130px;\r\n\r\n\r\n\r\n}\r\n\r\n.storybook-input--clearStrength {\r\n\r\n\r\n    height: 60px;\r\n\r\n\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./configuration-input.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 93
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 98
                    }
                },
                "passwordValid": {
                    "name": "passwordValid",
                    "getSignature": {
                        "name": "passwordValid",
                        "type": "",
                        "returnType": "",
                        "line": 198
                    }
                },
                "requiredValid": {
                    "name": "requiredValid",
                    "getSignature": {
                        "name": "requiredValid",
                        "type": "",
                        "returnType": "",
                        "line": 202
                    }
                },
                "minLengthValid": {
                    "name": "minLengthValid",
                    "getSignature": {
                        "name": "minLengthValid",
                        "type": "",
                        "returnType": "",
                        "line": 206
                    }
                },
                "requiresDigitValid": {
                    "name": "requiresDigitValid",
                    "getSignature": {
                        "name": "requiresDigitValid",
                        "type": "",
                        "returnType": "",
                        "line": 210
                    }
                },
                "requiresUppercaseValid": {
                    "name": "requiresUppercaseValid",
                    "getSignature": {
                        "name": "requiresUppercaseValid",
                        "type": "",
                        "returnType": "",
                        "line": 214
                    }
                },
                "requiresLowercaseValid": {
                    "name": "requiresLowercaseValid",
                    "getSignature": {
                        "name": "requiresLowercaseValid",
                        "type": "",
                        "returnType": "",
                        "line": 218
                    }
                },
                "requiresSpecialCharsValid": {
                    "name": "requiresSpecialCharsValid",
                    "getSignature": {
                        "name": "requiresSpecialCharsValid",
                        "type": "",
                        "returnType": "",
                        "line": 222
                    }
                },
                "requiresEmailValid": {
                    "name": "requiresEmailValid",
                    "getSignature": {
                        "name": "requiresEmailValid",
                        "type": "",
                        "returnType": "",
                        "line": 226
                    }
                },
                "requiresPhoneValid": {
                    "name": "requiresPhoneValid",
                    "getSignature": {
                        "name": "requiresPhoneValid",
                        "type": "",
                        "returnType": "",
                        "line": 230
                    }
                },
                "formControler": {
                    "name": "formControler",
                    "getSignature": {
                        "name": "formControler",
                        "type": "",
                        "returnType": "AbstractControl | null",
                        "line": 234
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 255
                    }
                }
            },
            "templateData": "<div id=\"parent3\"  [hidden]=\"storyInput?.hide\" [ngClass]=\"classes\"  >\r\n  <div id=\"parent1\" >\r\n    <div class=\"main\"  [formGroup]=\"this.currentForm\">\r\n      <div>\r\n        <!--a class=\"user-name D-Caps-Regular\">{{storyInput?.state}}</a-->\r\n        <a class=\"user-name D-Caps-Regular\">{{storyInput?.type}}</a>\r\n\r\n        <br>\r\n        <span ngSwitch=\"{{storyInput.name.valueOf()!}}\">\r\n          <span *ngSwitchCase=\"'password'\" >\r\n            <storybook-button-continue   size=\"small\" label=\"Change Password\" type=\"button\" (onClick)=\"this.changePassword.emit()\" >\r\n            </storybook-button-continue>\r\n          </span>\r\n\r\n          <span *ngSwitchCase=\"'tadiran_gate_PreviousAlertPassExpDays'\" >\r\n            <label [attr.aria-label]=\"storyInput?.id + ''\" for=\"{{ storyInput?.name }}\" class=\"UserNameType\" >{{storyInput?.title}}  </label>\r\n            <div class=\"user-checkbox-header\">\r\n            <input  style=\"position: relative; margin: 0 2px 0 2px;   top: 1px; right: 3px;\"\r\n                    type=\"range\" min=\"14\" max=\"180\" step=\"1\"\r\n                    id=\"{{ storyInput?.id }}\"\r\n                    name=\"{{storyInput?.name}}\"\r\n                    formControlName=\"{{storyInput?.name}}\"\r\n                    placeholder=\"{{storyInput?.placeholder}}\"/>\r\n              <label class=\"EnableProfilePicture\" > {{this.formControler?.value}} </label>\r\n            </div>\r\n          </span>\r\n          <span *ngSwitchCase=\"'tadiran_gate_passExpDays'\" >\r\n            <label class=\"UserNameType\" >{{storyInput?.title}}  </label>\r\n            <div class=\"user-checkbox-header\">\r\n            <input  style=\"position: relative; margin: 0 2px 0 2px;   top: 1px; right: 3px;\"\r\n                    type=\"range\" min=\"14\" max=\"180\" step=\"1\"\r\n                    id=\"{{ storyInput?.id }}\"\r\n                    name=\"{{storyInput?.name}}\"\r\n                    formControlName=\"{{storyInput?.name}}\"\r\n                    placeholder=\"{{storyInput?.placeholder}}\"/>\r\n              <label class=\"EnableProfilePicture\"  >{{this.formControler?.value}}</label>\r\n            </div>\r\n          </span>\r\n          <span *ngSwitchCase=\"'tadiran_gate_TSV'\" >\r\n            <label class=\"UserNameType\" >{{storyInput?.title}}  </label>\r\n            <div class=\"user-checkbox-header\">\r\n            <input  style=\"position: relative; margin: 0 2px 0 2px;   top: 1px; right: 3px;\"  type=\"checkbox\"\r\n                    formControlName=\"{{storyInput?.name}}\"/>\r\n            <label class=\"EnableProfilePicture\" >Enable Profile Picture</label>\r\n            </div>\r\n          </span>\r\n          <span *ngSwitchCase=\"'spring_jpa_hibernate_ddlAuto'\" >\r\n            <label class=\"UserNameType\" >{{storyInput?.title}}  </label>\r\n            <div class=\"user-checkbox-header\">\r\n              <select #ddlauto id=\"ddl-auto\" (change)=\"onSelectedDdlAuto()\"\r\n                      formControlName=\"{{storyInput?.name}}\">\r\n                <option value=\"\">--Please choose an option--</option>\r\n                <option value=\"create\">create</option>\r\n                <option value=\"create-drop\">create-drop</option>\r\n                <option value=\"validate\">validate</option>\r\n                <option value=\"update\">update</option>\r\n                <option value=\"none\">none</option>\r\n              </select>\r\n            </div>\r\n          </span>\r\n          <span *ngSwitchDefault >\r\n            <label  [attr.aria-label]=\"storyInput?.id + ''\" for=\"{{ storyInput?.title }}\" class=\"Vector2 \">\r\n              <img src=\"{{ storyInput?.icon }}\" class=\"icon-input\" alt=\"icon input userName\"  name=\"{{ storyInput?.title }}\" />\r\n              <div [inputPopover] = \"this.popover\" [data]=\"this.getErrorList(this.conditionList)\" [header]=\"this.getErrorHeader(this.storyInput.title)\">\r\n                <input\r\n                  type=\"{{storyInput?.type}}\"\r\n                  id=\"{{ storyInput?.id }}\"\r\n                  class=\"inputField\"\r\n                  name=\"{{storyInput?.title}}\"\r\n                  formControlName=\"{{storyInput?.title}}\"\r\n                  placeholder=\"{{storyInput?.placeholder}}\"\r\n                  required />\r\n              </div>\r\n\r\n\r\n              <br>\r\n\r\n\r\n            </label>\r\n\r\n\r\n            <button  class=\"icon-input-edit\"  type=\"button\">\r\n              <img src=\"./assets/images/EditIconA.png\" class=\"icon-input-edit\" alt=\"icon input type\" />\r\n            </button>\r\n          </span>\r\n        </span>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n</div>\r\n"
        },
        {
            "name": "DigitcodeInputComponent",
            "id": "component-DigitcodeInputComponent-8e93df7450b0d41cbefef3332e618f0b37ffd90aee1973f2c93d546ea00c01c5600a7b22dfea48dd1bd3faa2d72504444a3e14e57cfbcee4141e3263f197353f",
            "file": "src/stories/inputs/digitcode-input/digitcode-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-digitcode-input",
            "styleUrls": [
                "./digitcode-input.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./digitcode-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autocapitalize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "digitInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "DigitcodeInput",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inputMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isFirst",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onPaste",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component, ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  OnInit,\r\n  Output, ViewChild,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { DigitcodeInput } from './digitcode-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-digitcode-input',\r\n  templateUrl: './digitcode-input.component.html',\r\n  styleUrls: ['./digitcode-input.scss']\r\n})\r\nexport class DigitcodeInputComponent implements OnInit{\r\n\r\n  @Input() digitInput?: DigitcodeInput;\r\n\r\n  @ViewChild('input') public input!: ElementRef<HTMLInputElement>;\r\n  @Input() inputType !: string;\r\n  @Input() inputMode !: string;\r\n  @Input() disabled !: boolean;\r\n  @Input() autocapitalize ?: string;\r\n  @Input() isFirst ?: boolean;\r\n  @Input() isLast ?: boolean;\r\n  @Output() onClick: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() onPaste: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onKeydown: EventEmitter<Event> = new EventEmitter<Event>();\r\n  value: string = '';\r\n\r\n\r\n  public get classes(): string[] {\r\n\r\n    //const isFirst = (this.index === 1) ? 'storybook-digitcode-input--first' : 'storybook-digitcode-input--notFirst';\r\n\r\n    return ['storybook-digitcode-input'];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n\r\n.Vector2 {\r\n  position: static;\r\n  box-sizing: border-box;\r\n  margin-right: 10px;\r\n  margin-left: 13px;\r\n\r\n  width: 95px;\r\n  height: 95px;\r\n  /*left: 1px;\r\n  right: 0.03%;*/\r\n  top: 2px;\r\n  /*bottom: 0;*/\r\n\r\n  /* Blue */\r\n  border: 2px solid #3D8ECF;\r\n  border-radius: 10px;\r\n  display: inline-block;\r\n  vertical-align: middle\r\n}\r\n\r\ninput {\r\n\r\n\r\n}\r\n\r\ninput.digit {\r\n\r\n  --item-border: 1px solid white;\r\n  --item-border-bottom: 1px solid white;\r\n  --item-border-has-value: 1px solid white;\r\n  --item-border-bottom-has-value: 1px solid white;\r\n  --item-border-focused: 1px solid white;\r\n  --item-border-bottom-focused: 1px solid white;\r\n  --item-shadow-focused: 0px 1px 5px white;\r\n\r\n\r\n  position: relative;\r\n  width: 44px;\r\n  height: 54px;\r\n  left: 23px;\r\n  top: 18px;\r\n\r\n  border: 0;\r\n  background-color: rgba(255, 255, 255, 0);\r\n  border-color: rgba(255, 255, 255, 0);\r\n  box-shadow: var(--item-shadow-focused);\r\n\r\n\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 40px;\r\n  line-height: 54px;\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n\r\n  color: #000000;\r\n\r\n\r\n  &.has-value {\r\n    border: var(--item-border-has-value);\r\n    border-bottom: var(--item-border-bottom-has-value);\r\n    box-shadow: var(--item-shadow-focused);\r\n  }\r\n\r\n  &:focus {\r\n    border: var(--item-border-focused);\r\n    border-bottom: var(--item-border-bottom-focused);\r\n    box-shadow: var(--item-shadow-focused);\r\n  }\r\n}\r\n",
                    "styleUrl": "./digitcode-input.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 60
                    }
                }
            },
            "templateData": "\r\n\r\n<label class=\"Vector2\" [ngStyle]=\"{'margin-left': isFirst ? '0' : '10px',  'margin-right': isLast ? '0' : '10px'}\">\r\n\r\n   <input #input\r\n         (click)=\"onClick.emit($event)\"\r\n         (paste)=\"onPaste.emit($event)\"\r\n         (input)=\"onInput.emit($event)\"\r\n         (keydown)=\"onKeydown.emit($event)\"\r\n         [type]=\"this.inputType\"\r\n         [disabled]=\"disabled\"\r\n         [attr.inputmode]=\"inputMode\"\r\n         [attr.autocapitalize]=\"autocapitalize\"\r\n         [value]=\"value\"\r\n         autocomplete=\"one-time-code\"\r\n         class=\"digit\"/>\r\n</label>\r\n"
        },
        {
            "name": "ExampleCard",
            "id": "component-ExampleCard-995567d6d71d4729d8c057e805e8a9e4a84bf752d4c8f5ed6a1cbce54407659a3bf089df63f1b0aa7e0ea195d958a74e0e4aad69cda078098b6701f0b62d7871",
            "file": "src/app/home/example-card/example-card.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "example-card",
            "styleUrls": [
                "example-card.css"
            ],
            "styles": [],
            "templateUrl": [
                "example-card.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\r\nimport {BoardUserComponent} from \"../../login2/profile2/board-user/board-user.component\";\r\n\r\n/**\r\n * @title Card with multiple sections\r\n */\r\n@Component({\r\n  selector: 'example-card',\r\n  templateUrl: 'example-card.html',\r\n  styleUrls: ['example-card.css'],\r\n})\r\nexport class ExampleCard {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-card {\r\n  max-width: 400px;\r\n}\r\n\r\n.example-header-image {\r\n  background-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\r\n  background-size: cover;\r\n}\r\n",
                    "styleUrl": "example-card.css"
                }
            ],
            "stylesData": "",
            "templateData": "<!DOCTYPE html>\r\n<mat-card lang=\"en\" class=\"example-card\">\r\n  <mat-card-header>\r\n    <div mat-card-avatar class=\"example-header-image\"></div>\r\n    <mat-card-title>Shiba Inu</mat-card-title>\r\n    <mat-card-subtitle>Dog Breed</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <img mat-card-image src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\" alt=\"Photo of a Shiba Inu\">\r\n  <mat-card-content>\r\n    <p>\r\n      The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\r\n      A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\r\n      bred for hunting.\r\n    </p>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <button mat-button>LIKE</button>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n"
        },
        {
            "name": "ForgotPassForm2Component",
            "id": "component-ForgotPassForm2Component-8f9bd786c041c9ef4b42b4fe586a47e171f59f013b2615edcb3ffb21e9555c074069474ed46d614c5b5f8fda46ece023b9161f0a9d99f328827fedb8ba21ca12",
            "file": "src/app/login2/login-main/forgot-pass-form2/forgot-pass-form2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "forgot-pass-form2",
            "styleUrls": [
                "./forgot-pass-form2.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-pass-form2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiResponse",
                    "defaultValue": "{ message: '', error: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TSVData",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ForgotPassForm2Component>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "empList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "errorFieldSubmitted",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "forgotPassForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "defaultValue": "{\r\n    isVerSuccess: false,\r\n    isRecSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryInput[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "generateNewCodeFor2SV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Inject, OnInit, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nexport interface TSVData {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'forgot-pass-form2',\r\n  templateUrl: './forgot-pass-form2.component.html',\r\n  styleUrls: ['./forgot-pass-form2.component.css']\r\n})\r\nexport default class ForgotPassForm2Component implements OnInit {\r\n  forgotPassForm: FormGroup;\r\n  status = {\r\n    isVerSuccess: false,\r\n    isRecSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }\r\n\r\n  public isLoading = false;\r\n  submitted = false;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n  ];\r\n\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private tokenStorage: TokenStorageService,\r\n              public dialogRef: MatDialogRef<ForgotPassForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: TSVData) {\r\n    this.forgotPassForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //this.generateNewCodeFor2SV();\r\n  }\r\n\r\n  onSubmit(code: string): void {\r\n    if (this.status.isVerSuccess) {\r\n      this.dialogRef.close({message: 'Successful verification', data: this.data});\r\n    }\r\n    this.submitted = true;\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.data.username = username;\r\n\r\n    this.isLoading = true;\r\n    this.authService.TSV_ValidateCodeByName(username, this.data.email, code).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.tokenStorage.savePinCodeToken(data.pinCodeToken);\r\n        this.status.isVerSuccess = true;\r\n        this.status.isVerFailed = false;\r\n        this.errorFieldSubmitted = {} ;\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful verification';\r\n      },\r\n      error => {\r\n        const errorResponse = error.error;\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Verification error';\r\n        this.status.verErrorMessage = error.error.message;\r\n        this.status.isVerFailed = true;\r\n        this.errorFieldSubmitted = errorResponse.message;\r\n        console.log(errorResponse);\r\n        this.isLoading = false;\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Validate Code Request Finished\");}\r\n    );\r\n  }\r\n\r\n  generateNewCodeFor2SV() {\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.isLoading = true;\r\n    this.authService.ResetPassByMail(username, this.data.email).subscribe(\r\n      data => {\r\n          if (data.message == \"Password successfully sent to email!\") {\r\n            this.status.isRecSuccess = true;\r\n          }\r\n        console.log(\"Generating Temporary Password Succeeded\", data);\r\n      },\r\n      error => {\r\n        this.isLoading = false;\r\n        console.log(\"Error: Can't generate temporary password for user \");\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Sending generation temporary password request complete\");\r\n      });\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.forgotPassForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.forgotPassForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.forgotPassForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.forgotPassForm.get('phone')!;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n.fa,.fab,.fad,.fal,.far,.fas {\r\n  -moz-osx-font-smoothing:grayscale;\r\n  -webkit-font-smoothing:antialiased;\r\n  display:inline-block;\r\n  font-style:normal;\r\n  font-variant:normal;\r\n  text-rendering:auto;line-height:1\r\n}\r\n\r\n.fa-lg {\r\n  font-size:1.33333em;\r\n  line-height:.75em;\r\n  vertical-align:-.0667em\r\n}\r\n/**/\r\n.fa-xs {font-size:.75em}\r\n\r\n.fa-sm {font-size:.875em}\r\n\r\n.fa-1x {font-size:1em}\r\n\r\n.fa-2x {font-size:2em}\r\n\r\n.fa-3x {font-size:3em}\r\n\r\n.fa-4x {font-size:4em}\r\n\r\n.fa-5x {font-size:5em}\r\n\r\n.fa-6x {font-size:6em}\r\n\r\n.fa-7x {font-size:7em}\r\n\r\n.fa-8x {font-size:8em}\r\n\r\n.fa-9x {font-size:9em}\r\n\r\n.fa-10x {font-size:10em}\r\n\r\n.fa-fw {text-align:center;width:1.25em}\r\n\r\n.fa-ul {list-style-type:none;margin-left:2.5em;padding-left:0}\r\n\r\n.fa-ul>li {position:relative}\r\n\r\n.fa-li {left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}\r\n\r\n.fa-border {border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\n.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left {\r\n  margin-right:.3em\r\n}\r\n\r\n.input-with-pre-icon label {left:36px;right:initial}\r\n\r\n\r\n.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right {\r\n  margin-left:.3em\r\n}\r\n\r\n.fa-spin {\r\n  -webkit-animation:fa-spin 2s linear infinite;\r\n  animation:fa-spin 2s linear infinite\r\n}\r\n\r\n\r\n\r\n.fa,.far,.fas {\r\n  font-family: \"Font Awesome 5 Free\", serif\r\n}\r\n\r\n.fa,.fas {\r\n  font-weight:900\r\n}\r\n\r\n\r\n.v-btn__content {\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1 0 auto;\r\n  justify-content: inherit;\r\n  line-height: normal;\r\n  position: relative;\r\n  transition: inherit;\r\n}\r\n\r\n.form-outline .form-control:focus ~ .form-label, .form-outline .form-control.active ~ .form-label {\r\n  transform: translateY(-1.5rem) translateY(0.1rem) scale(0.8);\r\n}\r\n\r\n\r\n/*\r\n.form-outline .form-control ~ .form-notch div {\r\n  pointer-events: none;\r\n  border: 1px solid;\r\n  border-color: #39c0ed;\r\n}\r\n\r\n*/\r\n.v-btn__content {\r\n  letter-spacing: normal;\r\n}\r\n\r\nbody#registerFormDialogContainer {\r\n  background: #0000ff00;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./forgot-pass-form2.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ForgotPassForm2Component>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "TSVData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ForgotPassForm2Component>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "TSVData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 110
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 114
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 118
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 122
                    }
                }
            },
            "templateData": "\r\n<storybook-forgot-pass-form\r\n  [status]=\"status\"\r\n  [isLoading]=\"isLoading\"\r\n  [isVerSuccess]=\"status.isVerSuccess\"\r\n  [isRecSuccess]=\"status.isRecSuccess\"\r\n  [storyInputs]=\"storyInputsInOrder\"\r\n  [mForm]=\"forgotPassForm\"\r\n  (sendVerificationReq)=\"onSubmit($event)\"\r\n  (generateNewCodeFor2SV)=\"generateNewCodeFor2SV()\"\r\n  (clickXButton)=\"this.dialogRef.close({message: 'xbutton'})\">\r\n</storybook-forgot-pass-form>\r\n"
        },
        {
            "name": "ForgotPassFormComponent",
            "id": "component-ForgotPassFormComponent-c830a5f63b2a25f1f439ba1ac00b36466017513e7face4090494f589216b1feb1eac63132ae123ef6166e13892e74dbab8bcd6f868799a79a26d9acc597f503f",
            "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-forgot-pass-form",
            "styleUrls": [
                "./forgot-pass-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-pass-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRecSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isVerSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 127,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "storyInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "StoryInput[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickXButton",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "generateNewCodeFor2SV",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "sendVerificationReq",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "appDynamicComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicCompDirective",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DynamicCompDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "changeLog",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "code",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "codeInputComponentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "codeLength",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "formButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formButton', {static: false}"
                        }
                    ]
                },
                {
                    "name": "formButtonClick",
                    "defaultValue": "'generateNewCodeFor2SV.emit()'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "formButtonLabel",
                    "defaultValue": "'Send me a Verification Code'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "formFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formFields', {static: false}"
                        }
                    ]
                },
                {
                    "name": "formHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formHeader', {static: false}"
                        }
                    ]
                },
                {
                    "name": "param",
                    "defaultValue": "{language: 'login-main'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "popoverOptions",
                    "defaultValue": "{\r\n    content: CodeInputComponent\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdComponent",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "secondHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'secondHeader', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "movToVerifyState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCodeChanged",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCodeCompleted",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component, ComponentFactoryResolver, ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges, Type,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {CodeInputComponent} from \"../../inputs/code-input/code-input.component\";\r\nimport {DynamicCompDirective} from \"../../directive/dynamic-comp.directive\";\r\nimport {PopoverOptions} from \"../../directive/popover.interface\";\r\n\r\n\r\nexport interface AdComponent {\r\n  content: any;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-forgot-pass-form',\r\n  templateUrl: './forgot-pass-form.component.html',\r\n  styleUrls: ['./forgot-pass-form.component.scss'],\r\n})\r\nexport default class ForgotPassFormComponent implements OnInit {\r\n\r\n  codeLength: number = 4;\r\n  code: string = '';\r\n  param = {language: 'login-main'};\r\n  formButtonLabel: string = 'Send me a Verification Code';\r\n  formButtonClick: string = 'generateNewCodeFor2SV.emit()';\r\n\r\n  @Input() status?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() sendVerificationReq: EventEmitter<string> = new EventEmitter();\r\n\r\n  @Output() generateNewCodeFor2SV: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild(DynamicCompDirective, {static: true}) appDynamicComp!: DynamicCompDirective;\r\n  //@ViewChild('codeInput') codeInput!: CodeInputComponent;\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild('secondHeader', { static: false }) secondHeader?: ElementRef;\r\n\r\n  @ViewChild('formHeader', { static: false }) formHeader?: ElementRef;\r\n\r\n  @ViewChild('formFields', { static: false }) formFields?: ElementRef;\r\n\r\n  @ViewChild('formButton', { static: false }) formButton?: ElementRef;\r\n\r\n  @Input() isVerSuccess = false;\r\n\r\n  @Input() isRecSuccess = false;\r\n\r\n  constructor(private renderer: Renderer2,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  changeLog: string[] = [];\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRecSuccess) {\r\n      if (!changes.isRecSuccess.previousValue &&  changes.isRecSuccess.currentValue) {\r\n        console.warn('Identify Request Succeeded!');\r\n        this.movToVerifyState();\r\n      }\r\n    }\r\n\r\n    if (changes.isVerSuccess) {\r\n      if (!changes.isVerSuccess.previousValue &&  changes.isVerSuccess.currentValue) {\r\n        console.warn('Verify Request Succeeded!');\r\n        //this.changeFormToPinCodeState();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  onSubmit(): void {\r\n    if (!this.isRecSuccess) {this.generateNewCodeFor2SV.emit();}\r\n    /*else if (!this.isVerSuccess) {\r\n      console.info('Send Verification Request!');\r\n      this.sendVerificationReq.emit(this.code);\r\n      if (!this.status.isVerSuccess) {this.codeInputComponentRef?.instance.reset();}\r\n    }*/\r\n    else {this.clickXButton.emit();}\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of Inputs\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup = new FormGroup({});\r\n\r\n  // this called every time when user changed the code\r\n  onCodeChanged(code: string) {\r\n    this.code = code;\r\n    //console.log('code entered: '+ this.code);\r\n  }\r\n\r\n  // this called only if user entered full code\r\n  onCodeCompleted(code: string) {\r\n    //\r\n  }\r\n\r\n  popoverOptions: AdComponent = {\r\n    content: CodeInputComponent\r\n  };\r\n\r\n  codeInputComponentRef?: ComponentRef<any>;\r\n\r\n  movToVerifyState(){\r\n    this.renderer.setProperty(this.formHeader?.nativeElement ,'innerHTML',\r\n      'Reset Password');\r\n\r\n    this.renderer.setProperty(this.secondHeader?.nativeElement ,'innerHTML',\r\n      'A new temporary password has been sent to<br>your email address'); //+\r\n      //'Once received, use the temporary password to log in<br>' +\r\n      //'You will be required to create a new secure password once logged in<br>'\r\n\r\n    this.formButtonLabel = 'Continue';\r\n\r\n    this.formButtonClick = '\"onSubmit()\"';\r\n\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.popoverOptions.content);\r\n    const viewContainerRef = this.appDynamicComp.viewContainerRef;\r\n    viewContainerRef.clear();\r\n    this.codeInputComponentRef = viewContainerRef.createComponent(componentFactory);\r\n    this.codeInputComponentRef.instance.codeChanged.subscribe(($event: string) => {\r\n      this.onCodeChanged($event);\r\n      console.log(\"Code Changed\");\r\n    });\r\n\r\n\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: relative;\r\n  width: 637.5px;\r\n  height: 430px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 479px/2 - 0.5px);\r\n}\r\n\r\n.form {\r\n  position: absolute;\r\n  left: 3.18%;\r\n  right: 14.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 10px 10px;\r\n}\r\n.col-md-12{\r\n  position: center;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n\r\n#button-successfully {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  margin-top: 50px;\r\n  margin-bottom: 100px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 51.16px/2 - 221.58px);\r\n}\r\n\r\nstorybook-button-successfully {\r\n  position: relative;\r\n  left: 140px;\r\n\r\n}\r\n\r\n#button-ex {\r\n  position: absolute;\r\n  top: 48px;\r\n  left: 99px;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0;\r\n}\r\n\r\n\r\n.card {\r\n  position: absolute;\r\n  left: 5.18%;\r\n  right: 4.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n.form-header {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  width: 447px;\r\n  height: 62px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n\r\n}\r\n\r\n#code-input {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n}\r\n\r\n\r\n.login-button {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 600px/2 - 0.5px);\r\n//  top: 0;\r\n}\r\n\r\n\r\n.resend-verification {\r\n  /* D UnderLine Regular */\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n.second-header-text {\r\n  /* D UnderLine Regular */\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n\r\n\r\n.login-failed-message {\r\n\r\n  /* D Regular */\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  align-items: start;\r\n  letter-spacing: -0.011em;\r\n\r\n  /* Red */\r\n\r\n  color: #FA4F4F;\r\n\r\n}\r\n\r\ncode-input {\r\n  position: absolute;\r\n  width: 445px;\r\n  height: 102px;\r\n\r\n  /*left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 221.58px);*/\r\n  align-items: start;/**/\r\n}\r\n\r\n.second-header {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 42px;\r\n\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 51.16px/2 - 221.58px);\r\n  align-items: start;/**/\r\n}\r\n\r\n\r\n.Vector2 {\r\n  position: static;\r\n  box-sizing: border-box;\r\n  margin-right: 10px;\r\n  margin-left: 11px;\r\n\r\n  width: 95px;\r\n  height: 95px;\r\n  /*left: 1px;\r\n  right: 0.03%;*/\r\n  top: 2px;\r\n  /*bottom: 0;*/\r\n\r\n  /* Blue */\r\n  border: 2px solid #3D8ECF;\r\n  border-radius: 10px;\r\n  display: inline-block;\r\n  vertical-align: middle\r\n}\r\n",
                    "styleUrl": "./forgot-pass-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "storyInputs": {
                    "name": "storyInputs",
                    "setSignature": {
                        "name": "storyInputs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 77,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\" (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div  #formHeader class=\"form-header\">\r\n      Forgot Password?\r\n    </div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n    <form name=\"currentForm\" [formGroup]=\"mForm\">\r\n      <div  class=\"Vector\">\r\n\r\n\r\n\r\n        <div class=\"second-header\" style=\"top: 5px;\">\r\n          <p class=\"second-header-text\"  #secondHeader href=\"#/login\" style=\"position: relative; top: 5px; text-align: left\">\r\n            {{ 'Please enter your User Name:'}}<br>\r\n          </p>\r\n        </div>\r\n\r\n\r\n        <div #formFields id=\"button-successfully\" style=\"\">\r\n          <storybook-button-successfully  *ngIf=\"status.isRecSuccess\"  style=\"position: relative; top: 15px\"></storybook-button-successfully>\r\n          <ng-template  *ngIf=\"status.isVerSuccess\"  appDynamicComp>\r\n\r\n          </ng-template>\r\n\r\n          <storybook-input  style=\"\" *ngIf=\"!status.isRecSuccess\"\r\n                           [storyInput]=\"storyInputsInOrder[0]\"\r\n                           (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                           (onPinInput)=\"onPinInput.emit($event)\"\r\n                           [currentForm]=\"mForm\">\r\n          </storybook-input>\r\n          <!--code-input *ngIf=\"!status.isVerSuccess\"\r\n                      #codeInput\r\n                      [codeLength]=\"codeLength\"\r\n                      (codeChanged)=\"onCodeChanged($event)\"\r\n                      (codeCompleted)=\"onCodeCompleted($event)\">\r\n          </code-input-->\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div class=\"login-button\">\r\n          <div class=\"login-failed-message\" role=\"alert\" style=\"position: relative; top: 15px\">\r\n            <table *ngIf=\"this.status?.isVerFailed\">\r\n              <tr>{{ this.status?.verErrorMessage.toString()  | apiErrorMessage: param }}</tr>\r\n              <tr  *ngFor=\"let message of this.status?.verErrorMessage.data?.confirmPassword.split(', ')\">{{message.trim() | apiErrorMessage: param }}</tr>\r\n            </table>\r\n          </div>\r\n\r\n          <storybook-button-continue #formButton size=\"small\" [label]=\"this.formButtonLabel\" type=\"button\"\r\n                                     (onClick)=\"this.onSubmit()\" style=\"position: relative; top: 15px\"></storybook-button-continue>\r\n\r\n\r\n          <a *ngIf=\"status.isRecSuccess && !status.isVerSuccess\" class=\"resend-verification\"  (click)=\"generateNewCodeFor2SV.emit()\" style=\"position: relative; top: 40px;\">\r\n            {{ 'Send me a reset password once again'  }}\r\n          </a>\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-6e4a7dd91969f07e43f9454ed35393fc8883046c91ddf54b9e38a837d4e59e3dcfee5467c2b37d0c678e7d7b5dcecf7e8f866f49aa01eaf142fcbe67a19f6e26",
            "file": "src/stories/headers/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\" fill=\"#FFF\" />\n            <path d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\" fill=\"#555AB9\"/>\n            <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\"/>\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b>!\n          </span>\n          <storybook-button *ngIf=\"user\" size=\"small\" (onClick)=\"onLogout.emit($event)\" label=\"Log out\"></storybook-button>\n          <storybook-card *ngIf=\"user\" size=\"small\" (onClick)=\"onLogout.emit($event)\" label=\"Log out\"></storybook-card>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button *ngIf=\"!user\" size=\"small\" class=\"margin-left\" (onClick)=\"onLogin.emit($event)\" label=\"Log in\"></storybook-button>\n          <storybook-button *ngIf=\"!user\" primary size=\"small\" primary=\"true\" class=\"margin-left\" (onClick)=\"onCreateAccount.emit($event)\" label=\"Sign up\"></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from '../User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\" fill=\"#FFF\" />\n            <path d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\" fill=\"#555AB9\"/>\n            <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\"/>\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b>!\n          </span>\n          <storybook-button *ngIf=\"user\" size=\"small\" (onClick)=\"onLogout.emit($event)\" label=\"Log out\"></storybook-button>\n          <storybook-card *ngIf=\"user\" size=\"small\" (onClick)=\"onLogout.emit($event)\" label=\"Log out\"></storybook-card>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button *ngIf=\"!user\" size=\"small\" class=\"margin-left\" (onClick)=\"onLogin.emit($event)\" label=\"Log in\"></storybook-button>\n          <storybook-button *ngIf=\"!user\" primary size=\"small\" primary=\"true\" class=\"margin-left\" (onClick)=\"onCreateAccount.emit($event)\" label=\"Sign up\"></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-3d531f29d4583841b7509229fdb4516780cc74136c3730dd3b46ccd75aa4cff54ea52d594f2576171a31d6d08ad01ffdc947242f4f9f36719d7497d08354c8ea",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ACC_VERSION",
                    "defaultValue": "'ACC_VERSION'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "defaultValue": "'Aeonix | Tadiran Telecom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../_services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  public ACC_VERSION: string = 'ACC_VERSION';\r\n  content?: string = 'Aeonix | Tadiran Telecom';\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getPublicContent().subscribe(\r\n      data => { this.content = data; },\r\n      err => { this.content = JSON.parse(err.error).message; }\r\n    );\r\n    this.userService.getAccVersion().subscribe(\r\n      data => { this.ACC_VERSION = data; },\r\n      err => { this.ACC_VERSION = JSON.parse(err.error).message; }\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "._1Q9if, ._2Hij5 {\r\n  word-wrap: break-word;\r\n  overflow-wrap: break-word;\r\n  text-align: start;\r\n  pointer-events: none;\r\n}\r\n\r\n._3SQN-, ._3wnIc {\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.multi-bg-example {\r\n  width: 980px;\r\n  height: 289px;\r\n  object-fit: cover;\r\n  object-position: 50% 50%;\r\n}\r\n\r\n.font_0 {\r\n  font-size:44px;\r\n  text-align:left;\r\n  color:#FFFFFF;\r\n}\r\n\r\n.alert, .alert-success {\r\n  width: 48%;\r\n}\r\n\r\n\r\n.background {\r\n  background-size: cover;\r\n  background-origin: border-box;\r\n  background-image: url(/assets/images/Background.webp);\r\n  /*linear-gradient(to right, rgba(30, 75, 115, 1), rgba(255, 255, 255, 0));*/\r\n  background-repeat: no-repeat;\r\n  background-position: top left;\r\n\r\n}\r\n\r\n.bg-image {\r\n  background-image: url(/assets/images/contact-center.jpg);\r\n  background-position: top right;\r\n  padding-bottom: 100px;\r\n}\r\n\r\naside {\r\n  width: 48%;\r\n  padding-left: .1rem;\r\n  margin-left: .1rem;\r\n  float: right;\r\n  box-shadow: inset 5px 0 5px -5px #29627e;\r\n  font-style: italic;\r\n  color: #29627e;\r\n\r\n}\r\naside > p {\r\n  margin: .20rem;\r\n}\r\n\r\np {\r\n  font-family: 'Fira Sans', sans-serif;\r\n}\r\n",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container \">\r\n  <br>\r\n  <header class=\"background jumbotron  \">\r\n    <h1 class=\"font_0\">\r\n      <span class=\"\" style=\"font-size:44px;\">\r\n        <dl>\r\n          <dt><span>{{ content }}</span></dt>\r\n          <dd><span>{{ ACC_VERSION }}</span></dd>\r\n        </dl>\r\n      </span>\r\n    </h1>\r\n  </header>\r\n\r\n  <storybook-button-fortest></storybook-button-fortest>\r\n  <aside>\r\n    <!-- Card -->\r\n    <div class=\"fa-pull-right bg-image card shadow-1-strong card-img\">\r\n      <div class=\"card-body text-white\">\r\n        <h5 class=\"card-title\">Card title</h5>\r\n        <p class=\"card-text\">\r\n          Some quick example text to build on the card title and make up the bulk of the\r\n          card's content.\r\n        </p>\r\n        <a href=\"#!\" class=\"btn btn-outline-light\">Button</a>\r\n      </div>\r\n    </div>\r\n    <!-- Card -->\r\n  </aside>\r\n\r\n  <div class=\"alert alert-success  \" role=\"alert\">\r\n    <h4 class=\"alert-heading \">Well done!</h4>\r\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\r\n    <hr>\r\n    <p class=\"mb-0\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\r\n  </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-0a272caa5484421a141858c465471f362d61a99f5a200ba656f118074ee6bd70ae90d0d90c0bb5dc8989e050e515df414bd78d1420c43db430cd4575f6148229",
            "file": "src/stories/forms/login-form/login-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-login-form",
            "styleUrls": [
                "./login-form.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "AuthService",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLoginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loginErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "storyInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "StoryInput[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "openForgetPassForm",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter"
                },
                {
                    "name": "sendLoginReq",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "param",
                    "defaultValue": "{language: 'login-main'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openReplacePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"../../inputs/input/story-input.model\";\r\nimport { AuthService } from '../../../app/_services/auth.service';\r\n//import {ApiErrorMessageService} from \"../../../app/storybook/pipes/api-error-message.service\";\r\n//import {ApiErrorMessageService} from \"../../../app/storybook/pipes/api-error-message.service\";\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-login-form',\r\n  templateUrl: './login-form.component.html',\r\n  styleUrls: ['./login-form.css'],\r\n})\r\nexport default class LoginFormComponent implements OnInit {\r\n\r\n\r\n  param = {language: 'login-main'};\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  @Input() isLoginFailed = false;\r\n\r\n  @Input() loginErrorMessage = '';\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  constructor(/*private apiErrorMessage: ApiErrorMessageService*/) {\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of Inputs\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup = new FormGroup({});\r\n\r\n  @Input() isLoggedIn = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() sendLoginReq = new EventEmitter();\r\n\r\n  @Output() openForgetPassForm = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Login Request!');\r\n\r\n    this.sendLoginReq.emit();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.mForm?.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.mForm?.get('phone')!;\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: relative;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.form {\r\n  position: absolute;\r\n  left: 3.18%;\r\n  right: 14.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\nstorybook-spinner1 {\r\n  position: absolute;\r\n  width: 70px;\r\n  height: 70px;\r\n  left: calc(50% - 75px/2 - 0.25px);\r\n  top: calc(50% - 38px/2 - 0.5px);\r\n}\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 10px 10px;\r\n}\r\n.col-md-12{\r\n  position: center;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.card {\r\n  position: absolute;\r\n  left: 5.18%;\r\n  right: 4.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n.form-header {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  width: 447px;\r\n  height: 82px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n.login-button {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n}\r\n\r\n\r\n.forgot-password {\r\n  /* D UnderLine Regular */\r\n\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n\r\n.thematic-break {\r\n  margin: 20px 2px 16px 2.5px;\r\n  background-color: #3d8ecf;\r\n  border-top-width: 1px;\r\n  border-top-color: rgb(61, 142, 207);\r\n  border-top-style: solid;\r\n\r\n\r\n\r\n}\r\n\r\n.login-failed-message {\r\n  position: relative;\r\n  height: 55px;\r\n\r\n\r\n  /* D Regular */\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  align-items: start;\r\n  letter-spacing: -0.011em;\r\n\r\n  /* Red */\r\n\r\n  color: #FA4F4F;\r\n\r\n}\r\n",
                    "styleUrl": "./login-form.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "storyInputs": {
                    "name": "storyInputs",
                    "setSignature": {
                        "name": "storyInputs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 85
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 89
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 93
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 97
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <div class=\"form-header\">\r\n      <a>Aeonix App Center</a>\r\n    </div>\r\n    <div><storybook-spinner1  *ngIf=\"isLoading\"></storybook-spinner1></div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n      <div  *ngIf=\"!isLoggedIn\" class=\"Vector\">\r\n\r\n        <div class=\"login-button\">\r\n\r\n            <div *ngIf=\"isLoggedIn\">isRegSuccess</div>\r\n            <div *ngIf=\"!isLoggedIn && storyInputsInOrder.length === 0\">empty</div>\r\n            <storybook-input\r\n              [storyInput]=\"storyInputsInOrder[0]\"\r\n              (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n              (onPinInput)=\"onPinInput.emit($event)\"\r\n              [currentForm]=\"mForm\">\r\n            </storybook-input>\r\n\r\n            <storybook-input\r\n              [storyInput]=\"storyInputsInOrder[1]\"\r\n              (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n              (onPinInput)=\"onPinInput.emit($event)\"\r\n              [currentForm]=\"mForm\">\r\n            </storybook-input>\r\n\r\n\r\n            <br>\r\n            <div class=\"thematic-break\"></div>\r\n            <div class=\"login-failed-message\" role=\"alert\" >\r\n              <p *ngIf=\"isLoginFailed\">*  {{ loginErrorMessage | apiErrorMessage: param }}</p>\r\n            </div>\r\n\r\n\r\n            <a (click)=\"this.openForgetPassForm.emit();\" class=\"forgot-password\"  >\r\n              {{ 'Forgot password?'  }}\r\n            </a>\r\n\r\n            <storybook-button-continue size=\"medium\" label=\"Continue \" type=\"button\" (click)=\"onSubmit()\" ></storybook-button-continue>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "LoginMainComponent",
            "id": "component-LoginMainComponent-bc4c750143556ecbbc09ed0e6acc1102097b9dba0e86f09c416eb0b4a7babba34fa84d4f5f74ab82a6998e7991c2d4089c3d743c5f14b7cbee0cbef512016b3b",
            "file": "src/app/login2/login-main/login-main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "login-main",
            "styleUrls": [
                "./login-main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "background",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Login2Component'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2509,
                            "end": 2522,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2510,
                                "end": 2518,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "eventBusSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "forgotPassFormDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "loginErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "mainHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formHeader', {static: false}"
                        }
                    ]
                },
                {
                    "name": "registerFormDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "replacePassFormDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[\n    { /*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez' , hide: false },\n    { /*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password', hide: false   },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryInput[]",
                    "optional": false,
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n"
                },
                {
                    "name": "userService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserService",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "verificationFormDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "configuratin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "home2",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openForgotPassForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openRegisterForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openReplacePassForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openVerificationForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "profile2",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reloadPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPasswordCurrentFieldValue",
                    "args": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUsernameCurrentFieldValue",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Inject, Input, OnInit, Renderer2, ViewChild} from '@angular/core';\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\nimport {AuthService} from \"src/app/_services/auth.service\";\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {TokenStorageService} from \"src/app/_services/token-storage.service\";\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport RegisterForm2Component from \"./register-form2/register-form2.component\";\n//import * as mStoryInput from \"../../../stories/inputs/story-input.stories\";\nimport {ReplacePassForm2Component} from \"./replace-pass-form2/replace-pass-form2.component\";\nimport VerificationForm2Component from \"./verification-form2/verification-form2.component\";\nimport {UserService} from \"../../_services/user.service\";\nimport { workingModeConfiguration } from \"src/app/app.config\"\nimport {EventData} from \"../../_shared/event.class\";\nimport { EventBusService } from 'src/app/_shared/event-bus.service';\nimport {Subscription} from \"rxjs\";\nimport ForgotPassForm2Component from \"./forgot-pass-form2/forgot-pass-form2.component\";\n\n\nexport interface DialogData {\n  username: string;\n  password: string;\n}\n\n\n\n@Component({\n  selector: 'login-main',\n  templateUrl: './login-main.component.html',\n  styleUrls: ['./login-main.component.scss']\n})\nexport class LoginMainComponent implements OnInit {\n\n  public isLoggedIn = false;\n  isLoginFailed = false;\n  loginErrorMessage = '';\n  roles: string[] = [];\n  public isLoading = false;\n  eventBusSub?: Subscription;\n\n\n\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  storyInputsInOrder: StoryInput[]  = [\n    { /*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez' , hide: false },\n    { /*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password', hide: false   },\n  ];\n\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = true;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  background?: string;\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Login2Component';\n\n\n  loginForm: FormGroup;\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-page2--primary' : 'storybook-page2--secondary';\n\n    return ['storybook-page2', mode];\n  }\n\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\n\n\n  constructor(private renderer: Renderer2,\n              public forgotPassFormDialog: MatDialog,\n              public registerFormDialog: MatDialog,\n              public replacePassFormDialog: MatDialog,\n              public verificationFormDialog: MatDialog,\n              private eventBusService: EventBusService,\n              public authService: AuthService,\n              public userService: UserService,\n              private tokenStorage: TokenStorageService,\n              private router: Router,\n              private activatedRoute:ActivatedRoute) {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', Validators.minLength(2)),\n      password: new FormControl('', Validators.minLength(2)),\n    });\n\n  }\n\n\n  openForgotPassForm() {\n    const forgotPassFormDialogRef = this.forgotPassFormDialog.open(ForgotPassForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue, email: \"not@inuse.com\"},\n    });\n\n    forgotPassFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The forget password form dialog was closed');\n      if (result.message === 'Successful verification') {\n        //this.setUsernameCurrentFieldValue(result.data.username);\n        //this.setPasswordCurrentFieldValue(result.data.password.toString());\n      }\n    });\n\n    return forgotPassFormDialogRef.afterClosed().toPromise();\n  }\n\n  openRegisterForm() {\n    const registerFormDialogRef = this.registerFormDialog.open(RegisterForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue , password: this.getPasswordCurrentFieldValue},\n    });\n\n    registerFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n      if (result.message === 'Registration Complete') {\n        //this.setUsernameCurrentFieldValue(result.username);\n        //this.setEmailCurrentFieldValue(result.email);\n      }\n    });\n\n    return registerFormDialogRef.afterClosed().toPromise();\n  }\n\n  openReplacePassForm() {\n    const replacePassFormDialogRef = this.replacePassFormDialog.open(ReplacePassForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue , password: this.getPasswordCurrentFieldValue},\n    });\n\n    replacePassFormDialogRef.beforeClosed().subscribe(result => {\n      console.log('The replace password form dialog before closed');\n    },\n      err => {\n        console.log(err.error.message);\n      });\n\n\n    replacePassFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The replace password form dialog after closed');\n      if (result.message === 'Replace Password Complete') {\n        this.setUsernameCurrentFieldValue(result.data.username);\n        this.setPasswordCurrentFieldValue(result.data.password.toString());\n      }\n    });\n\n    return replacePassFormDialogRef.afterClosed().toPromise();\n  }\n\n  openVerificationForm() {\n    const verificationFormDialogRef = this.verificationFormDialog.open(VerificationForm2Component, {\n      data: {username: this.getUsernameCurrentFieldValue, email: \"not@inuse.com\"},\n    });\n\n    verificationFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n    });\n\n    return verificationFormDialogRef.afterClosed().toPromise();\n  }\n\n\n  ngOnInit(): void {\n    this.eventBusService.emit(new EventData('is2SVRequired', null));\n\n    this.eventBusSub = this.eventBusService.on('openVerification', () => {\n      this.openVerificationForm();\n    });\n  };\n\n\n\n  get getUsernameCurrentFieldValue(): AbstractControl {\n    return this.loginForm.get('username')?.value;\n  }\n\n  private setUsernameCurrentFieldValue(name: string) {\n    this.loginForm.get('username')?.setValue(name);\n  }\n\n  get getPasswordCurrentFieldValue(): AbstractControl {\n    return this.loginForm.get('password')?.value;\n  }\n\n  private setPasswordCurrentFieldValue(pass: string) {\n    this.loginForm.get('password')?.setValue(pass);\n  }\n\n\n  onSubmit(): void {\n    console.warn('Login Request from login-main!');\n    const { username, password } = this.loginForm.value;\n\n    this.isLoading = true;\n    this.authService.login(username, password).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveRefreshToken(data.refreshToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.profile2();\n      },\n      err => {\n        switch (err.error.message) {\n          case \"Error: A registry process should be made!\":\n            //this.openRegisterForm().then(() => {this.openReplacePassword()});\n            //toPromise((data) => {this.openReplacePassword()});\n            this.openRegisterForm().then(\n              (val) => {\n                console.log(val);\n                switch (val) {\n                  case \"xbutton\":\n                    break;\n                  case \"Registration Complete\":\n                    this.onSubmit();\n                    break;\n                  case undefined:\n                    //this.openReplacePassword();\n                    break;\n                  default:\n                }\n                return 'done2';\n              },\n              (err) => console.error(err));\n            break;\n          case \"User credentials have expired\":\n            this.openReplacePassForm().then(\n              (val) => {\n                console.log(val);\n                switch (val.message) {\n                  case \"xbutton\":\n                    break;\n                  case \"Replace Password Complete\":\n                    this.onSubmit();\n                    break;\n                  case undefined:\n                    //Handle unknown response\n                    break;\n                  default:\n                }\n                return 'done2';\n              },\n              (err) => console.error(err));\n            break;\n          default:\n            this.loginErrorMessage = err.error.message;\n        }\n\n        this.isLoginFailed = true;\n        this.isLoading = false;\n      },\n      () => { this.isLoading = false; })\n  }\n\n\n  reloadPage(): void {\n    this.router.navigate(['/login-main']).then(() => {window.location.reload()});\n  }\n\n  profile2(): void {\n  this.router.navigate(['../profile2'], {relativeTo: this.activatedRoute});\n  }\n\n  configuratin(): void {\n    this.router.navigate(['../profile2/admin2'], {relativeTo: this.activatedRoute});\n  }\n\n  home2(): void {\n  this.router.navigate(['/home']);\n  }\n\n\n\n\n}\n\n/*\n@Component({\n  selector: 'dialog-overview-example-dialog',\n  templateUrl: 'dialog-overview-example-dialog.html',\n})\nexport class DialogOverviewExampleDialog {\n  constructor(\n    public dialogRef: MatDialogRef<DialogOverviewExampleDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n*/\n\n/*\n@Component({\n  selector: 'password-dialog',\n  templateUrl: './password-dialog.html',\n})\nexport class ExtentionDialog {\n  constructor(\n    public dialogRef: MatDialogRef<ExtentionDialog>,\n    @Inject(MAT_DIALOG_DATA) public extensionData: {name: string, password: string;},\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n*/\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.storybook-login2 {\r\n  position: absolute;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n.Desktop-1Login-1 {\r\n  width: 100%;\r\n  height: 100%;\r\n  flex-grow: 0;\r\n}\r\n\r\n\r\n\r\n",
                    "styleUrl": "./login-main.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forgotPassFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "registerFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "replacePassFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "verificationFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 88,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forgotPassFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "registerFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "replacePassFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "verificationFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 82
                    }
                },
                "getUsernameCurrentFieldValue": {
                    "name": "getUsernameCurrentFieldValue",
                    "getSignature": {
                        "name": "getUsernameCurrentFieldValue",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 189
                    }
                },
                "getPasswordCurrentFieldValue": {
                    "name": "getPasswordCurrentFieldValue",
                    "getSignature": {
                        "name": "getPasswordCurrentFieldValue",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 197
                    }
                }
            },
            "templateData": "\n<html>\n<head>\n  <style>\n\n  </style>\n  <title></title>\n</head>\n<body>\n\n<!--article><div class=\"Frame-1 relative\">\n<section class=\"relative \" Style=\"{ 'background': backgroundColor }\"-->\n\n<!--storybook-button-globe></storybook-button-globe-->\n\n<storybook-background1></storybook-background1>\n\n<!--button mat-raised-button (click)=\"openReplacePassForm()\">ReplacePassForm</button>\n<button mat-raised-button (click)=\"openRegisterForm()\">RegisterForm</button>\n<button mat-raised-button (click)=\"openVerificationForm()\">VerificationForm</button>\n<button mat-raised-button (click)=\"openForgotPassForm()\">forgotPassForm</button>\n\n<button mat-raised-button (click)=\"home2()\">home2</button-->\n<button mat-raised-button (click)=\"profile2()\">profile2</button>\n<button mat-raised-button (click)=\"configuratin()\">configuratin</button>\n\n<storybook-login-form\n  [isLoggedIn]=\"false\"\n  [isLoading]=\"isLoading\"\n  [isLoginFailed]=\"isLoginFailed\"\n  [loginErrorMessage]=\"loginErrorMessage\"\n  [mForm]=\"loginForm\"\n  [storyInputs]=\"storyInputsInOrder\"\n  (sendLoginReq)=\"onSubmit()\"\n  (openForgetPassForm)=\"openForgotPassForm()\"\n></storybook-login-form>\n\n\n<!--/section></div>\n</article-->\n\n</body>\n</html>\n\n\n"
        },
        {
            "name": "MyAccountForm2Component",
            "id": "component-MyAccountForm2Component-ce30a948b4546db8ab631eeff068f54ee2d5f3e3c05470bb0a75ce407d97a56c77b13c65b6d18ffc57b839d03011d01dc82dc4caa3b0ecc75abb5bcde85f7466",
            "file": "src/app/login2/profile2/my-account-form2/my-account-form2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "my-account-form2",
            "styleUrls": [
                "./my-account-form2.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./my-account-form2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "validateMail",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter<String>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "accountDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "apiResponse",
                    "defaultValue": "{ message: '', error: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyAccountData",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<MyAccountFormComponent>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "empList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "errorFieldSubmitted",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'form', {static: false}"
                        }
                    ]
                },
                {
                    "name": "isRegFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isRegSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "regErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '1', title: this.data.currentUser.username, state: 'USER NAME', icon: '', type: 'enable-profile-picture', placeholder: '', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountInput[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "userField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'username', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "displayConfigButton",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAccountDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openChangePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPhone",
                    "args": [
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUsername",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Inject, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {PasswordValidators} from \"../../login-main/replace-pass-form2/replace-pass-form2.component\";\r\nimport MyAccountFormComponent from \"src/stories/forms/my-account-form/my-account-form.component\";\r\nimport {AccountInput} from \"src/stories/inputs/account-input/account-input.model\";\r\nimport {EventData} from \"src/app/_shared/event.class\";\r\nimport {EventBusService} from \"src/app/_shared/event-bus.service\";\r\nimport {throwError} from \"rxjs\";\r\nimport {TokenStorageService} from \"src/app/_services/token-storage.service\";\r\nimport {UserService} from \"src/app/_services/user.service\";\r\n\r\n\r\nexport interface MyAccountData {\r\n  currentUser: any;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'my-account-form2',\r\n  templateUrl: './my-account-form2.component.html',\r\n  styleUrls: ['./my-account-form2.component.css']\r\n})\r\nexport default class MyAccountForm2Component implements OnInit {\r\n  registerForm: FormGroup;\r\n  isRegSuccess = false;\r\n  isRegFailed = false;\r\n  submitted = false;\r\n  regErrorMessage: any;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  @ViewChild('username', { static: false }) userField?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  accountDetails: any;\r\n  closeResult = '';\r\n\r\n\r\n\r\n  @Output() validateMail: EventEmitter<String> = new EventEmitter();\r\n\r\n  storyInputsInOrder: AccountInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '1', title: this.data.currentUser.username, state: 'USER NAME', icon: '', type: 'enable-profile-picture', placeholder: '', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n  ];\r\n\r\n  constructor(private eventBusService: EventBusService,\r\n              private token: TokenStorageService,\r\n              private authService: AuthService,\r\n              private tokenStorageService: TokenStorageService,\r\n              private renderer: Renderer2,\r\n              public dialogRef: MatDialogRef<MyAccountFormComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: MyAccountData) {\r\n    this.registerForm = new FormGroup({\r\n      username: new FormControl(''),\r\n      email: new FormControl('email', Validators.email),\r\n      phone: new FormControl('0544444444', PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9 ]{8})\"), {requiresPhoneChars: true}))\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAccountDetails();\r\n    /*this.userService.getAccountDetails().subscribe(\r\n      data => { this.accountDetails = data; },\r\n      err => { this.accountDetails = JSON.parse(err.error).message; }\r\n    );*/\r\n  }\r\n\r\n  getAccountDetails(): void {\r\n\r\n    const token = this.token.getToken();\r\n    if (token)\r\n      this.authService.getAccountDetails(token).subscribe(accountDetails => {\r\n        this.accountDetails=(accountDetails);\r\n        this.setUsername(accountDetails.username);\r\n        this.setEmail(accountDetails.email);\r\n        this.setPhone(accountDetails.phone);\r\n        console.log('Account Details is received from server.');\r\n      }, (err) => {\r\n        console.log('Can not get user account details');\r\n        return throwError(err);\r\n      });\r\n\r\n  }\r\n\r\n  doLogout(): void {\r\n    console.log(\"logging out\")\r\n    this.eventBusService.emit(new EventData('logout', null));\r\n  }\r\n\r\n  openChangePassword() {\r\n    this.eventBusService.emit(new EventData('openChangePassword', null));\r\n  }\r\n\r\n  openUser() {\r\n    this.eventBusService.emit(new EventData('openConfiguration', null));\r\n    this.dialogRef.close('Open Configuration Tools');\r\n  }\r\n\r\n  displayConfigButton(): boolean {\r\n    return this.tokenStorageService.isSupervisorAdmin();\r\n  }\r\n\r\n\r\n  onSubmit(): void {\r\n    if (this.isRegSuccess) {\r\n      this.dialogRef.close('Registration Complete');\r\n    }\r\n    else {\r\n      this.submitted = true;\r\n      const { username, password, email, phone } = this.registerForm.getRawValue();\r\n\r\n      this.authService.registerForm(username, email, password, phone).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.isRegSuccess = true;\r\n          this.isRegFailed = false;\r\n          this.errorFieldSubmitted = {} ;\r\n          this.apiResponse.error = false;\r\n          this.apiResponse.message = 'Successful registration';\r\n        },\r\n        error => {\r\n          const errorResponse = JSON.parse(error.error);\r\n          this.apiResponse.error = true;\r\n          this.apiResponse.message = 'Registration error';\r\n          this.regErrorMessage = errorResponse;\r\n          this.isRegFailed = true;\r\n          if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n            this.errorFieldSubmitted = errorResponse.data;\r\n          }\r\n        },\r\n        () => {\r\n          console.log(\"Registration Complete\");}\r\n      );\r\n    }\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.registerForm.get('username')!;\r\n  }\r\n\r\n\r\n  setUsername(name: string): void {\r\n    this.registerForm.get('username')?.setValue(name)!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.registerForm.get('email')!;\r\n  }\r\n\r\n  setEmail(email: string): void {\r\n    return this.registerForm.get('email')?.setValue(email);\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.registerForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.registerForm.get('phone')!;\r\n  }\r\n\r\n  setPhone(phone: string): void {\r\n    return this.registerForm.get('phone')?.setValue(phone);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n.fa,.fab,.fad,.fal,.far,.fas {\r\n  -moz-osx-font-smoothing:grayscale;\r\n  -webkit-font-smoothing:antialiased;\r\n  display:inline-block;\r\n  font-style:normal;\r\n  font-variant:normal;\r\n  text-rendering:auto;line-height:1\r\n}\r\n\r\n.fa-lg {\r\n  font-size:1.33333em;\r\n  line-height:.75em;\r\n  vertical-align:-.0667em\r\n}\r\n/**/\r\n.fa-xs {font-size:.75em}\r\n\r\n.fa-sm {font-size:.875em}\r\n\r\n.fa-1x {font-size:1em}\r\n\r\n.fa-2x {font-size:2em}\r\n\r\n.fa-3x {font-size:3em}\r\n\r\n.fa-4x {font-size:4em}\r\n\r\n.fa-5x {font-size:5em}\r\n\r\n.fa-6x {font-size:6em}\r\n\r\n.fa-7x {font-size:7em}\r\n\r\n.fa-8x {font-size:8em}\r\n\r\n.fa-9x {font-size:9em}\r\n\r\n.fa-10x {font-size:10em}\r\n\r\n.fa-fw {text-align:center;width:1.25em}\r\n\r\n.fa-ul {list-style-type:none;margin-left:2.5em;padding-left:0}\r\n\r\n.fa-ul>li {position:relative}\r\n\r\n.fa-li {left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}\r\n\r\n.fa-border {border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\n.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left {\r\n  margin-right:.3em\r\n}\r\n\r\n.input-with-pre-icon label {left:36px;right:initial}\r\n\r\n\r\n.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right {\r\n  margin-left:.3em\r\n}\r\n\r\n.fa-spin {\r\n  -webkit-animation:fa-spin 2s linear infinite;\r\n  animation:fa-spin 2s linear infinite\r\n}\r\n\r\n\r\n\r\n.fa,.far,.fas {\r\n  font-family: \"Font Awesome 5 Free\", serif\r\n}\r\n\r\n.fa,.fas {\r\n  font-weight:900\r\n}\r\n\r\n\r\n.v-btn__content {\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1 0 auto;\r\n  justify-content: inherit;\r\n  line-height: normal;\r\n  position: relative;\r\n  transition: inherit;\r\n}\r\n\r\n.form-outline .form-control:focus ~ .form-label, .form-outline .form-control.active ~ .form-label {\r\n  transform: translateY(-1.5rem) translateY(0.1rem) scale(0.8);\r\n}\r\n\r\n\r\n/*\r\n.form-outline .form-control ~ .form-notch div {\r\n  pointer-events: none;\r\n  border: 1px solid;\r\n  border-color: #39c0ed;\r\n}\r\n\r\n*/\r\n.v-btn__content {\r\n  letter-spacing: normal;\r\n}\r\n\r\nbody#registerFormDialogContainer {\r\n  background: #0000ff00;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./my-account-form2.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "token",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenStorageService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<MyAccountFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "MyAccountData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "token",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenStorageService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<MyAccountFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "MyAccountData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 143
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 152
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 160
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 164
                    }
                }
            },
            "templateData": "\r\n<storybook-my-account-form #form\r\n  [isRegSuccess]=\"isRegSuccess\"\r\n  [isRegFailed]=\"isRegFailed\"\r\n  [regErrorMessage]=\"regErrorMessage\"\r\n  [storyInputs]=\"storyInputsInOrder\"\r\n  [displayToolButton]=\"displayConfigButton()\"\r\n  [mForm]=\"registerForm\"\r\n  (sendRegReq)=\"onSubmit()\"\r\n  (clickXButton)=\"this.dialogRef.close('xbutton')\"\r\n  (onLogout)=\"doLogout()\"\r\n  (changePassword)=\"openChangePassword()\"\r\n  (openUser)=\"openUser()\"\r\n></storybook-my-account-form>\r\n"
        },
        {
            "name": "MyAccountFormComponent",
            "id": "component-MyAccountFormComponent-72dfcb9d26f59105516540cae008aae7f6437d0f572197132c87b8a7ae2c8586bf9ed4aae07c0b8f46efeb8d8e558f397af7e96ac80270ae9da034f4251e7029",
            "file": "src/stories/forms/my-account-form/my-account-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-my-account-form",
            "styleUrls": [
                "./my-account-form.css"
            ],
            "styles": [],
            "templateUrl": [
                "./my-account-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayToolButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "AuthService",
                    "decorators": []
                },
                {
                    "name": "isRegFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRegSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "regErrorMessage",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "storyInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "AccountInput[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changePassword",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "clickXButton",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "openUser",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "sendRegReq",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "changeLog",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "credentials",
                    "defaultValue": "{\r\n    username: null,\r\n    password: null\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "mainHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formHeader', {static: false}"
                        }
                    ]
                },
                {
                    "name": "param",
                    "defaultValue": "{language: 'login-main'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "storybookInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'storybook-input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountInput[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "doLogout",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSuccessfullyLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openReplacePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewChecked,\r\n  Component, Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input, OnChanges,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  Renderer2, SimpleChanges, ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {ApiErrorMessageService} from \"../../../app/storybook/pipes/api-error-message.service\";\r\nimport {AccountInput} from \"../../inputs/account-input/account-input.model\";\r\n//import {BehaviorSubject} from \"rxjs\";\r\n//import {AccountInputComponent} from \"../inputs/input/story-input.component\";\r\n\r\n/*\r\n@Directive({selector: 'storybook-input'})\r\nexport class AccountInput {\r\n  @Input() storyInput!: AccountInput;\r\n}\r\n*/\r\n@Component({\r\n  selector: 'storybook-my-account-form',\r\n  templateUrl: './my-account-form.component.html',\r\n  styleUrls: ['./my-account-form.css'],\r\n})\r\nexport default class MyAccountFormComponent implements OnInit, AfterViewChecked, OnChanges {\r\n\r\n  @Output() onLogout = new EventEmitter<Event>();\r\n\r\n  @Output() openUser = new EventEmitter<Event>();\r\n\r\n  doLogout(event: Event) {\r\n    this.onLogout.emit(event);\r\n    this.clickXButton.emit();\r\n  }\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  @Input() isRegFailed = false;\r\n  @Input() regErrorMessage: any = {};\r\n  @Input() displayToolButton: boolean = false;\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\r\n  @ViewChild('storybook-input', { static: false }) storybookInput?: ElementRef;\r\n\r\n\r\n  param = {language: 'login-main'};\r\n\r\n  constructor(private renderer: Renderer2) {\r\n  }\r\n\r\n  storyInputsInOrder: AccountInput[] = [];\r\n\r\n  @Input() mForm: FormGroup  = new FormGroup({});\r\n  /*username: new FormControl('', Validators.minLength(2)),\r\n  password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n  email: new FormControl('', Validators.email),\r\n  phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))*/\r\n\r\n  changeLog: string[] = [];\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRegSuccess) {\r\n      if (!changes.isRegSuccess.previousValue &&  changes.isRegSuccess.currentValue) {\r\n        console.warn('Register Request Succeeded!');\r\n        this.loadSuccessfullyLoggedIn();\r\n      }\r\n    }\r\n    /*if (changes.isRegFailed || changes.regErrorMessage) {\r\n      console.log('isRegFailed' + this.regErrorMessage['message'])\r\n    }*/\r\n  }\r\n\r\n\r\n\r\n  @Input() isRegSuccess = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() sendRegReq: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() changePassword: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: AccountInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t =>  t.state === 'PASSWORD' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.state === 'PASSWORD' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION');\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Registry Request Sent!');\r\n    this.sendRegReq.emit();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.mForm?.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.mForm?.get('phone')!;\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    //console.log(this.childComp?.length)\r\n  }\r\n\r\n  loadSuccessfullyLoggedIn(){\r\n    this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully complete your registeration!');\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: relative;\r\n  width: 637.5px;\r\n  height: 550px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 479px/2 - 0.5px);\r\n}\r\n\r\n.form {\r\n  position: absolute;\r\n  left: 3.18%;\r\n  right: 14.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 10px 10px;\r\n}\r\n.col-md-12{\r\n  position: center;\r\n  width: 965px;\r\n  height: 819px;\r\n  left: calc(50% - 965px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n  border-radius: 32px;\r\n}\r\n\r\n.card {\r\n  position: absolute;\r\n  left: 5.18%;\r\n  right: 4.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n.form-header {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  width: 460px;\r\n  height: 92px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n.main-form-header {\r\n  position: relative;\r\n  width: 447px;\r\n  height: 52px;\r\n  flex-grow: 0;\r\n  margin: 0 0 0 0;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n.login-button {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 281.16px/2 - 171.58px);\r\n}\r\n\r\n\r\n.forgot-password {\r\n  /* D UnderLine Regular */\r\n\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n#button-successfully {\r\n  position: relative;\r\n  width: 100%; height:\r\n  102px; margin-top: 50px;\r\n  margin-bottom: 100px;\r\n  left: 0;\r\n}\r\n\r\nstorybook-button-successfully {\r\n  position: relative;\r\n  left: 240px;\r\n}\r\n\r\n\r\n#button-ex {\r\n  position: absolute;\r\n  top: 48px;\r\n  left: 99px;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0;\r\n}\r\n\r\n#button-log-out {\r\n  position: absolute;\r\n  top: 42.5px;\r\n  right: 99px;\r\n  width: 66px;\r\n  height: 31px;\r\n  padding: 1px;\r\n  margin: 0 0 0.25rem;\r\n  background-color: rgba(61, 142, 207, 0);\r\n\r\n\r\n\r\n/* D UnderLine Regular */\r\n\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  text-align: center;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: inline;\r\n  align-items: end;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n.login-failed-message {\r\n  position: relative;\r\n  height: 55px;\r\n\r\n\r\n  /* D Regular */\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  align-items: start;\r\n  letter-spacing: -0.011em;\r\n\r\n  /* Red */\r\n\r\n  color: #FA4F4F;\r\n\r\n}\r\n\r\n.thematic-break {\r\n  position: relative;\r\n  margin: 15px 2px 0 2.5px;\r\n  background-color: #3d8ecf;\r\n  border-top-width: 1px;\r\n  border-top-color: rgb(61, 142, 207);\r\n  border-top-style: solid;\r\n\r\n}\r\n\r\n.button-configuration {\r\n  position: absolute;\r\n  height: 6px;\r\n\r\n  background-image: linear-gradient(180deg, #3D8ECF 0%, #58A6E4 100%);\r\n\r\n  line-height: 0.19px;\r\n  top: -80px;\r\n  right: -40px;\r\n  border-radius: 7px;\r\n}\r\n",
                    "styleUrl": "./my-account-form.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewChecked",
                "OnChanges"
            ],
            "accessors": {
                "storyInputs": {
                    "name": "storyInputs",
                    "setSignature": {
                        "name": "storyInputs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "AccountInput[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 107,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "AccountInput[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 129
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 133
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 137
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 141
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\" (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <button id=\"button-log-out\" (click)=\"this.doLogout($event)\" >Log out</button>\r\n    <label style=\"top: 1px; display: inline;\">Log out</label>\r\n    <div class=\"form-header\">\r\n      <a class=\"main-form-header\" #formHeader>My Account</a>\r\n      <br>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n      <div class=\"Vector\">\r\n\r\n\r\n        <div *ngIf=\"isRegSuccess\" id=\"button-successfully\" style=\"\">\r\n          <storybook-button-successfully   style=\"position: relative; margin-bottom: 50px;\"></storybook-button-successfully>\r\n        </div>\r\n\r\n        <div class=\"login-button\">\r\n            <div *ngIf=\"!isRegSuccess && storyInputsInOrder.length === 0\">empty</div>\r\n            <div *ngIf=\"!isRegSuccess\">\r\n              <storybook-account-input\r\n                [storyInput]=\"storyInputsInOrder[0]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-account-input>\r\n              <div class=\"thematic-break\"></div>\r\n              <storybook-account-input\r\n                [storyInput]=\"storyInputsInOrder[1]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\"\r\n                [conditionList]=\"['requiresPhone']\">\r\n              </storybook-account-input>\r\n              <div class=\"thematic-break\"></div>\r\n              <storybook-account-input\r\n                [storyInput]=\"storyInputsInOrder[2]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\"\r\n                [conditionList]=\"['requiresEmail']\">\r\n              </storybook-account-input>\r\n              <div class=\"thematic-break\"></div>\r\n              <storybook-account-input\r\n                [storyInput]=\"storyInputsInOrder[3]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (changePassword)=\"changePassword.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-account-input>\r\n\r\n            </div>\r\n\r\n            <div class=\"login-failed-message\" role=\"alert\" >\r\n              <p *ngIf=\"isRegFailed\">*  {{ this.regErrorMessage['message'] | apiErrorMessage: param }}</p>\r\n            </div>\r\n\r\n            <!--storybook-button-continue  hidden size=\"small\"\r\n                                       label=\"Continue\" type=\"button\" (click)=\"onSubmit()\" >\r\n            </storybook-button-continue-->\r\n\r\n            <storybook-button-configuration *ngIf=\"displayToolButton\" class=\"button-configuration\" size=\"large\"\r\n                                            (click)=\"this.openUser.emit()\">\r\n            </storybook-button-configuration>\r\n        </div>\r\n      </div>\r\n\r\n    </form>\r\n  </div>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-0eb2710d5110885805195e78322a356843425cabbe79f1d3f4c110b307d0c693519fef5129b1f2675adfec2f2d5cfbfbefadb378fe2b69d3d2a20e3ed8b60fe1",
            "file": "src/stories/pages/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-login-main",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from '../User';\n\n@Component({\n  selector: 'storybook-login-main',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "templateData": "<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section>\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>\n"
        },
        {
            "name": "PassStrengthComponent",
            "id": "component-PassStrengthComponent-cadc9a5c6cf923f7c2cf73ed70d800d197a9a78cf986793c67cebaad646b376b880fce6f05470d6cba6475864c2162011e6fa8cb72704d17dba27f2f68f5a7ce",
            "file": "src/stories/pass-strength/pass-strength.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-pass-strength",
            "styleUrls": [
                "./pass-strength.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pass-strength.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "passwordToCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe password to measure.\n",
                    "description": "<p>The password to measure.</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "strength",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe password strength in percentage.\n",
                    "description": "<p>The password strength in percentage.</p>\n",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "measureStrength",
                    "args": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "strengthColor",
                    "args": [
                        {
                            "name": "strength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "0 | 10 | 20 | 30 | 40 | 50 | 60 | 70 | 90 | 100",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "strength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnChanges, Input, SimpleChange} from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-pass-strength',\r\n  templateUrl: './pass-strength.component.html',\r\n  styleUrls: ['./pass-strength.scss']\r\n})\r\nexport default class PassStrengthComponent implements OnChanges  {\r\n\r\n  /**\r\n   * Is this the principal call to action on the login-main?\r\n   */\r\n  @Input() primary: boolean = false;\r\n\r\n\r\n  /**\r\n   * The password strength in percentage.\r\n   */\r\n  @Input() strength: number = 0;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input() backgroundColor?: string;\r\n\r\n  /**\r\n   * The password to measure.\r\n   */\r\n  @Input() passwordToCheck?: string;\r\n\r\n  private static measureStrength(pass: string) {\r\n    let score = 0;\r\n    // award every unique letter until 5 repetitions\r\n    let letters: any = {};\r\n    for (let i = 0; i< pass.length; i++) {\r\n      letters[pass[i]] = (letters[pass[i]] || 0) + 1;\r\n      score += 5.0 / letters[pass[i]];\r\n    }\r\n    // bonus points for mixing it up\r\n    let variations: any = {\r\n      digits: /\\d/.test(pass),\r\n      lower: /[a-z]/.test(pass),\r\n      upper: /[A-Z]/.test(pass),\r\n      nonWords: /\\W/.test(pass),\r\n    };\r\n\r\n    let variationCount = 0;\r\n    for (let check in variations) {\r\n      variationCount += (variations[check]) ? 1 : 0;\r\n    }\r\n    score += (variationCount - 1) * 10;\r\n    return Math.trunc(score);\r\n  }\r\n\r\n  public strengthColor(strength: number) {\r\n\r\n    if (strength < 10) return 0;\r\n    if (strength < 20) return 10;\r\n    if (strength < 30) return 20;\r\n    if (strength < 40) return 30;\r\n    if (strength < 50) return 40;\r\n    if (strength < 60) return 50;\r\n    if (strength < 70) return 60;\r\n    if (strength < 90) return 70;\r\n    if (strength < 99) return 90;\r\n\r\n    return 100;\r\n  }\r\n\r\n  ngOnChanges(changes: {[propName: string]: SimpleChange}): void {\r\n    var password = changes['passwordToCheck'].currentValue;\r\n    if (password) {\r\n      this.strength = PassStrengthComponent.measureStrength(password);\r\n    }\r\n  }\r\n\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-pass-strength--primary' : 'storybook-pass-strength--secondary';\r\n\r\n    return ['storybook-pass-strength', `storybook-pass-strength--${this.strengthColor(this.strength)}`, mode];\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n.storybook-pass-strength {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 28px;\r\n  margin-bottom: 20px;\r\n\r\n  horiz-align: center;\r\n  box-shadow: 0 4px 4px rgba(0, 0, 0, 0.25);\r\n  /*rgb(191, 191, 191);*/\r\n  text-align: center;\r\n  background: linear-gradient(to right, rgb(255, 47, 0), rgb(255, 159, 0)) rgb(255, 47, 0);\r\n}\r\n\r\n.center {\r\n  position: absolute;\r\n  width: 20%;\r\n  /*margin: auto;*/\r\n\r\n  text-align: center;\r\n\r\n  height: 24px;\r\n  /*top: calc(50% - 24px/2);*/\r\n  left: calc(50% - 20%/2);\r\n}\r\n\r\n.mfont {\r\n  position: absolute;\r\n  top: 5px;\r\n  /**/\r\n  text-align: center;\r\n  /*  D Strong Password */\r\n   font-family: 'Noto Sans', ui-serif;\r\n    font-style: italic;\r\n    font-weight: 400;\r\n    font-size: 13px;\r\n    line-height: 15px;   /* identical to box height, or 240%*/\r\n\r\n   /**/display: flex ;\r\n    align-items: center;\r\n    letter-spacing: -0.011em;\r\n    text-transform: capitalize;\r\n\r\n   color: #000000;\r\n}\r\n\r\n\r\n\r\n  $strength0:  linear-gradient(to right, rgb(182, 213, 238) 0%,  rgb(215, 228, 238)  100%)  rgb(182, 213, 238);\r\n $strength10:  linear-gradient(to right, rgb(201, 220, 236) 0%,  rgb(232, 219, 219)  100%)  rgb(201, 220, 236);\r\n $strength20:  linear-gradient(to right, rgb(248, 209, 209) 0%,  rgb(253, 209, 166)  100%)  rgb(248, 209, 209);\r\n $strength30:  linear-gradient(to right, rgb(252, 198, 165) 0%,  rgb(255, 239, 0  )  100%)  rgb(252, 198, 165);\r\n $strength40:  linear-gradient(to right, rgb(252, 236, 132) 0%,  rgb(207, 231, 0  )  100%)  rgb(252, 236, 132);\r\n $strength50:  linear-gradient(to right, rgb(255, 255, 0  ) 0%,  rgb(175, 215, 0  )  100%)  rgb(255, 255, 0  );\r\n $strength60:  linear-gradient(to right, rgb(223, 239, 0  ) 0%,  rgb(143, 199, 0  )  100%)  rgb(223, 239, 0  );\r\n $strength70:  linear-gradient(to right, rgb(191, 223, 0  ) 0%,  rgb(111, 191, 0  )  100%)  rgb(191, 223, 0  );\r\n $strength90:  linear-gradient(to right, rgb(127, 191, 0  ) 0%,  rgb( 47, 151, 0  )  100%)  rgb(127, 191, 0  );\r\n$strength100:  linear-gradient(to right, rgb( 95, 191, 0  ) 0%,  rgb(  0, 128, 0  )  100%)  rgb( 95, 191, 0  );\r\n/*\r\n$vehicleSeating: $strength0;\r\n\r\n$strength: 35;\r\n\r\n\r\n@if ($strength < 30) { $vehicleSeating: $strength0;}\r\n@else if ($strength < 40) {$vehicleSeating: $strength30;}\r\n@else if ($strength < 50) {$vehicleSeating: $strength40;}\r\n@else if ($strength < 60) {$vehicleSeating: $strength50;}\r\n@else if ($strength < 70) {$vehicleSeating: $strength60;}\r\n@else if ($strength < 90) {$vehicleSeating: $strength70;}\r\n@else if ($strength < 99) {$vehicleSeating: $strength90;}\r\n@else {$vehicleSeating: $strength100;}\r\n\r\n\r\n$vehicleSeating: map-get((\r\n  3: $strength60,\r\n  bus : 20,\r\n), $strength);\r\n*/\r\n.storybook-pass-strength--primary {\r\n\r\n  background: $strength50;\r\n\r\n}\r\n\r\n.storybook-pass-strength--0{ background: $strength0; }\r\n.storybook-pass-strength--10{ background: $strength10; }\r\n.storybook-pass-strength--20{ background: $strength20; }\r\n.storybook-pass-strength--30{ background: $strength30; }\r\n.storybook-pass-strength--40{ background: $strength40; }\r\n.storybook-pass-strength--50{ background: $strength50; }\r\n.storybook-pass-strength--60{ background: $strength60; }\r\n.storybook-pass-strength--70{ background: $strength70; }\r\n.storybook-pass-strength--90{ background: $strength90; }\r\n.storybook-pass-strength--100{ background: $strength100; }\r\n\r\n",
                    "styleUrl": "./pass-strength.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 79
                    }
                }
            },
            "templateData": "\r\n<div id=\"PassStrength\" [ngClass]=\"classes\"   class=\"storybook-pass-strength  \" >\r\n  <div class=\"center\"><a class=\"mfont\">Strength : {{this.strength?.toString()}}%</a>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "PortalComponent",
            "id": "component-PortalComponent-d471874f03f17ffa0d8e0b11bb2c1ecdb504ff2ce0ce0da1defeecf96265a827b58c1dc753a978eaf2672d55e6a611112f3fdb47a9d3d665d7ae74a2fb103264",
            "file": "src/app/login2/profile2/portal/portal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "profile2",
            "styleUrls": [
                "./portal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./portal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "appConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "eventBusSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "myAccountFormDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "passExp",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "permittedWebAppList",
                    "defaultValue": "{\n    realtime: false,\n    scriptDesigner: false,\n    agent: false,\n    aeonixAdmin: false,\n    admin: false\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "previousAlertPassExp",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "refreshTokenSubject",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "replacePassFormDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "TOKEN_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "verificationFormDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "windowObjectReference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "configuratin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "forseRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "is2SVRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isNotify",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openapp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openMyAccountForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openNewTabForApp",
                    "args": [
                        {
                            "name": "appRequest",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "appRequest",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openNewWinForApp",
                    "args": [
                        {
                            "name": "appRequest",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "appRequest",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openReplacePassForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openVerificationForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "portal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 431,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPassExpAlertData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPermittedWebAppList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"src/app/_services/auth.service\";\nimport {TokenStorageService} from \"src/app/_services/token-storage.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AppConfig, workingModeConfiguration} from \"src/app/app.config\";\nimport {BehaviorSubject, Subscription, throwError} from \"rxjs\";\nimport {UserService} from \"src/app/_services/user.service\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ReplacePassForm2Component} from  \"src/app/login2/login-main/replace-pass-form2/replace-pass-form2.component\";\nimport {EventBusService} from \"src/app/_shared/event-bus.service\";\nimport MyAccountForm2Component from \"../my-account-form2/my-account-form2.component\";\nimport VerificationForm2Component from \"../../login-main/verification-form2/verification-form2.component\";\nimport {EventData} from \"src/app/_shared/event.class\";\n\n\n\n\nexport interface DialogData {\n  username: string;\n  password: string;\n}\n\n\n\n@Component({\n  selector: 'profile2',\n  templateUrl: './portal.component.html',\n  styleUrls: ['./portal.component.scss']\n})\nexport default class PortalComponent implements OnInit {\n\n  currentUser: any;\n  accessToken: any;\n  refreshToken: any;\n  windowObjectReference: any;\n  refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  public isLoading = false;\n  public appConfig: any;\n  private TOKEN_KEY: string;\n  eventBusSub?: Subscription;\n  permittedWebAppList = {\n    realtime: false,\n    scriptDesigner: false,\n    agent: false,\n    aeonixAdmin: false,\n    admin: false\n  };\n\n\n  isNotify(): boolean {\n   return (this.passExp < this.previousAlertPassExp);\n  }\n\n\n  constructor(private authService: AuthService,\n              private userService: UserService,\n              private token: TokenStorageService,\n              private eventBusService: EventBusService,\n              private router: Router,\n              private activatedRoute:ActivatedRoute,\n              public myAccountFormDialog: MatDialog,\n              public replacePassFormDialog: MatDialog,\n              public verificationFormDialog: MatDialog) {\n    this.TOKEN_KEY = AppConfig.endpoints.TOKEN_KEY;\n  }\n\n\n  openMyAccountForm() {\n    const myAccountFormDialogRef = this.myAccountFormDialog.open(MyAccountForm2Component, {\n      data: {currentUser: this.currentUser},\n    });\n\n    myAccountFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n    });\n\n    return myAccountFormDialogRef.afterClosed().toPromise();\n  }\n\n  openReplacePassForm() {\n    const replacePassFormDialogRef = this.replacePassFormDialog.open(ReplacePassForm2Component, {\n      data: {username: this.currentUser.username , password: ''},\n    });\n\n    replacePassFormDialogRef.beforeClosed().subscribe(result => {\n        console.log('The replace password form dialog before closed');\n      },\n      err => {\n        console.log(err.error.message);\n      });\n\n\n    replacePassFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The replace password form dialog after closed');\n      if (result.message === 'Replace Password Complete') {\n        console.log('Replace Password Complete');\n        this.setPassExpAlertData();\n      }\n    });\n\n    return replacePassFormDialogRef.afterClosed().toPromise();\n  }\n\n  openVerificationForm() {\n    const verificationFormDialogRef = this.verificationFormDialog.open(VerificationForm2Component, {\n      data: {username: this.currentUser.username , email: this.currentUser.email},\n    });\n\n    verificationFormDialogRef.afterClosed().subscribe(result => {\n      console.log('The register form dialog was closed');\n    });\n\n    return verificationFormDialogRef.afterClosed().toPromise();\n  }\n\n\n\n  public passExp: number = 0; // By Days\n  public previousAlertPassExp: number = 0; // By Days\n\n\n  ngOnInit(): void {\n    this.currentUser = this.token.getUser();\n    this.accessToken = this.currentUser.accessToken;\n    this.refreshToken = this.currentUser.refreshToken;\n    this.setPassExpAlertData();\n    this.setPermittedWebAppList();\n    this.is2SVRequired();\n\n    this.eventBusSub = this.eventBusService.on('openChangePassword', () => {\n      this.openReplacePassForm();\n    });\n\n    this.eventBusSub = this.eventBusService.on('openVerification', () => {\n      this.openVerificationForm();\n    });\n\n    this.eventBusSub = this.eventBusService.on('openConfiguration', () => {\n      this.configuratin();\n    });\n\n    this.eventBusSub = this.eventBusService.on('openPortal', () => {\n      this.portal();\n    });\n\n  }\n\n  is2SVRequired() {\n    this.eventBusService.emit(new EventData('is2SVRequired', null));\n  }\n\n  setPassExpAlertData(): void {\n\n    const token = this.token.getToken();\n    if (token)\n      this.authService.getPassExpireDate(token).subscribe(data => {\n        this.passExp = data.passExp;\n        this.previousAlertPassExp = data.previousAlertPassExp;\n        console.log('Password Expire Date: '+this.passExp);\n        console.log('previous Alert To Password Expire Date: '+this.previousAlertPassExp);\n      }, (err) => {\n        console.log('Password Expire Date: update failed');\n        return throwError(err);\n      });\n\n  }\n\n  setPermittedWebAppList(): void {\n    const token = this.token.getToken();\n    if (token)\n      this.authService.getPermittedWebAppList(token).subscribe(permittedWebAppList => {\n        this.permittedWebAppList=(permittedWebAppList);\n        console.log('Permitted web apps list is received from server.');\n      }, (err) => {\n        console.log('Can not get server data defining permitted web apps for user');\n        return throwError(err);\n      });\n  }\n\n  openapp(): void {\n    console.log('window.location.origin.toString():  '+window.location.origin.toString());\n\n    this.router.navigate([]).then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+'/accGCCS/'/*window.location.origin.toString()+\"/profile\"*/); });\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\n    var promise = new Promise((resolve, reject) => {this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML = \"new title\";});\n\n    console.log('window.location.origin.toString():  '+ this.windowObjectReference.window.document.getElementById(\"profile_title\").innerHTML);\n\n  }\n\n  public forseRefreshToken(): void {\n\n    if (!this.isLoading) {\n      this.isLoading = true;\n      const token = this.token.getRefreshToken();\n      if (token)\n        this.authService.refreshToken(token).subscribe(\n          data => {\n            this.isLoading = false;\n            this.token.saveToken(data.accessToken);\n            this.token.saveRefreshToken(data.refreshToken);\n            this.refreshTokenSubject.next(data.accessToken);\n            this.currentUser = this.token.getUser();\n            this.accessToken = this.token.getToken();\n            this.refreshToken = this.token.getRefreshToken();\n          },\n          (err) => {\n            this.isLoading = false;\n\n            this.token.signOut();\n            return throwError(err);\n          }\n        );\n    }\n  }\n\n  public async openNewTabForApp(appRequest: string[]) {\n    const [webapp, webappURLPrefix] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n\n    if (!this.isLoading) {\n      const token = this.token.getRefreshToken();\n      if (token) {\n\n        //const timeout = new Promise((res) => setTimeout(() => res(\"openNewTabForApp - timeout!\"), 5000));\n        const timeout = (prom: Promise<any>, time: number, exception: Symbol) => {\n          let timer: any;\n          return Promise.race([\n            prom,\n            new Promise((_r, rej) => timer = setTimeout(rej, time, exception))\n          ]).finally(() => clearTimeout(timer));\n        }\n\n\n        const promise = async () => {\n          new Promise<any>((resolve, reject) => {\n            console.log('Spinner Start.');\n            this.isLoading = true;\n            return this.authService.webapptab(token, webapp).toPromise()\n              .then((val: any) => {\n                console.log('Request approved by the server.');\n                newAccessToken = (val.accessToken);\n                newRefreshToken = (val.refreshToken);\n                newCurrentUser = (val);\n              })\n              .then((result) => {\n                  this.router.navigate([])\n                    .then(result => {\n                      this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers + webappURLPrefix);\n                    })\n                    .then((result) => {\n                        console.log('Plant the secret ingredient.');\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));\n                      },\n                      (err) => {\n                        console.log('failed loading the app webpage.');\n                        reject(throwError(err));\n                      })\n                },\n                (err) => {\n                  console.log('cant get a server request appropriate response for opening this webpage ')\n                  reject(throwError(err));\n                })\n              .then(() => {\n                  console.log('Spinner Stop.');\n                  this.isLoading = false;\n                  resolve(\"Success\");\n                },\n                (err) => {reject(throwError(err))});\n\n          });\n        }\n\n        const timeoutError = Symbol();\n        try {\n\n          await timeout(promise(), 5000, timeoutError)\n            .then(() => {\n              this.isLoading = false;\n              console.log('openNewTabForApp: open tab app successfully finished');\n            });\n        }catch (e) {\n          if (e === timeoutError) {\n            // handle timeout\n            console.log('timeoutError: '+e.error);\n          }else {\n            // other error\n            console.log('Error: '+e.error);\n            throw e;\n          }\n        }\n\n      }\n    }\n  }\n\n  public async openNewWinForApp(appRequest: string[]) {\n    const [webapp, webappURLPrefix] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n\n    if (!this.isLoading) {\n      const token = this.token.getRefreshToken();\n      if (token) {\n\n\n        const timeout = (prom: Promise<any>, time: number, exception: Symbol) => {\n          let timer: any;\n          return Promise.race([\n            prom,\n            new Promise((_r, rej) => timer = setTimeout(rej, time, exception))\n          ]).finally(() => clearTimeout(timer));\n        }\n\n\n        const promise = async () => {\n          new Promise<any>((resolve, reject) => {\n            console.log('Spinner Start.');\n            this.isLoading = true;\n            return this.authService.webapptab(token, webapp).toPromise()\n              .then((val: any) => {\n                console.log('Request approved by the server.');\n                newAccessToken = (val.accessToken);\n                newRefreshToken = (val.refreshToken);\n                newCurrentUser = (val);\n              })\n              .then((result) => {\n                  console.log('Opening new tab/win for the requested page.');\n                  this.router.navigate([])\n                    .then(result => {\n                      console.log('Insert url and loading the page.');\n                      this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix+'start.html',\n                        'C-Sharpcorner', 'scrollbars=no');\n                    })\n                    .then((result) => {\n                        console.log('Plant the secret ingredient.');\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n                        this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));\n                      },\n                      (err) => {\n                        console.log('failed loading the app webpage.');\n                        reject(throwError(err));\n                      })\n                },\n                (err) => {\n                  console.log('cant get a server request appropriate response for opening this webpage ')\n                  reject(throwError(err));\n                })\n              .then(() => {\n                  console.log('Spinner Stop.');\n                  this.isLoading = false;\n                  resolve(\"Success\");\n                },\n                (err) => {reject(throwError(err))});\n          });\n        }\n\n\n        const timeoutError = Symbol();\n        try {\n          await timeout(promise(), 5000, timeoutError)\n        }catch (e) {\n          if (e === timeoutError) {\n            // handle timeout\n            console.log('timeoutError: ' + e.error);\n          } else {\n            // other error\n            console.log('Error: ' + e.error);\n            throw e;\n          }\n        }finally {\n          console.log('openNewTabForApp: open tab app successfully finished');\n        }\n\n\n\n      }\n    }\n  }\n\n  /*public openNewWinForApp(appRequest: string[]): void {\n    //webapp: string, webappURLPrefix: string\n    const [ webapp, webappURLPrefix ] = appRequest.values();\n    var newAccessToken = \"\";\n    var newRefreshToken = \"\";\n    var newCurrentUser = \"\";\n\n    if (!this.isLoading) {\n      this.isLoading = true;\n      const token = this.token.getRefreshToken();\n      if (token)\n        this.authService.webapptab(token, webapp)\n          .subscribe(\n            data => {\n              let promise = new Promise<void>((resolve, reject) => {\n                newAccessToken = (data.accessToken);\n                newRefreshToken = (data.refreshToken);\n                newCurrentUser = (data);\n                setTimeout(() => {\n                  console.log(\"Failed open new window\");\n                  resolve();//() => {resolve();}\n                }, 5000);\n              })\n              promise.then(result => { this.windowObjectReference = window.open(AppConfig.accServer.ACCWEBServers+webappURLPrefix+'start.html',\n                  'C-Sharpcorner', 'scrollbars=no');})\n                .then(result => { this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.TOKEN_KEY, newAccessToken);\n                    this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.REFRESHTOKEN_KEY, newRefreshToken);\n                    this.windowObjectReference.window.sessionStorage.setItem(AppConfig.endpoints.USER_KEY, JSON.stringify(newCurrentUser));},\n            (err) => { this.isLoading = false;\n              return throwError(err);})\n    },\n    (error) => {\n              this.isLoading = false;\n              return throwError(error.error);\n            }, () => {this.isLoading = false;})\n    }\n  }*/\n\n  configuratin(): void {\n    this.router.navigate(['../admin2'], {relativeTo: this.activatedRoute});\n  }\n\n  portal(): void {\n    console.log(this.activatedRoute.toString())\n    this.router.navigate(['../'], {relativeTo: this.activatedRoute});\n  }\n\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.storybook-profile2 {\r\n  position: absolute;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n.Desktop-1Login-1 {\r\n  width: 100%;\r\n  height: 100%;\r\n  flex-grow: 0;\r\n}\r\n\r\n#avatar {\r\n  position: absolute;\r\n  width: 56px;\r\n  height: calc(57px + 32px + 5px);\r\n  left: 52px;\r\n  top: 52px;\r\n  padding: 0 0 0 0 ;\r\n}\r\n\r\n/*background-image: linear-gradient(228.37deg, #EFF8FF 22.25%, #B0DCFF 88.18%)*/\r\n\r\n/*.Desktop-1Login-1 {\r\n  width: 1920px;\r\n  height: 1080px;\r\n  flex-grow: 0;\r\n  background-image: linear-gradient(228.37deg, #EFF8FF 22.25%, #B0DCFF 88.18%);\r\n}*/\r\n\r\ndiv.relative {\r\n  position: relative;\r\n  width: inherit;\r\n  height: inherit;\r\n}\r\n\r\n\r\n\r\n\r\n.Frame-1 {\r\n  width: 1920px;\r\n  height: 1080px;\r\n  flex-grow: 0;\r\n}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\nimg.icon-1 {\r\n  position: absolute;\r\n  width: 305.7px;\r\n  height: 309px;\r\n  transform: rotate(0deg);\r\n  background-position: bottom;\r\n}\r\n\r\nimg.icon-2 {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 372px;\r\n  height: 343px;\r\n  flex-grow: 0;\r\n}\r\n\r\n\r\n.storybook-profile2--primary {\r\n\r\n  background: linear-gradient(228.37deg, #EFF8FF 22.25%, #B0DCFF 88.18%);\r\n}\r\n",
                    "styleUrl": "./portal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "token",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "myAccountFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "replacePassFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "verificationFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "token",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "myAccountFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "replacePassFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "verificationFormDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<html>\r\n<head>\r\n  <style>\r\n\r\n  </style>\r\n  <title></title>\r\n</head>\r\n<body>\r\n<storybook-background1></storybook-background1>\r\n\r\n<!--button mat-raised-button (click)=\"openVerificationForm()\">VerificationForm</button>\r\n<button mat-raised-button (click)=\"is2SVRequired()\">is2SVRequired</button-->\r\n<!--button mat-raised-button (click)=\"setPassExpAlertData()\">setPassExpAlertData</button-->\r\n\r\n\r\n<storybook-avatar\r\n  id=\"avatar\"\r\n  [label]=\"this.currentUser.username\"\r\n  [isNotify]=\"this.isNotify()\"\r\n  header=\"{{'Your password will expire in ' + this.passExp +' Days.'}}\"\r\n  (actionButton)=\"openReplacePassForm()\"\r\n  (click)=\"this.openMyAccountForm()\">\r\n</storybook-avatar>\r\n\r\n<!--this.setPassExpAlertData() -->\r\n\r\n\r\n<storybook-app-menu\r\n  [profileApps]=\"permittedWebAppList\"\r\n  [isLoading]=\"isLoading\"\r\n  (openNewWinForApp)=\"openNewWinForApp($event)\"\r\n  (openNewTabForApp)=\"openNewTabForApp($event)\">\r\n</storybook-app-menu>\r\n\r\n</body>\r\n</html>\r\n"
        },
        {
            "name": "RegisterForm2Component",
            "id": "component-RegisterForm2Component-edd4bf75269682816508b379daf19a10c5551c43ece92e6dd534fa2a40f8739497ad7cdb1116448450c4556123e26dbfc88d99cf84942180d4f5040750b2bf8a",
            "file": "src/app/login2/login-main/register-form2/register-form2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "register-form2",
            "styleUrls": [
                "./register-form2.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register-form2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "validateMail",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<String>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "apiResponse",
                    "defaultValue": "{ message: '', error: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<RegisterForm2Component>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "empList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "errorFieldSubmitted",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'form', {static: false}"
                        }
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isRegFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isRegSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "regErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: true },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '5', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryInput[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Inject, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {DialogData} from \"../login-main.component\";\r\nimport {PasswordValidators} from \"../replace-pass-form2/replace-pass-form2.component\";\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'register-form2',\r\n  templateUrl: './register-form2.component.html',\r\n  styleUrls: ['./register-form2.component.css']\r\n})\r\nexport default class RegisterForm2Component implements OnInit {\r\n  registerForm: FormGroup;\r\n  isRegSuccess = false;\r\n  isRegFailed = false;\r\n  submitted = false;\r\n  regErrorMessage: any;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n  public isLoading = false;\r\n\r\n\r\n  @Output() validateMail: EventEmitter<String> = new EventEmitter();\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: true },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '5', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n\r\n  ];\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              public dialogRef: MatDialogRef<RegisterForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\r\n    this.registerForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n      password: new FormControl(data.password.toString(), Validators.minLength(2)),\r\n      email: new FormControl('', Validators.email),\r\n      phone: new FormControl('', PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9 ]{8})\"), {requiresPhoneChars: true}))\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.isRegSuccess) {\r\n      this.dialogRef.close({message: 'Registration Complete', username: this.username.value, email: this.email.value});\r\n    }\r\n    else {\r\n      this.submitted = true;\r\n      const { username, password, email, phone } = this.registerForm.getRawValue();\r\n      this.isLoading = true;\r\n      this.authService.registerForm(username, email, password, phone).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.isRegSuccess = true;\r\n          this.isRegFailed = false;\r\n          this.errorFieldSubmitted = {} ;\r\n          this.apiResponse.error = false;\r\n          this.apiResponse.message = 'Successful registration';\r\n        },\r\n        error => {\r\n          const errorResponse = JSON.parse(error.error);\r\n          this.apiResponse.error = true;\r\n          this.apiResponse.message = 'Registration error';\r\n          this.regErrorMessage = errorResponse;\r\n          this.isRegFailed = true;\r\n          if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n            this.errorFieldSubmitted = errorResponse.data;\r\n          }\r\n          this.isLoading = false;\r\n        },\r\n        () => {\r\n          this.isLoading = false;\r\n          console.log(\"Registration Complete\");}\r\n      );\r\n    }\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.registerForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.registerForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.registerForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.registerForm.get('phone')!;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n.fa,.fab,.fad,.fal,.far,.fas {\r\n  -moz-osx-font-smoothing:grayscale;\r\n  -webkit-font-smoothing:antialiased;\r\n  display:inline-block;\r\n  font-style:normal;\r\n  font-variant:normal;\r\n  text-rendering:auto;line-height:1\r\n}\r\n\r\n.fa-lg {\r\n  font-size:1.33333em;\r\n  line-height:.75em;\r\n  vertical-align:-.0667em\r\n}\r\n/**/\r\n.fa-xs {font-size:.75em}\r\n\r\n.fa-sm {font-size:.875em}\r\n\r\n.fa-1x {font-size:1em}\r\n\r\n.fa-2x {font-size:2em}\r\n\r\n.fa-3x {font-size:3em}\r\n\r\n.fa-4x {font-size:4em}\r\n\r\n.fa-5x {font-size:5em}\r\n\r\n.fa-6x {font-size:6em}\r\n\r\n.fa-7x {font-size:7em}\r\n\r\n.fa-8x {font-size:8em}\r\n\r\n.fa-9x {font-size:9em}\r\n\r\n.fa-10x {font-size:10em}\r\n\r\n.fa-fw {text-align:center;width:1.25em}\r\n\r\n.fa-ul {list-style-type:none;margin-left:2.5em;padding-left:0}\r\n\r\n.fa-ul>li {position:relative}\r\n\r\n.fa-li {left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}\r\n\r\n.fa-border {border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\n.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left {\r\n  margin-right:.3em\r\n}\r\n\r\n.input-with-pre-icon label {left:36px;right:initial}\r\n\r\n\r\n.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right {\r\n  margin-left:.3em\r\n}\r\n\r\n.fa-spin {\r\n  -webkit-animation:fa-spin 2s linear infinite;\r\n  animation:fa-spin 2s linear infinite\r\n}\r\n\r\n\r\n\r\n.fa,.far,.fas {\r\n  font-family: \"Font Awesome 5 Free\", serif\r\n}\r\n\r\n.fa,.fas {\r\n  font-weight:900\r\n}\r\n\r\n\r\n.v-btn__content {\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1 0 auto;\r\n  justify-content: inherit;\r\n  line-height: normal;\r\n  position: relative;\r\n  transition: inherit;\r\n}\r\n\r\n.form-outline .form-control:focus ~ .form-label, .form-outline .form-control.active ~ .form-label {\r\n  transform: translateY(-1.5rem) translateY(0.1rem) scale(0.8);\r\n}\r\n\r\n\r\n/*\r\n.form-outline .form-control ~ .form-notch div {\r\n  pointer-events: none;\r\n  border: 1px solid;\r\n  border-color: #39c0ed;\r\n}\r\n\r\n*/\r\n.v-btn__content {\r\n  letter-spacing: normal;\r\n}\r\n\r\nbody#registerFormDialogContainer {\r\n  background: #0000ff00;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./register-form2.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<RegisterForm2Component>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<RegisterForm2Component>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 94
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 98
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 102
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 106
                    }
                }
            },
            "templateData": "\r\n<storybook-registry-form #form\r\n                  [isRegSuccess]=\"isRegSuccess\"\r\n                  [isRegFailed]=\"isRegFailed\"\r\n                  [regErrorMessage]=\"regErrorMessage\"\r\n                  [isLoading]=\"isLoading\"\r\n                  [storyInputs]=\"storyInputsInOrder\"\r\n                  [mForm]=\"registerForm\"\r\n                  (sendRegReq)=\"onSubmit()\"\r\n                  (clickXButton)=\"this.dialogRef.close('xbutton')\">\r\n</storybook-registry-form>\r\n"
        },
        {
            "name": "RegistryFormComponent",
            "id": "component-RegistryFormComponent-5ac4516a3828d912636f9f1007de2b7ef5d39135865742254708bd24e6b4eb3d940fb2d7dacba9b0e02175445bf88df914e810fffd003a7838b0d1414eedb9cc",
            "file": "src/stories/forms/registry-form/registry-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-registry-form",
            "styleUrls": [
                "./registry-form.css"
            ],
            "styles": [],
            "templateUrl": [
                "./registry-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "AuthService",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRegFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRegSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "regErrorMessage",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "storyInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 117,
                    "type": "StoryInput[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickXButton",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "sendRegReq",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "changeLog",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "credentials",
                    "defaultValue": "{\r\n    username: null,\r\n    password: null\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "mainHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formHeader', {static: false}"
                        }
                    ]
                },
                {
                    "name": "param",
                    "defaultValue": "{language: 'login-main'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "storybookInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'storybook-input', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadSuccessfullyLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openReplacePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewChecked,\r\n  Component, Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input, OnChanges,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  Renderer2, SimpleChanges, ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {ApiErrorMessageService} from \"../../../app/storybook/pipes/api-error-message.service\";\r\n//import {BehaviorSubject} from \"rxjs\";\r\n//import {AccountInputComponent} from \"../inputs/input/story-input.component\";\r\n\r\n/*\r\n@Directive({selector: 'storybook-input'})\r\nexport class AccountInput {\r\n  @Input() storyInput!: AccountInput;\r\n}\r\n*/\r\n@Component({\r\n  selector: 'storybook-registry-form',\r\n  templateUrl: './registry-form.component.html',\r\n  styleUrls: ['./registry-form.css'],\r\n})\r\nexport default class RegistryFormComponent implements OnInit, AfterViewChecked, OnChanges {\r\n\r\n/*\r\n  @ViewChild('storybook-input')\r\n  set mStoryInput(v: AccountInput) {\r\n    setTimeout(() => {\r\n      this.selectedPane = v.id;\r\n      console.log('this.selectedPane'+this.selectedPane.toString())\r\n    }, 30);\r\n  }\r\n  selectedPane: string = '';\r\n  shouldShow = true;\r\n  toggle() {\r\n    this.shouldShow = !this.shouldShow;\r\n  }\r\n*/\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  @Input() isRegFailed = false;\r\n\r\n  @Input() regErrorMessage: any = {};\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\r\n  @ViewChild('storybook-input', { static: false }) storybookInput?: ElementRef;\r\n\r\n\r\n  param = {language: 'login-main'};\r\n\r\n  constructor(private renderer: Renderer2) {\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup  = new FormGroup({});\r\n  /*username: new FormControl('', Validators.minLength(2)),\r\n  password: new FormControl('T@diran2022', Validators.minLength(2)),\r\n  email: new FormControl('', Validators.email),\r\n  phone: new FormControl(null, Validators.pattern(new RegExp(\"[0-9 ]{12}\")))*/\r\n\r\n  changeLog: string[] = [];\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRegSuccess) {\r\n      if (!changes.isRegSuccess.previousValue &&  changes.isRegSuccess.currentValue) {\r\n        console.warn('Register Request Succeeded!');\r\n        this.loadSuccessfullyLoggedIn();\r\n      }\r\n    }\r\n    /*if (changes.isRegFailed || changes.regErrorMessage) {\r\n      console.log('isRegFailed' + this.regErrorMessage['message'])\r\n    }*/\r\n  }\r\n\r\n\r\n\r\n  @Input() isRegSuccess = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() sendRegReq: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION');\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('Registry Request Sent!');\r\n\r\n    //this.renderer.setAttribute(this.storybookInput?.nativeElement ,'hidden', 'true');\r\n    //this.renderer.setAttribute(this.mainHeader?.nativeElement ,'hidden', 'true');\r\n    //this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully complete your registeration!');\r\n\r\n\r\n    //this.renderer.setAttribute(this.storybookInput?.nativeElement ,'innerHTML','true');\r\n    this.sendRegReq.emit();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.mForm?.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.mForm?.get('phone')!;\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    //console.log(this.childComp?.length)\r\n  }\r\n\r\n  loadSuccessfullyLoggedIn(){\r\n    this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully complete your registeration!');\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: relative;\r\n  width: 637.5px;\r\n  height: 430px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 479px/2 - 0.5px);\r\n}\r\n\r\n.form {\r\n  position: absolute;\r\n  left: 3.18%;\r\n  right: 14.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 10px 10px;\r\n}\r\n.col-md-12{\r\n  position: center;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.card {\r\n  position: absolute;\r\n  left: 5.18%;\r\n  right: 4.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n.form-header {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  width: 460px;\r\n  height: 92px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n.main-form-header {\r\n  position: relative;\r\n  width: 447px;\r\n  height: 52px;\r\n  flex-grow: 0;\r\n  margin: 0 0 0 0;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n.sub-form-header {\r\n  position: relative;\r\n\r\n\r\n  width: 446px;\r\n  height: 32px;\r\n  flex-grow: 0;\r\n  margin: 0 0 0 0;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 17px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 31px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n.login-button {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n}\r\n\r\n\r\n.forgot-password {\r\n  /* D UnderLine Regular */\r\n\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n\r\n.thematic-break {\r\n  margin: 20px 2px 16px 2.5px;\r\n  background-color: #3d8ecf;\r\n  border-top-width: 1px;\r\n  border-top-color: rgb(61, 142, 207);\r\n  border-top-style: solid;\r\n}\r\n\r\n#button-successfully {\r\n  position: relative;\r\n  width: 100%; height:\r\n  102px; margin-top: 50px;\r\n  margin-bottom: 100px;\r\n  left: 0;\r\n}\r\n\r\nstorybook-button-successfully {\r\n  position: relative;\r\n  left: 240px;\r\n}\r\n\r\n\r\n#button-ex {\r\n  position: absolute;\r\n  top: 48px;\r\n  left: 99px;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0;\r\n}\r\n\r\n\r\n.login-failed-message {\r\n  position: relative;\r\n  height: 55px;\r\n\r\n\r\n  /* D Regular */\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  align-items: start;\r\n  letter-spacing: -0.011em;\r\n\r\n  /* Red */\r\n\r\n  color: #FA4F4F;\r\n\r\n}\r\n",
                    "styleUrl": "./registry-form.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewChecked",
                "OnChanges"
            ],
            "accessors": {
                "storyInputs": {
                    "name": "storyInputs",
                    "setSignature": {
                        "name": "storyInputs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 117,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 146
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 150
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 154
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 158
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\" (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div class=\"form-header\">\r\n      <a class=\"main-form-header\" #formHeader>Complete Registration</a>\r\n      <br>\r\n      <a *ngIf=\"!isRegSuccess\" class=\"sub-form-header\">complete the registration by filling the missing info:</a>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n      <div class=\"Vector\">\r\n\r\n\r\n        <div *ngIf=\"isRegSuccess\" id=\"button-successfully\" style=\"\">\r\n          <storybook-button-successfully   style=\"position: relative; margin-bottom: 50px;\"></storybook-button-successfully>\r\n        </div>\r\n\r\n        <div class=\"login-button\">\r\n            <div *ngIf=\"!isRegSuccess && storyInputsInOrder.length === 0\">empty</div>\r\n            <div *ngIf=\"!isRegSuccess\">\r\n              <storybook-input\r\n                [storyInput]=\"storyInputsInOrder[0]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-input>\r\n              <storybook-input\r\n                [storyInput]=\"storyInputsInOrder[1]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-input>\r\n              <storybook-input\r\n                [storyInput]=\"storyInputsInOrder[2]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\"\r\n                [conditionList]=\"['requiresPhone']\">\r\n              </storybook-input>\r\n              <storybook-input\r\n                [storyInput]=\"storyInputsInOrder[3]\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\"\r\n                [conditionList]=\"['requiresEmail']\">\r\n              </storybook-input>\r\n              <!--storybook-input\r\n                *ngFor=\"let storyInput of storyInputsInOrder\"\r\n                [storyInput]=\"storyInput\"\r\n                (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                (onPinInput)=\"onPinInput.emit($event)\"\r\n                [currentForm]=\"mForm\">\r\n              </storybook-input-->\r\n            </div>\r\n\r\n            <div *ngIf=\"!isRegSuccess\" class=\"thematic-break\"></div>\r\n            <div class=\"login-failed-message\" role=\"alert\" >\r\n              <p *ngIf=\"isRegFailed\">*  {{ this.regErrorMessage['message'] | apiErrorMessage: param }}</p>\r\n            </div>\r\n\r\n            <storybook-button-continue [label]=\"isRegSuccess ? 'Continue' :'Complete Rgistration'\"  size=\"small\"\r\n                                       label=\"Continue\" type=\"button\" (click)=\"onSubmit()\" >\r\n            </storybook-button-continue>\r\n        </div>\r\n        </div>\r\n\r\n    </form>\r\n  </div>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "ReplacePassForm2Component",
            "id": "component-ReplacePassForm2Component-f0bdfc636ed016995c8f29a24b3456e57f33b9ca68de0b32eab9ae2764ed74866464688b44f66fe729ac401e253965091547ac3a58c7d624b6b9a64126ef3378",
            "file": "src/app/login2/login-main/replace-pass-form2/replace-pass-form2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [
                "./replace-pass-form2.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./replace-pass-form2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ReplacePassForm2Component>",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "empList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "replacePassForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "status",
                    "defaultValue": "{\r\n    isRepSuccess: false,\r\n    isRepFailed: false,\r\n    submitted: false,\r\n    repErrorMessage: {},\r\n    apiResponse: { message: '', error: false },\r\n    errorFieldSubmitted: {},\r\n    closeResult: '',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '1', title: 'oldPassword', state: 'INITIAL PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'password', state: 'NEW PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'confirmPassword', state: 'RE-ENTER NEW PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryInput[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Inject, Renderer2} from '@angular/core';\r\nimport { MdbModalRef } from 'mdb-angular-ui-kit/modal';\r\nimport {AuthService} from \"src/app/_services/auth.service\";\r\nimport {AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {DialogData} from \"../login-main.component\";\r\nimport RegisterForm2Component from \"../register-form2/register-form2.component\";\r\nimport {StoryInput} from \"../../../../stories/inputs/input/story-input.model\";\r\nimport {EventData} from \"../../../_shared/event.class\";\r\nimport {workingModeConfiguration} from \"../../../app.config\";\r\nimport {EventBusService} from \"../../../_shared/event-bus.service\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './replace-pass-form2.component.html',\r\n  styleUrls: ['./replace-pass-form2.component.css']\r\n})\r\nexport class ReplacePassForm2Component {\r\n  replacePassForm: FormGroup;\r\n  status = {\r\n    isRepSuccess: false,\r\n    isRepFailed: false,\r\n    submitted: false,\r\n    repErrorMessage: {},\r\n    apiResponse: { message: '', error: false },\r\n    errorFieldSubmitted: {},\r\n    closeResult: '',\r\n  };\r\n\r\n  public isLoading = false;\r\n\r\n  empList: Array<String> = [];\r\n\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '1', title: 'oldPassword', state: 'INITIAL PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'password', state: 'NEW PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'confirmPassword', state: 'RE-ENTER NEW PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: false },\r\n  ];\r\n\r\n\r\n\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private eventBusService: EventBusService,\r\n              private tokenStorageService: TokenStorageService,\r\n              public dialogRef: MatDialogRef<ReplacePassForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\r\n    this.replacePassForm = new FormGroup({\r\n      userName: new FormControl(data.username, Validators.required),\r\n      oldPassword: new FormControl(data.password, Validators.minLength(1)),\r\n      password: new FormControl('', Validators.compose([\r\n        Validators.minLength(8),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9])\"), {requiresDigit: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {requiresUppercase: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {requiresLowercase: true} ),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&#><{}()+~])\"), {requiresSpecialChars: true})\r\n      ])),\r\n      confirmPassword: new FormControl('', [\r\n        Validators.minLength(8),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[0-9])\"), {requiresDigit: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {requiresUppercase: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {requiresLowercase: true}),\r\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&#><{}()+~])\"), {requiresSpecialChars: true})\r\n      ])\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.status.isRepSuccess) {\r\n      this.dialogRef.close({message: 'Replace Password Complete', data: this.data});\r\n    }\r\n    //else if (workingModeConfiguration.runMode.TSV && this.tokenStorageService.getPinCodeToken() == null) {\r\n    //  this.eventBusService.emit(new EventData('openVerification', null));\r\n    //}\r\n    else {\r\n      this.status.submitted = true;\r\n      this.isLoading = true;\r\n      this.changePassword().subscribe(\r\n        data => {\r\n          console.log(data);\r\n          this.status.isRepSuccess = true;\r\n          this.status.isRepFailed = false;\r\n          this.status.errorFieldSubmitted = {};\r\n          this.status.apiResponse.error = false;\r\n          this.status.apiResponse.message = 'Successful registration';\r\n          this.data.password = this.password.value.toString();\r\n        },\r\n        error => {\r\n          switch (error.error.message) {\r\n            case \"Error: Invalidate Pin-Code! User Not Approved\":\r\n              this.eventBusService.emit(new EventData('openVerification', null));\r\n              break;\r\n            default:\r\n              const errorResponse = JSON.parse(error.error);\r\n              this.status.apiResponse.error = true;\r\n              this.status.apiResponse.message = 'Replace password error';\r\n              this.status.repErrorMessage = errorResponse;\r\n              this.status.isRepFailed = true;\r\n              if (errorResponse.error && errorResponse.message === 'VALIDATION_FAILED') {\r\n                this.status.errorFieldSubmitted = errorResponse.data;\r\n              }\r\n          }\r\n\r\n          this.isLoading = false;\r\n\r\n          //Error: Invalidate Pin-Code! User Not Approved\r\n        },\r\n        () => {\r\n          this.isLoading = false;\r\n          console.log('Replace Password closed');}\r\n      );\r\n    }\r\n  }\r\n\r\n  private changePassword() {\r\n    const { userName, oldPassword, password, confirmPassword } = this.replacePassForm.value;\r\n    let pinCodeToken = this.tokenStorageService.getPinCodeToken();\r\n\r\n    if (pinCodeToken == null) {\r\n      pinCodeToken = 'dismiss';\r\n    }\r\n    return this.authService.TSV_ReplacePassForm(userName, oldPassword, password, confirmPassword, pinCodeToken);\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.replacePassForm.get('username')!;\r\n  }\r\n\r\n  get oldPassword(): AbstractControl {\r\n    return this.replacePassForm.get('oldPassword')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.replacePassForm.get('password')!;\r\n  }\r\n\r\n  get confirmPassword(): AbstractControl {\r\n    return this.replacePassForm.get('confirmPassword')!;\r\n  }\r\n\r\n}\r\n\r\nexport class PasswordValidators {\r\n  constructor() {\r\n  }\r\n\r\n  static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n      if (!control.value) {\r\n        // if the control value is empty return no error.\r\n        return null;\r\n      }\r\n\r\n      // test the value of the control against the regexp supplied.\r\n      const valid = regex.test(control.value);\r\n\r\n      // if true, return no error, otherwise return the error object passed in the second parameter.\r\n      return valid ? null : error;\r\n    };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n.fa,.fab,.fad,.fal,.far,.fas {\r\n  -moz-osx-font-smoothing:grayscale;\r\n  -webkit-font-smoothing:antialiased;\r\n  display:inline-block;\r\n  font-style:normal;\r\n  font-variant:normal;\r\n  text-rendering:auto;line-height:1\r\n}\r\n\r\n.fa-lg {\r\n  font-size:1.33333em;\r\n  line-height:.75em;\r\n  vertical-align:-.0667em\r\n}\r\n/**/\r\n.fa-xs {font-size:.75em}\r\n\r\n.fa-sm {font-size:.875em}\r\n\r\n.fa-1x {font-size:1em}\r\n\r\n.fa-2x {font-size:2em}\r\n\r\n.fa-3x {font-size:3em}\r\n\r\n.fa-4x {font-size:4em}\r\n\r\n.fa-5x {font-size:5em}\r\n\r\n.fa-6x {font-size:6em}\r\n\r\n.fa-7x {font-size:7em}\r\n\r\n.fa-8x {font-size:8em}\r\n\r\n.fa-9x {font-size:9em}\r\n\r\n.fa-10x {font-size:10em}\r\n\r\n.fa-fw {text-align:center;width:1.25em}\r\n\r\n.fa-ul {list-style-type:none;margin-left:2.5em;padding-left:0}\r\n\r\n.fa-ul>li {position:relative}\r\n\r\n.fa-li {left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}\r\n\r\n.fa-border {border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\n.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left {\r\n  margin-right:.3em\r\n}\r\n\r\n.input-with-pre-icon label {left:36px;right:initial}\r\n\r\n\r\n.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right {\r\n  margin-left:.3em\r\n}\r\n\r\n.fa-spin {\r\n  -webkit-animation:fa-spin 2s linear infinite;\r\n  animation:fa-spin 2s linear infinite\r\n}\r\n\r\n\r\n\r\n.fa,.far,.fas {\r\n  font-family: \"Font Awesome 5 Free\", serif\r\n}\r\n\r\n.fa,.fas {\r\n  font-weight:900\r\n}\r\n\r\n\r\n.v-btn__content {\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1 0 auto;\r\n  justify-content: inherit;\r\n  line-height: normal;\r\n  position: relative;\r\n  transition: inherit;\r\n}\r\n\r\n\r\n.v-btn__content {\r\n  letter-spacing: normal;\r\n}\r\n\r\n",
                    "styleUrl": "./replace-pass-form2.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenStorageService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ReplacePassForm2Component>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventBusService",
                        "type": "EventBusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenStorageService",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ReplacePassForm2Component>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 133
                    }
                },
                "oldPassword": {
                    "name": "oldPassword",
                    "getSignature": {
                        "name": "oldPassword",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 137
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 141
                    }
                },
                "confirmPassword": {
                    "name": "confirmPassword",
                    "getSignature": {
                        "name": "confirmPassword",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 145
                    }
                }
            },
            "templateData": "<storybook-replace-pass-form #form\r\n                         [status]=\"status\"\r\n                         [isLoading]=\"isLoading\"\r\n                         [storyInputs]=\"storyInputsInOrder\"\r\n                         [mForm]=\"replacePassForm\"\r\n                         [isRepSuccess]=\"status.isRepSuccess\"\r\n                         (sendRegReq)=\"onSubmit()\"\r\n                         (clickXButton)=\"this.dialogRef.close({message: 'xbutton'})\"\r\n></storybook-replace-pass-form>\r\n"
        },
        {
            "name": "ReplacePassFormComponent",
            "id": "component-ReplacePassFormComponent-da90fea46eccb7e79a93dfc4d35ccab7f8ca63e51c39b53e41680b3184a110ff471bb8ea062adb704bc18edc37f89228f34d074960b89ab678f8370f2c136154",
            "file": "src/stories/forms/replace-pass-form/replace-pass-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-replace-pass-form",
            "styleUrls": [
                "./replace-pass-form.css"
            ],
            "styles": [],
            "templateUrl": [
                "./replace-pass-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "AuthService",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRepFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRepSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "repErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "storyInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "StoryInput[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickXButton",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "sendRegReq",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "changeLog",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "credentials",
                    "defaultValue": "{\r\n    username: null,\r\n    password: null\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "mainHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formHeader', {static: false}"
                        }
                    ]
                },
                {
                    "name": "param",
                    "defaultValue": "{language: 'login-main'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "popover",
                    "defaultValue": "{\r\n    content: ActionInputComponent\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopoverOptions",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "storybookInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'storybook-input', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadSuccessfullyLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openReplacePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewChecked,\r\n  Component, Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input, OnChanges,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  Renderer2, SimpleChanges, ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {PopoverOptions} from \"../../directive/popover.interface\";\r\nimport {ActionInputComponent} from \"../../actions/action-input/action-input.component\";\r\n//import {BehaviorSubject} from \"rxjs\";\r\n//import {AccountInputComponent} from \"../inputs/input/story-input.component\";\r\n\r\n/*\r\n@Directive({selector: 'storybook-input'})\r\nexport class AccountInput {\r\n  @Input() storyInput!: AccountInput;\r\n}\r\n*/\r\n@Component({\r\n  selector: 'storybook-replace-pass-form',\r\n  templateUrl: './replace-pass-form.component.html',\r\n  styleUrls: ['./replace-pass-form.css'],\r\n})\r\nexport default class ReplacePassFormComponent implements OnInit, AfterViewChecked, OnChanges {\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  param = {language: 'login-main'};\r\n\r\n\r\n\r\n\r\n\r\n  @Input() formService!: AuthService;\r\n\r\n  credentials: any = {\r\n    username: null,\r\n    password: null\r\n  };\r\n\r\n  @Input() isRepFailed = false;\r\n\r\n  @Input() isRepSuccess = false;\r\n\r\n\r\n  @Input() repErrorMessage = '';\r\n\r\n  openReplacePassword() {\r\n    //this.replacePassFormService.open(ReplacePassForm2Component);\r\n  }\r\n\r\n  @ViewChild('formHeader', { static: false }) mainHeader?: ElementRef;\r\n  @ViewChild('storybook-input', { static: false }) storybookInput?: ElementRef;\r\n\r\n\r\n\r\n\r\n  constructor(private renderer: Renderer2) {\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup  = new FormGroup({});\r\n\r\n\r\n  changeLog: string[] = [];\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRepSuccess) {\r\n      if (!changes.isRepSuccess.previousValue &&  changes.isRepSuccess.currentValue) {\r\n        console.warn('ReplacePassForm Request Succeeded!');\r\n        this.loadSuccessfullyLoggedIn();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input() status?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() sendRegReq: EventEmitter<void> = new EventEmitter();\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME' || t.state === 'EMAIL' || t.state === 'PHONE NUMBER FOR AUTHENTICATION');\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.warn('ReplacePassForm Request Sent!');\r\n\r\n    //this.renderer.setAttribute(this.storybookInput?.nativeElement ,'hidden', 'true');\r\n    //this.renderer.setAttribute(this.mainHeader?.nativeElement ,'hidden', 'true');\r\n    //this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully complete your registeration!');\r\n\r\n\r\n    //this.renderer.setAttribute(this.storybookInput?.nativeElement ,'innerHTML','true');\r\n    this.sendRegReq.emit();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n\r\n  get userName(): AbstractControl {\r\n    return this.mForm?.get('username')!;\r\n  }\r\n\r\n  get oldPassword(): AbstractControl {\r\n    return this.mForm?.get('oldPassword')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.mForm?.get('password')!;\r\n  }\r\n\r\n  get confirmPassword(): AbstractControl {\r\n    return this.mForm?.get('confirmPassword')!;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  ngAfterViewChecked(): void {\r\n    //console.log(this.childComp?.length)\r\n  }\r\n\r\n  loadSuccessfullyLoggedIn(){\r\n    this.renderer.setProperty(this.mainHeader?.nativeElement ,'innerHTML','You have successfully changed your password!');\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: relative;\r\n  width: 637.5px;\r\n  height: 430px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 479px/2 - 0.5px);\r\n}\r\n\r\n.form {\r\n  position: absolute;\r\n  left: 3.18%;\r\n  right: 14.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 10px 10px;\r\n}\r\n.col-md-12{\r\n  position: center;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.card {\r\n  position: absolute;\r\n  left: 5.18%;\r\n  right: 4.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n.form-header {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  width: 460px;\r\n  height: 92px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n.main-form-header {\r\n  position: relative;\r\n  width: 447px;\r\n  height: 52px;\r\n  flex-grow: 0;\r\n  margin: 0 0 0 0;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n}\r\n\r\n\r\n\r\n\r\n.login-button {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n}\r\n\r\n\r\n.forgot-password {\r\n  /* D UnderLine Regular */\r\n\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n\r\n.thematic-break {\r\n  margin: 20px 2px 10px 2.5px;\r\n  background-color: #3d8ecf;\r\n  border-top-width: 1px;\r\n  border-top-color: #3d8ecf;\r\n  border-top-style: solid;\r\n}\r\n\r\n#button-successfully {\r\n  position: relative;\r\n  width: 100%; height:\r\n  102px; margin-top: 50px;\r\n  margin-bottom: 100px;\r\n  left: 0;\r\n}\r\n\r\nstorybook-button-successfully {\r\n  position: relative;\r\n  left: 240px;\r\n}\r\n\r\n\r\n#button-ex {\r\n  position: absolute;\r\n  top: 48px;\r\n  left: 99px;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0;\r\n}\r\n\r\n.login-failed-message {\r\n  position: relative;\r\n  height: 55px;\r\n\r\n\r\n  /* D Regular */\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  align-items: start;\r\n  letter-spacing: -0.011em;\r\n\r\n  /* Red */\r\n\r\n  color: #FA4F4F;\r\n\r\n}\r\n",
                    "styleUrl": "./replace-pass-form.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewChecked",
                "OnChanges"
            ],
            "accessors": {
                "storyInputs": {
                    "name": "storyInputs",
                    "setSignature": {
                        "name": "storyInputs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 107,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 136
                    }
                },
                "oldPassword": {
                    "name": "oldPassword",
                    "getSignature": {
                        "name": "oldPassword",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 140
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 144
                    }
                },
                "confirmPassword": {
                    "name": "confirmPassword",
                    "getSignature": {
                        "name": "confirmPassword",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 148
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\" (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div class=\"form-header\">\r\n      <a class=\"main-form-header\" #formHeader>Change Password</a>\r\n      <br>\r\n\r\n      <br>\r\n      <form name=\"currentForm\"   [formGroup]=\"mForm\">\r\n        <div class=\"Vector\">\r\n\r\n          <div *ngIf=\"status.isRepSuccess\" id=\"button-successfully\" style=\"\">\r\n            <storybook-button-successfully   style=\"position: relative; margin-bottom: 50px;\"></storybook-button-successfully>\r\n          </div>\r\n\r\n          <div class=\"login-button\">\r\n              <div *ngIf=\"!status.isRepSuccess && storyInputsInOrder.length === 0\">empty</div>\r\n              <div *ngIf=\"!status.isRepSuccess\">\r\n                <storybook-input\r\n                  [storyInput]=\"storyInputsInOrder[0]\"\r\n                  (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                  (onPinInput)=\"onPinInput.emit($event)\"\r\n                  [currentForm]=\"mForm\">\r\n                </storybook-input>\r\n\r\n                <div *ngIf=\"!status.isRepSuccess\" class=\"thematic-break\"></div>\r\n\r\n                <storybook-input\r\n                  [storyInput]=\"storyInputsInOrder[1]\"\r\n                  (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                  (onPinInput)=\"onPinInput.emit($event)\"\r\n                  [currentForm]=\"mForm\"\r\n                  [conditionList]=\"['minLength','requiresUppercase','requiresLowercase','requiresDigit','requiresSpecialChars']\">\r\n                </storybook-input>\r\n\r\n\r\n                <div></div>\r\n                <storybook-input\r\n                  [storyInput]=\"storyInputsInOrder[2]\"\r\n                  (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                  (onPinInput)=\"onPinInput.emit($event)\"\r\n                  [currentForm]=\"mForm\"\r\n                  [conditionList]=\"['minLength','requiresUppercase','requiresLowercase','requiresDigit','requiresSpecialChars']\">\r\n                </storybook-input>\r\n              </div>\r\n\r\n              <br>\r\n                <div class=\"login-failed-message\" role=\"alert\" >\r\n                  <table *ngIf=\"this.status?.isRepFailed\">\r\n                    <tr>{{ this.status?.repErrorMessage['message'] | apiErrorMessage: param }}</tr>\r\n                    <tr  *ngFor=\"let message of this.status?.repErrorMessage.data?.confirmPassword.split(', ')\">{{message.trim() | apiErrorMessage: param }}</tr>\r\n                  </table>\r\n                </div>\r\n              <storybook-button-continue [label]=\"status.isRepSuccess ? 'Continue' :'Change Password'\" size=\"small\"\r\n                                         label=\"Continue\" type=\"button\" (click)=\"onSubmit()\" >\r\n              </storybook-button-continue>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "ResetPassForm2Component",
            "id": "component-ResetPassForm2Component-6a6ec1484b46419fd4a8008ea584343701baf4c0f286c81ae9949e25e003d5ab6858c9c33bd0738a32678fceecd48009af1ed89899005474f2ac85cee2392c85",
            "file": "src/app/login2/login-main/reset-pass-form2/reset-pass-form2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "reset-pass-form2",
            "styleUrls": [
                "./reset-pass-form2.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-pass-form2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiResponse",
                    "defaultValue": "{ message: '', error: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TSVData",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ResetPassForm2Component>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "empList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "errorFieldSubmitted",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "forgotPassForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "defaultValue": "{\r\n    isVerSuccess: false,\r\n    isRecSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryInput[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "generateNewCodeFor2SV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Inject, OnInit, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nexport interface TSVData {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'reset-pass-form2',\r\n  templateUrl: './reset-pass-form2.component.html',\r\n  styleUrls: ['./reset-pass-form2.component.css']\r\n})\r\nexport default class ResetPassForm2Component implements OnInit {\r\n  forgotPassForm: FormGroup;\r\n  status = {\r\n    isVerSuccess: false,\r\n    isRecSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }\r\n\r\n  public isLoading = false;\r\n  submitted = false;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n  ];\r\n\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private tokenStorage: TokenStorageService,\r\n              public dialogRef: MatDialogRef<ResetPassForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: TSVData) {\r\n    this.forgotPassForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //this.generateNewCodeFor2SV();\r\n  }\r\n\r\n  onSubmit(code: string): void {\r\n    if (this.status.isVerSuccess) {\r\n      this.dialogRef.close({message: 'Successful verification', data: this.data});\r\n    }\r\n    this.submitted = true;\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.data.username = username;\r\n\r\n    this.isLoading = true;\r\n    this.authService.TSV_ValidateCodeByName(username, this.data.email, code).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.tokenStorage.savePinCodeToken(data.pinCodeToken);\r\n        this.status.isVerSuccess = true;\r\n        this.status.isVerFailed = false;\r\n        this.errorFieldSubmitted = {} ;\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful verification';\r\n      },\r\n      error => {\r\n        const errorResponse = error.error;\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Verification error';\r\n        this.status.verErrorMessage = error.error.message;\r\n        this.status.isVerFailed = true;\r\n        this.errorFieldSubmitted = errorResponse.message;\r\n        console.log(errorResponse);\r\n        this.isLoading = false;\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Validate Code Request Finished\");}\r\n    );\r\n  }\r\n\r\n  generateNewCodeFor2SV() {\r\n    const { username } = this.forgotPassForm.getRawValue();\r\n    this.isLoading = true;\r\n    this.authService.ResetPassByMail(username, this.data.email).subscribe(\r\n      data => {\r\n          if (data.message == \"Password successfully sent to email!\") {\r\n            this.status.isRecSuccess = true;\r\n            this.status.isVerSuccess = true;\r\n          }\r\n        console.log(\"Generating Temporary Password Succeeded\", data);\r\n      },\r\n      error => {\r\n        this.isLoading = false;\r\n        console.log(\"Error: Can't generate temporary password for user \");\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Sending generation temporary password request complete\");\r\n      });\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.forgotPassForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.forgotPassForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.forgotPassForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.forgotPassForm.get('phone')!;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n.fa,.fab,.fad,.fal,.far,.fas {\r\n  -moz-osx-font-smoothing:grayscale;\r\n  -webkit-font-smoothing:antialiased;\r\n  display:inline-block;\r\n  font-style:normal;\r\n  font-variant:normal;\r\n  text-rendering:auto;line-height:1\r\n}\r\n\r\n.fa-lg {\r\n  font-size:1.33333em;\r\n  line-height:.75em;\r\n  vertical-align:-.0667em\r\n}\r\n/**/\r\n.fa-xs {font-size:.75em}\r\n\r\n.fa-sm {font-size:.875em}\r\n\r\n.fa-1x {font-size:1em}\r\n\r\n.fa-2x {font-size:2em}\r\n\r\n.fa-3x {font-size:3em}\r\n\r\n.fa-4x {font-size:4em}\r\n\r\n.fa-5x {font-size:5em}\r\n\r\n.fa-6x {font-size:6em}\r\n\r\n.fa-7x {font-size:7em}\r\n\r\n.fa-8x {font-size:8em}\r\n\r\n.fa-9x {font-size:9em}\r\n\r\n.fa-10x {font-size:10em}\r\n\r\n.fa-fw {text-align:center;width:1.25em}\r\n\r\n.fa-ul {list-style-type:none;margin-left:2.5em;padding-left:0}\r\n\r\n.fa-ul>li {position:relative}\r\n\r\n.fa-li {left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}\r\n\r\n.fa-border {border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\n.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left {\r\n  margin-right:.3em\r\n}\r\n\r\n.input-with-pre-icon label {left:36px;right:initial}\r\n\r\n\r\n.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right {\r\n  margin-left:.3em\r\n}\r\n\r\n.fa-spin {\r\n  -webkit-animation:fa-spin 2s linear infinite;\r\n  animation:fa-spin 2s linear infinite\r\n}\r\n\r\n\r\n\r\n.fa,.far,.fas {\r\n  font-family: \"Font Awesome 5 Free\", serif\r\n}\r\n\r\n.fa,.fas {\r\n  font-weight:900\r\n}\r\n\r\n\r\n.v-btn__content {\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1 0 auto;\r\n  justify-content: inherit;\r\n  line-height: normal;\r\n  position: relative;\r\n  transition: inherit;\r\n}\r\n\r\n.form-outline .form-control:focus ~ .form-label, .form-outline .form-control.active ~ .form-label {\r\n  transform: translateY(-1.5rem) translateY(0.1rem) scale(0.8);\r\n}\r\n\r\n\r\n/*\r\n.form-outline .form-control ~ .form-notch div {\r\n  pointer-events: none;\r\n  border: 1px solid;\r\n  border-color: #39c0ed;\r\n}\r\n\r\n*/\r\n.v-btn__content {\r\n  letter-spacing: normal;\r\n}\r\n\r\nbody#registerFormDialogContainer {\r\n  background: #0000ff00;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./reset-pass-form2.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ResetPassForm2Component>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "TSVData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ResetPassForm2Component>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "TSVData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 111
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 115
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 119
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 123
                    }
                }
            },
            "templateData": "\r\n<storybook-forgot-pass-form\r\n  [status]=\"status\"\r\n  [isLoading]=\"isLoading\"\r\n  [isVerSuccess]=\"status.isVerSuccess\"\r\n  [isRecSuccess]=\"status.isRecSuccess\"\r\n  [storyInputs]=\"storyInputsInOrder\"\r\n  [mForm]=\"forgotPassForm\"\r\n  (sendVerificationReq)=\"onSubmit($event)\"\r\n  (generateNewCodeFor2SV)=\"generateNewCodeFor2SV()\"\r\n  (clickXButton)=\"this.dialogRef.close({message: 'xbutton'})\">\r\n</storybook-forgot-pass-form>\r\n"
        },
        {
            "name": "ResetPassFormComponent",
            "id": "component-ResetPassFormComponent-f7bcdd1354f912fe10b3b9c24ffae360fb8f7afee531a2f4f3ada0fde56ea052343715da67b985af96fca49df0400d21469b4d11b695a2ecd70a021e50f2c2fa",
            "file": "src/stories/forms/reset-pass-form/reset-pass-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-reset-pass-form",
            "styleUrls": [
                "./reset-pass-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-pass-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRecSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isVerSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mForm",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 127,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "storyInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "StoryInput[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickXButton",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "generateNewCodeFor2SV",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "sendVerificationReq",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "appDynamicComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicCompDirective",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DynamicCompDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "changeLog",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "code",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "codeInputComponentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "codeLength",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "formButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formButton', {static: false}"
                        }
                    ]
                },
                {
                    "name": "formButtonClick",
                    "defaultValue": "'generateNewCodeFor2SV.emit()'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "formButtonLabel",
                    "defaultValue": "'Send me a Verification Code'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "formFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formFields', {static: false}"
                        }
                    ]
                },
                {
                    "name": "formHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formHeader', {static: false}"
                        }
                    ]
                },
                {
                    "name": "param",
                    "defaultValue": "{language: 'login-main'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "popoverOptions",
                    "defaultValue": "{\r\n    content: CodeInputComponent\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdComponent",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "secondHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'secondHeader', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "movToVerifyState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCodeChanged",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCodeCompleted",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component, ComponentFactoryResolver, ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges, Type,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {CodeInputComponent} from \"../../inputs/code-input/code-input.component\";\r\nimport {DynamicCompDirective} from \"../../directive/dynamic-comp.directive\";\r\nimport {PopoverOptions} from \"../../directive/popover.interface\";\r\n\r\n\r\nexport interface AdComponent {\r\n  content: any;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-reset-pass-form',\r\n  templateUrl: './reset-pass-form.component.html',\r\n  styleUrls: ['./reset-pass-form.component.scss'],\r\n})\r\nexport default class ResetPassFormComponent implements OnInit {\r\n\r\n  codeLength: number = 4;\r\n  code: string = '';\r\n  param = {language: 'login-main'};\r\n  formButtonLabel: string = 'Send me a Verification Code';\r\n  formButtonClick: string = 'generateNewCodeFor2SV.emit()';\r\n\r\n  @Input() status?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() sendVerificationReq: EventEmitter<string> = new EventEmitter();\r\n\r\n  @Output() generateNewCodeFor2SV: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild(DynamicCompDirective, {static: true}) appDynamicComp!: DynamicCompDirective;\r\n  //@ViewChild('codeInput') codeInput!: CodeInputComponent;\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild('secondHeader', { static: false }) secondHeader?: ElementRef;\r\n\r\n  @ViewChild('formHeader', { static: false }) formHeader?: ElementRef;\r\n\r\n  @ViewChild('formFields', { static: false }) formFields?: ElementRef;\r\n\r\n  @ViewChild('formButton', { static: false }) formButton?: ElementRef;\r\n\r\n  @Input() isVerSuccess = false;\r\n\r\n  @Input() isRecSuccess = false;\r\n\r\n  constructor(private renderer: Renderer2,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  changeLog: string[] = [];\r\n\r\n\r\n  @Input()\r\n  set storyInputs(arr: StoryInput[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'USER NAME'),\r\n      ...arr.filter(t => t.state !== 'USER NAME'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n    this.storyInputsInOrder = filteredTasks.filter(\r\n      t => t.type === 'password' || t.state === 'USER NAME'\r\n    );\r\n  }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.isRecSuccess) {\r\n      if (!changes.isRecSuccess.previousValue &&  changes.isRecSuccess.currentValue) {\r\n        console.warn('Identify Request Succeeded!');\r\n        this.movToVerifyState();\r\n      }\r\n    }\r\n\r\n    if (changes.isVerSuccess) {\r\n      if (!changes.isVerSuccess.previousValue &&  changes.isVerSuccess.currentValue) {\r\n        console.warn('Verify Request Succeeded!');\r\n        //this.changeFormToPinCodeState();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  onSubmit(): void {\r\n    if (!this.isRecSuccess) {this.generateNewCodeFor2SV.emit();}\r\n    else if (!this.isVerSuccess) {\r\n      console.info('Send Verification Request!');\r\n      this.sendVerificationReq.emit(this.code);\r\n      if (!this.status.isVerSuccess) {this.codeInputComponentRef?.instance.reset();/*this.codeInput.reset();*/}\r\n    }\r\n    else {}\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of Inputs\r\n   */\r\n  storyInputsInOrder: StoryInput[] = [];\r\n\r\n  @Input() mForm: FormGroup = new FormGroup({});\r\n\r\n  // this called every time when user changed the code\r\n  onCodeChanged(code: string) {\r\n    this.code = code;\r\n    //console.log('code entered: '+ this.code);\r\n  }\r\n\r\n  // this called only if user entered full code\r\n  onCodeCompleted(code: string) {\r\n    //\r\n  }\r\n\r\n  popoverOptions: AdComponent = {\r\n    content: CodeInputComponent\r\n  };\r\n\r\n  codeInputComponentRef?: ComponentRef<any>;\r\n\r\n  movToVerifyState(){\r\n    this.renderer.setProperty(this.secondHeader?.nativeElement ,'innerHTML',\r\n      'Please enter the Verification Code<br>you received in your mail:');\r\n\r\n    this.renderer.setProperty(this.formHeader?.nativeElement ,'innerHTML',\r\n      'Change Password');\r\n\r\n\r\n    this.formButtonLabel = 'Continue';\r\n\r\n    this.formButtonClick = '\"onSubmit()\"';\r\n\r\n    //this.renderer.setAttribute(this.formButton.  nativeElement, 'onClick', '\"onSubmit()\"' );\r\n\r\n    /*this.renderer.setProperty(this.formFields?.nativeElement ,'innerHTML',\r\n      '<code-input #codeInput [codeLength]=\"codeLength\" (codeChanged)=\"onCodeChanged($event)\" (codeCompleted)=\"onCodeCompleted($event)\"> </code-input>'\r\n    );*/\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(<Type<any>>this.popoverOptions.content);\r\n    const viewContainerRef = this.appDynamicComp.viewContainerRef;\r\n    viewContainerRef.clear();\r\n    this.codeInputComponentRef = viewContainerRef.createComponent(componentFactory);\r\n    this.codeInputComponentRef.instance.codeChanged.subscribe(($event: string) => {\r\n      this.onCodeChanged($event);\r\n      console.log(\"Code Changed\");\r\n    });\r\n\r\n\r\n    /*\r\n    this.renderer.setAttribute(this.formButton?.nativeElement, 'label', 'Continue' );\r\n\r\n\r\n\r\n    const viewContainerRef = this.appDynamicComp.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const componentRef = viewContainerRef.createComponent<CodeInputComponent>(this.popover.content);\r\n    componentRef.instance.reset()\r\n*/\r\n    //this.codeInput = this.formFields?.nativeElement.codeInput.getElement();\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: relative;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n.form {\r\n  position: absolute;\r\n  left: 3.18%;\r\n  right: 14.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 10px 10px;\r\n}\r\n.col-md-12{\r\n  position: center;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n\r\n#button-successfully {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  margin-top: 50px;\r\n  margin-bottom: 100px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: 50px;\r\n}\r\n\r\nstorybook-button-successfully {\r\n  position: relative;\r\n  left: 140px;\r\n\r\n}\r\n\r\n#button-ex {\r\n  position: absolute;\r\n  top: 48px;\r\n  left: 99px;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0;\r\n}\r\n\r\n\r\n.card {\r\n  position: absolute;\r\n  left: 5.18%;\r\n  right: 4.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n.form-header {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  width: 447px;\r\n  height: 82px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n\r\n}\r\n\r\n#code-input {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n}\r\n\r\n\r\n.login-button {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n//top: calc(50% - 101.16px/2 - 171.58px);\r\n  top: 0;\r\n}\r\n\r\n\r\n.resend-verification {\r\n  /* D UnderLine Regular */\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n.second-header-text {\r\n  /* D UnderLine Regular */\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n\r\n\r\n.login-failed-message {\r\n\r\n  /* D Regular */\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  align-items: start;\r\n  letter-spacing: -0.011em;\r\n\r\n  /* Red */\r\n\r\n  color: #FA4F4F;\r\n\r\n}\r\n\r\ncode-input {\r\n  position: absolute;\r\n  width: 445px;\r\n  height: 102px;\r\n\r\n  /*left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 221.58px);*/\r\n  align-items: start;/**/\r\n}\r\n\r\n.second-header {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 82px;\r\n\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 51.16px/2 - 221.58px);\r\n  align-items: start;/**/\r\n}\r\n\r\n\r\n.Vector2 {\r\n  position: static;\r\n  box-sizing: border-box;\r\n  margin-right: 10px;\r\n  margin-left: 11px;\r\n\r\n  width: 95px;\r\n  height: 95px;\r\n  /*left: 1px;\r\n  right: 0.03%;*/\r\n  top: 2px;\r\n  /*bottom: 0;*/\r\n\r\n  /* Blue */\r\n  border: 2px solid #3D8ECF;\r\n  border-radius: 10px;\r\n  display: inline-block;\r\n  vertical-align: middle\r\n}\r\n",
                    "styleUrl": "./reset-pass-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "storyInputs": {
                    "name": "storyInputs",
                    "setSignature": {
                        "name": "storyInputs",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 77,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "StoryInput[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\"  (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div class=\"form-header\">\r\n      <a #formHeader>Forgot Password?</a>\r\n    </div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n    <form name=\"currentForm\" [formGroup]=\"mForm\">\r\n      <div  class=\"Vector\">\r\n\r\n        <br>\r\n        <br>\r\n        <br>\r\n\r\n        <div class=\"second-header\" style=\"top: 82px;\">\r\n          <a class=\"second-header-text\"  #secondHeader href=\"#/login\" style=\"position: relative; top: 10px; text-align: left\">\r\n            {{ 'Please enter your User Name:'}}<br>\r\n          </a>\r\n        </div>\r\n\r\n\r\n        <div #formFields id=\"button-successfully\" style=\"\">\r\n          <storybook-button-successfully  *ngIf=\"status.isVerSuccess\"  style=\"position: relative; top: 15px\"></storybook-button-successfully>\r\n          <ng-template  *ngIf=\"status.isVerSuccess\"  appDynamicComp>\r\n\r\n          </ng-template>\r\n\r\n          <storybook-input *ngIf=\"!status.isRecSuccess\"\r\n                           [storyInput]=\"storyInputsInOrder[0]\"\r\n                           (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n                           (onPinInput)=\"onPinInput.emit($event)\"\r\n                           [currentForm]=\"mForm\">\r\n          </storybook-input>\r\n          <!--code-input *ngIf=\"!status.isVerSuccess\"\r\n                      #codeInput\r\n                      [codeLength]=\"codeLength\"\r\n                      (codeChanged)=\"onCodeChanged($event)\"\r\n                      (codeCompleted)=\"onCodeCompleted($event)\">\r\n          </code-input-->\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div class=\"login-button\">\r\n          <div class=\"login-failed-message\" role=\"alert\" style=\"position: relative; top: 15px\">\r\n            <table *ngIf=\"this.status?.isVerFailed\">\r\n              <tr>{{ this.status?.verErrorMessage.toString()  | apiErrorMessage: param }}</tr>\r\n              <tr  *ngFor=\"let message of this.status?.verErrorMessage.data?.confirmPassword.split(', ')\">{{message.trim() | apiErrorMessage: param }}</tr>\r\n            </table>\r\n          </div>\r\n\r\n          <storybook-button-continue #formButton size=\"small\" [label]=\"this.formButtonLabel\" type=\"button\"\r\n                                     (onClick)=\"this.onSubmit()\" style=\"position: relative; top: 15px\"></storybook-button-continue>\r\n\r\n\r\n          <a *ngIf=\"status.isRecSuccess && !status.isVerSuccess\" class=\"resend-verification\"  (click)=\"generateNewCodeFor2SV.emit()\" style=\"position: relative; top: 40px;\">\r\n            {{ 'resend the verification code'  }}\r\n          </a>\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "Spinner1Component",
            "id": "component-Spinner1Component-93e9e7f2ec7439df4c2cfad4dbf0d9812455450bc7b0a6d74a361856e01a8c10a8fc3fe17a23efa7e9dad7c88dd615b0d205104dc1284b72859738c055b75e7a",
            "file": "src/stories/spinners/spinner1/spinner1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-spinner1",
            "styleUrls": [
                "./spinner1.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'accGateButton2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 579,
                            "end": 592,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 580,
                                "end": 588,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the login-main?\n",
                    "description": "<p>Is this the principal call to action on the login-main?</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-spinner1',\n  templateUrl: './spinner1.component.html',\n  styleUrls: ['./spinner1.component.css']\n})\nexport class Spinner1Component {\n  /**\n   * Is this the principal call to action on the login-main?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'accGateButton2';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button-ex--primary' : 'storybook-button-ex--secondary';\n\n    return ['storybook-button-ex', `storybook-button-ex--${this.size}`, mode];\n  }\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button.Vector {\r\n  position: absolute;\r\n  width: 70px;\r\n  height: 70px;\r\n  padding: 0;\r\n  margin: 0;\r\n  background: rgba(255, 255, 255, 0);\r\n}\r\n\r\nimg.Ex-Icon {\r\n  position: absolute;\r\n  top: 1px;\r\n  right: 1px;\r\n  width: 69px;\r\n  height: 69px;\r\n  object-fit: contain;\r\n  box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);\r\n}\r\n",
                    "styleUrl": "./spinner1.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "\n<button class=\"Vector\" (click)=\"onClick.emit($event)\" >\n\n    <img  [ngClass]=\"classes\" [ngStyle]=\"{ 'background-color': backgroundColor }\"\n       src=\"./assets/images/Spinner1.gif\"\n           class=\"Ex-Icon\"  alt=\"Ex-Icon\"/>\n\n</button>\n\n"
        },
        {
            "name": "StoryInputComponent",
            "id": "component-StoryInputComponent-c397e4cd1940e9a73068ce4006013135087918cff55397ff58e25051cbba233af1f4d533565159dc6b11b8b782100f685bb6a043362efd78ffed9dfef2fa800b",
            "file": "src/stories/inputs/input/story-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-input",
            "styleUrls": [
                "./story-input.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./story-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "conditionList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "currentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "hideInput",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "storyInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "StoryInput",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveInput",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinInput",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isPasswordTextHide",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isStrength",
                    "defaultValue": "(this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "popover",
                    "defaultValue": "{\r\n    content: ActionInputComponent\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopoverOptions",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorHeader",
                    "args": [
                        {
                            "name": "controllerType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "controllerType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorList",
                    "args": [
                        {
                            "name": "conditionList",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActionInput[]",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "conditionList",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
                    "description": "<p>Component method to trigger the onArchive event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6339,
                                "end": 6341,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6333,
                                "end": 6338,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onPin event\n",
                    "description": "<p>Component method to trigger the onPin event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6192,
                                "end": 6194,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6186,
                                "end": 6191,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "showPassChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, HostBinding, Inject, Injector, Input, OnInit, Output} from '@angular/core';\r\nimport { StoryInput } from './story-input.model'\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormGroup,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport {PopoverOptions} from \"src/stories/directive/popover.interface\";\r\nimport {ActionInputComponent} from \"src/stories/actions/action-input/action-input.component\";\r\nimport {ActionInput} from \"src/stories/actions/action-input/action-input.interface\";\r\n\r\n\r\nexport interface GroupForm {\r\n  username:  FormControl,\r\n  password:  FormControl,\r\n}\r\n\r\nexport interface ValidationForm {\r\n  validationForm2: GroupForm,\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-input',\r\n  templateUrl: './story-input.component.html',\r\n  styleUrls: ['./story-input.scss']\r\n})\r\nexport class StoryInputComponent implements OnInit{\r\n\r\n\r\n\r\n  popover: PopoverOptions = {\r\n    content: ActionInputComponent\r\n  };\r\n\r\n  @Input() storyInput!: StoryInput;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinInput = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveInput = new EventEmitter<Event>();\r\n\r\n\r\n  @Input()\r\n  hideInput = false;\r\n\r\n  showPassChange(): void {\r\n    this.storyInput.type = (this.storyInput?.type == 'password' ? 'text' : 'password')\r\n  }\r\n\r\n  @Input() currentForm!: FormGroup;\r\n\r\n  private isStrength: string = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n  public isPasswordTextHide: boolean = false;\r\n\r\n  @Input() conditionList: string[] = [];\r\n  /*registerForm = new FormGroup({\r\n    username: new FormControl('', Validators.minLength(2)),\r\n    password: new FormControl('zaqwsx', Validators.minLength(2))\r\n  });\r\n\r\n\r\n  get username2(): FormControl  {\r\n    return this.currentForm?.controls.username.get();\r\n  }*/\r\n\r\n  get username(): AbstractControl {\r\n    return this.currentForm.get('username')!;\r\n  }\r\n\r\n\r\n  get password(): AbstractControl {\r\n    return this.currentForm.get('password')!;\r\n  }\r\n\r\n  public getErrorHeader(controllerType: string): string {\r\n    let header: string = '';\r\n\r\n    switch (controllerType) {\r\n      case \"phone\":\r\n        header = 'Must contain phone:';\r\n        break;\r\n\r\n      case \"email\":\r\n        header = 'Must contain email:';\r\n        break;\r\n\r\n      case \"oldPassword\":\r\n      case \"confirmPassword\":\r\n      case \"password\":\r\n        header = 'The password must contain:';\r\n        break;\r\n\r\n      default:\r\n        header = controllerType;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  public getErrorList(conditionList: String[]): ActionInput[] {\r\n\r\n    let passConditions: string[] = [];\r\n\r\n\r\n    var actionInputs: ActionInput[] = [];\r\n\r\n    conditionList.forEach(condition => {\r\n      switch (condition) {\r\n        case \"minLength\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"minLengthValid\",\r\n            \"presentingMessage\": ' A minimum of 8 characters',\r\n            \"isFulfilled\": !(this.minLengthValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresUppercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresUppercaseValid\",\r\n            \"presentingMessage\": ' At least 1 Uppercase letters',\r\n            \"isFulfilled\": !(this.requiresUppercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresLowercase\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresLowercaseValid\",\r\n            \"presentingMessage\": ' At least 1 lowercase letters',\r\n            \"isFulfilled\": !(this.requiresLowercaseValid || !(this.formControler.value.length > 0)),\r\n          })\r\n          break;\r\n\r\n        case \"requiresDigit\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresDigitValid\",\r\n            \"presentingMessage\": ' A number',\r\n            \"isFulfilled\": !(this.requiresDigitValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresSpecialChars\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresSpecialCharsValid\",\r\n            \"presentingMessage\": ' At least 1 special character',\r\n            \"isFulfilled\": !(this.requiresSpecialCharsValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresEmail\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresEmailValid\",\r\n            \"presentingMessage\": ' A well-formed email address',\r\n            \"isFulfilled\": !(this.requiresEmailValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n\r\n        case \"requiresPhone\":\r\n          actionInputs.push({\r\n            \"conditionName\": \"requiresPhoneValid\",\r\n            \"presentingMessage\": ' A well-formed phone number',\r\n            \"isFulfilled\": !(this.requiresPhoneValid || !(this.formControler.value.length > 0))\r\n          })\r\n          break;\r\n      }\r\n    });\r\n\r\n\r\n    return actionInputs;\r\n  }\r\n\r\n  get passwordValid() {\r\n    return this.formControler.errors === null;\r\n  }\r\n\r\n  get requiredValid() {\r\n    return this.formControler.hasError(\"required\");\r\n  }\r\n\r\n  get minLengthValid() {\r\n    return this.formControler.hasError(\"minlength\");\r\n  }\r\n\r\n  get requiresDigitValid() {\r\n    return this.formControler.hasError(\"requiresDigit\");\r\n  }\r\n\r\n  get requiresUppercaseValid() {\r\n    return this.formControler.hasError(\"requiresUppercase\");\r\n  }\r\n\r\n  get requiresLowercaseValid() {\r\n    return this.formControler.hasError(\"requiresLowercase\") ;\r\n  }\r\n\r\n  get requiresSpecialCharsValid() {\r\n    return this.formControler.hasError(\"requiresSpecialChars\");\r\n  }\r\n\r\n  get requiresEmailValid() {\r\n    return this.formControler.hasError(\"email\");\r\n  }\r\n\r\n  get requiresPhoneValid() {\r\n    return this.formControler.hasError(\"requiresPhoneChars\");\r\n  }\r\n\r\n  get formControler(): AbstractControl {\r\n    return this.currentForm.get(this.storyInput?.title.toString())!;\r\n  }\r\n\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinInput.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveInput.emit(id);\r\n  }\r\n\r\n  public get classes(): string[] {\r\n    this.isStrength = (this.storyInput?.state === 'NEW PASSWORD') ? 'storybook-input--addStrength' : 'storybook-input--clearStrength';\r\n\r\n    return ['storybook-input-strength',  this.isStrength];\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.isPasswordTextHide = this.storyInput?.state.includes('PASSWORD');\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n$tottal-height: 160px !default;\r\n\r\n.main {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 102px;\r\n  top: 0;\r\n  /*left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n  margin-bottom: 20px;*/\r\n  background-color: rgba(255, 255, 255, 0);\r\n\r\n}\r\n\r\n#storybook-pass {\r\n  border: 1px solid rgba(255, 0, 0, 0.11);\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n#parent1 {\r\n  position: sticky;\r\n  top: 1px;\r\n  height: 100px;\r\n  width: 100%;\r\n  /*border: 1px solid #c0077f;*/\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n#parent2 {\r\n  position: absolute;\r\n  height: 45px;\r\n  width: 100%;\r\n  margin-top: 3px;\r\n  /*margin-bottom: 3px;*/\r\n  bottom: 0;\r\n  /*border: 1px solid #8AC007;\r\n  background-color: rgba(255, 255, 255, 0);*/\r\n}\r\n\r\n#parent3 {\r\n  position: relative;\r\n  width: 100%;\r\n  /*height: 160px ;\r\n   border: 1px solid #072cc0;\r\nmargin-bottom: 3px;*/\r\n  /*background-color: rgba(255, 255, 255, 0);*/\r\n}\r\n\r\n/*\r\nspan.absolute {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 28px;\r\n  bottom: 0;\r\n  border: 1px solid #8AC007;\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n*/\r\n\r\n\r\n.user-name {\r\n  position: absolute;\r\n  width: 300px;\r\n  height: 35px;\r\n  left: 0%;\r\n  right: 82.7%;\r\n  top: 10%;\r\n  bottom: 68.37%;\r\n  /* identical to box height, or 223% */\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: -0.011em;\r\n  text-transform: uppercase;\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n/* D Caps Regular */\r\n.D-Caps-Regular {\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 31px;\r\n}\r\n\r\n\r\nimg.icon-input {\r\n  position: absolute;\r\n  width: 22.72px;\r\n  height: 26.74px;\r\n  left: 17px;\r\n  bottom: 7px;\r\n\r\n  transform: rotate(0deg);\r\n  background-position: bottom;\r\n}\r\n\r\n\r\n.DanK203 {\r\n  position: relative;\r\n  height: 25px;\r\n  width: 228px;\r\n  left: 35px;\r\n  bottom: -5px;\r\n  margin: 4.2px 1px 2.8px 20.3px;\r\n\r\n  /* D Example Italic */\r\n  object-fit: contain;\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 48%;\r\n  /* or 65% */\r\n\r\n  box-shadow: none;\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: -0.19px;\r\n\r\n  border-color: rgba(255, 255, 255, 0);\r\n  color: #000000;\r\n}\r\n\r\n\r\n.icon-input-showpass {\r\n  position: absolute;\r\n  width: 33px;\r\n  height: 20px;\r\n  right: 10px;\r\n  bottom: 11px;\r\n  padding: 0px;\r\n  margin: 0;\r\n  border-bottom-width: 0px;\r\n  background-color: rgba(45, 148, 55, 0);\r\n}\r\n\r\nimg.icon-input-showpass {\r\n  position: absolute;\r\n  bottom: 1px;\r\n  right: 1px;\r\n  width: inherit;\r\n  height: inherit;\r\n  padding: 0px;\r\n  margin: 0px;\r\n  /*object-fit: contain;\r\n  box-shadow: 0 1px 1px 0 rgba(61, 142, 207, 0.15);*/\r\n\r\n}\r\n\r\ninput:focus {\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\ninput:focus-visible {\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\ninput::placeholder {\r\n  color: #C8C8C8;\r\n}\r\n\r\ninput[type=password]:focus {\r\n  color: #000000;\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\ninput[type=tel]:focus {\r\n  color: #000000;\r\n  background: #99999900;\r\n  box-shadow: 0 0 5px #99999900;\r\n  border-top-color: #99999900;\r\n  border-left-color: #99999900;\r\n  border-right-color: #99999900;\r\n}\r\n\r\n.Vector2 {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n\r\n\r\n  left: 0.2%;\r\n  right: 0.03%;\r\n  top: 42.66%;\r\n  bottom: 0;\r\n\r\n  /* Blue */\r\n  border: 2px solid #3D8ECF;\r\n  border-radius: 10px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.Button-App-Label {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 33px;\r\n  horiz-align: center;\r\n\r\n}\r\n\r\n.storybook-input--addStrength {\r\n    height: 160px;\r\n\r\n\r\n\r\n}\r\n\r\n.storybook-input--clearStrength {\r\n\r\n\r\n    height: 110px;\r\n\r\n\r\n}\r\n",
                    "styleUrl": "./story-input.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 75
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 80
                    }
                },
                "passwordValid": {
                    "name": "passwordValid",
                    "getSignature": {
                        "name": "passwordValid",
                        "type": "",
                        "returnType": "",
                        "line": 180
                    }
                },
                "requiredValid": {
                    "name": "requiredValid",
                    "getSignature": {
                        "name": "requiredValid",
                        "type": "",
                        "returnType": "",
                        "line": 184
                    }
                },
                "minLengthValid": {
                    "name": "minLengthValid",
                    "getSignature": {
                        "name": "minLengthValid",
                        "type": "",
                        "returnType": "",
                        "line": 188
                    }
                },
                "requiresDigitValid": {
                    "name": "requiresDigitValid",
                    "getSignature": {
                        "name": "requiresDigitValid",
                        "type": "",
                        "returnType": "",
                        "line": 192
                    }
                },
                "requiresUppercaseValid": {
                    "name": "requiresUppercaseValid",
                    "getSignature": {
                        "name": "requiresUppercaseValid",
                        "type": "",
                        "returnType": "",
                        "line": 196
                    }
                },
                "requiresLowercaseValid": {
                    "name": "requiresLowercaseValid",
                    "getSignature": {
                        "name": "requiresLowercaseValid",
                        "type": "",
                        "returnType": "",
                        "line": 200
                    }
                },
                "requiresSpecialCharsValid": {
                    "name": "requiresSpecialCharsValid",
                    "getSignature": {
                        "name": "requiresSpecialCharsValid",
                        "type": "",
                        "returnType": "",
                        "line": 204
                    }
                },
                "requiresEmailValid": {
                    "name": "requiresEmailValid",
                    "getSignature": {
                        "name": "requiresEmailValid",
                        "type": "",
                        "returnType": "",
                        "line": 208
                    }
                },
                "requiresPhoneValid": {
                    "name": "requiresPhoneValid",
                    "getSignature": {
                        "name": "requiresPhoneValid",
                        "type": "",
                        "returnType": "",
                        "line": 212
                    }
                },
                "formControler": {
                    "name": "formControler",
                    "getSignature": {
                        "name": "formControler",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 216
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 236
                    }
                }
            },
            "templateData": "<div id=\"parent3\"  [hidden]=\"storyInput?.hide\" [ngClass]=\"classes\"  >\r\n<div id=\"parent1\" >\r\n  <div class=\"main\"  [formGroup]=\"this.currentForm\">\r\n  <div>\r\n  <a class=\"user-name D-Caps-Regular\">{{storyInput?.state}}</a>\r\n\r\n  <br>\r\n  <label [attr.aria-label]=\"storyInput?.id + ''\" for=\"{{ storyInput?.title }}\" class=\"Vector2 \">\r\n    <img src=\"{{ storyInput?.icon }}\" class=\"icon-input\" alt=\"icon input userName\"  name=\"{{ storyInput?.title }}\" />\r\n    <div [inputPopover] = \"this.popover\" [data]=\"this.getErrorList(this.conditionList)\" [header]=\"this.getErrorHeader(this.storyInput.title)\">\r\n    <input\r\n      type=\"{{storyInput?.type}}\"\r\n      id=\"{{ storyInput?.id }}\"\r\n      class=\"DanK203\"\r\n      name=\"{{storyInput?.title}}\"\r\n      formControlName=\"{{storyInput?.title}}\"\r\n      placeholder=\"{{storyInput?.placeholder}}\"\r\n      required />\r\n    </div>\r\n\r\n    <button *ngIf=\"this.isPasswordTextHide\" class=\"icon-input-showpass\" type=\"button\" (click)=\"showPassChange()\">\r\n      <img src=\"./assets/images/EyeIcon.png\" class=\"icon-input-showpass\" alt=\"icon input type\" />\r\n\r\n    </button>\r\n\r\n\r\n\r\n  <br>\r\n\r\n  <span hidden [ngSwitch]=\"storyInput?.title\" class=\"D-Caps-Regular\"  style=\"line-height: 0\" >\r\n      <span  class=\"position-absolute\"  *ngIf=\"formControler?.invalid && (formControler?.dirty || formControler?.touched)\"  >\r\n          <span *ngSwitchCase=\"'username'\"><br>{{storyInput?.state}} is required!</span>\r\n          <span *ngSwitchCase=\"'password'\">\r\n            <br>\r\n            {{storyInput?.state}} is required!\r\n            <!--div *ngIf=\"password.errors.required\">Password is required</div>\r\n            <div *ngIf=\"password.errors.minlength\">Password must be at least 1 characters</div-->\r\n          </span>\r\n          <span *ngSwitchCase=\"'email'\"   ><br>{{storyInput?.state}} is required!</span>\r\n          <span *ngSwitchCase=\"'phone'\"   ><br>{{storyInput?.state}} is required!</span>\r\n\r\n      </span>\r\n      <div   *ngIf=\"formControler?.valid && (formControler?.dirty || formControler?.touched)\">\r\n        <div *ngSwitchCase=\"'username'\">ok!</div>\r\n        <div *ngSwitchCase=\"'password'\">ok!</div>\r\n        <div *ngSwitchCase=\"'email'\"   >ok!</div>\r\n        <div *ngSwitchCase=\"'phone'\"   >ok!</div>\r\n      </div>\r\n\r\n </span>\r\n\r\n  </label>\r\n\r\n\r\n\r\n  </div>\r\n  </div>\r\n</div>\r\n\r\n<div id=\"parent2\"  *ngIf=\"storyInput?.state === 'NEW PASSWORD'\">\r\n  <div class=\"absolute\">\r\n    <storybook-pass-strength id=\"pass-strength\" [passwordToCheck]=\"password?.value\" ></storybook-pass-strength>\r\n  </div>\r\n</div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "VerificationForm2Component",
            "id": "component-VerificationForm2Component-afa6865bc239ef13d10982b997d1805d1f4f6280dcf1a3d0bdee473776514e7a225b6f07a562741343ee4588d77a76fd13d6cd2a9f8a2e9ea10f84cd3ddffc57",
            "file": "src/app/login2/login-main/verification-form2/verification-form2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "verification-form2",
            "styleUrls": [
                "./verification-form2.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./verification-form2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiResponse",
                    "defaultValue": "{ message: '', error: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TSVData",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<VerificationForm2Component>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "empList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "errorFieldSubmitted",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'form', {static: false}"
                        }
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "defaultValue": "{\r\n    isVerSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "storyInputsInOrder",
                    "defaultValue": "[\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: true },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '5', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryInput[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "verificationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "generateNewCodeFor2SV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Inject, OnInit, Renderer2, ViewChild} from '@angular/core';\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {StoryInput} from \"src/stories/inputs/input/story-input.model\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {TokenStorageService} from \"../../../_services/token-storage.service\";\r\nexport interface TSVData {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'verification-form2',\r\n  templateUrl: './verification-form2.component.html',\r\n  styleUrls: ['./verification-form2.component.css']\r\n})\r\nexport default class VerificationForm2Component implements OnInit {\r\n  verificationForm: FormGroup;\r\n  status = {\r\n    isVerSuccess: false,\r\n    isVerFailed: false,\r\n    verErrorMessage: {},\r\n  }\r\n\r\n  public isLoading = false;\r\n  submitted = false;\r\n  empList: Array<String> = [];\r\n  apiResponse = { message: '', error: false };\r\n  @ViewChild('form', { static: false }) form?: ElementRef;\r\n  errorFieldSubmitted: any = {};\r\n  closeResult = '';\r\n\r\n  storyInputsInOrder: StoryInput[]  = [\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '2', title: 'username', state: 'USER NAME', icon: './assets/images/User2ldpi.png', type: 'text', placeholder: 'Ex.Saul Ramirez', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '3', title: 'password', state: 'PASSWORD', icon: './assets/images/LockIcon2ldpi.png', type: 'password', placeholder: 'your_password' , hide: true },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '5', title: 'phone', state: 'PHONE NUMBER FOR AUTHENTICATION', icon: './assets/images/Phone3ldpi.png', type: 'tel', placeholder: 'Ex: +972547762084', hide: false  },\r\n    {/*...mStoryInput.Default.args?.['storyInput'],*/ id: '4', title: 'email', state: 'EMAIL', icon: './assets/images/AtSign3ldpi.png', type: 'email', placeholder: 'Ex: abc@example.com', hide: false   },\r\n\r\n  ];\r\n\r\n  constructor(private authService: AuthService,\r\n              private renderer: Renderer2,\r\n              private tokenStorage: TokenStorageService,\r\n              public dialogRef: MatDialogRef<VerificationForm2Component>,\r\n              @Inject(MAT_DIALOG_DATA) public data: TSVData) {\r\n    this.verificationForm = new FormGroup({\r\n      username: new FormControl(data.username.toString(), Validators.minLength(2)),\r\n      email: new FormControl(data.email.toString(), Validators.email),\r\n    });/*Validators.pattern(new RegExp(\"[0-9 ]{12}\")*/\r\n    this.empList.push(\"admin\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.generateNewCodeFor2SV();\r\n  }\r\n\r\n  onSubmit(code: string): void {\r\n    this.submitted = true;\r\n\r\n    this.isLoading = true;\r\n    this.authService.TSV_ValidateCodeByName(this.data.username, this.data.email, code).subscribe(\r\n      data => {\r\n        console.log(data);\r\n        this.tokenStorage.savePinCodeToken(data.pinCodeToken);\r\n        this.status.isVerSuccess = true;\r\n        this.status.isVerFailed = false;\r\n        this.errorFieldSubmitted = {} ;\r\n        this.apiResponse.error = false;\r\n        this.apiResponse.message = 'Successful verification';\r\n        this.dialogRef.close('User Validate');\r\n      },\r\n      error => {\r\n        const errorResponse = error.error;\r\n        this.apiResponse.error = true;\r\n        this.apiResponse.message = 'Verification error';\r\n        this.status.verErrorMessage = error.error.message;\r\n        this.status.isVerFailed = true;\r\n        this.errorFieldSubmitted = errorResponse.message;\r\n        console.log(errorResponse);\r\n        this.isLoading = false;\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Validate Code Request Finished\");}\r\n    );\r\n  }\r\n\r\n  generateNewCodeFor2SV() {\r\n    this.isLoading = true;\r\n    this.authService.TSV_GenerateCodeByName(this.data.username, this.data.email).subscribe(\r\n      data => {\r\n        console.log(\"Generating Code Succeeded\", data);\r\n      },\r\n      error => {\r\n        this.isLoading = false;\r\n        console.log(\"Error: Can't generate code for user \");\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n        console.log(\"Sending Generation Code Request Complete\");\r\n      });\r\n  }\r\n\r\n  get username(): AbstractControl {\r\n    return this.verificationForm.get('username')!;\r\n  }\r\n\r\n  get email(): AbstractControl {\r\n    return this.verificationForm.get('email')!;\r\n  }\r\n\r\n  get password(): AbstractControl {\r\n    return this.verificationForm.get('password')!;\r\n  }\r\n\r\n  get phone(): AbstractControl {\r\n    return this.verificationForm.get('phone')!;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n\r\n.fa,.fab,.fad,.fal,.far,.fas {\r\n  -moz-osx-font-smoothing:grayscale;\r\n  -webkit-font-smoothing:antialiased;\r\n  display:inline-block;\r\n  font-style:normal;\r\n  font-variant:normal;\r\n  text-rendering:auto;line-height:1\r\n}\r\n\r\n.fa-lg {\r\n  font-size:1.33333em;\r\n  line-height:.75em;\r\n  vertical-align:-.0667em\r\n}\r\n/**/\r\n.fa-xs {font-size:.75em}\r\n\r\n.fa-sm {font-size:.875em}\r\n\r\n.fa-1x {font-size:1em}\r\n\r\n.fa-2x {font-size:2em}\r\n\r\n.fa-3x {font-size:3em}\r\n\r\n.fa-4x {font-size:4em}\r\n\r\n.fa-5x {font-size:5em}\r\n\r\n.fa-6x {font-size:6em}\r\n\r\n.fa-7x {font-size:7em}\r\n\r\n.fa-8x {font-size:8em}\r\n\r\n.fa-9x {font-size:9em}\r\n\r\n.fa-10x {font-size:10em}\r\n\r\n.fa-fw {text-align:center;width:1.25em}\r\n\r\n.fa-ul {list-style-type:none;margin-left:2.5em;padding-left:0}\r\n\r\n.fa-ul>li {position:relative}\r\n\r\n.fa-li {left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}\r\n\r\n.fa-border {border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}\r\n\r\n.fa-pull-left {float:left}\r\n\r\n.fa-pull-right {float:right}\r\n\r\n.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left {\r\n  margin-right:.3em\r\n}\r\n\r\n.input-with-pre-icon label {left:36px;right:initial}\r\n\r\n\r\n.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right {\r\n  margin-left:.3em\r\n}\r\n\r\n.fa-spin {\r\n  -webkit-animation:fa-spin 2s linear infinite;\r\n  animation:fa-spin 2s linear infinite\r\n}\r\n\r\n\r\n\r\n.fa,.far,.fas {\r\n  font-family: \"Font Awesome 5 Free\", serif\r\n}\r\n\r\n.fa,.fas {\r\n  font-weight:900\r\n}\r\n\r\n\r\n.v-btn__content {\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1 0 auto;\r\n  justify-content: inherit;\r\n  line-height: normal;\r\n  position: relative;\r\n  transition: inherit;\r\n}\r\n\r\n.form-outline .form-control:focus ~ .form-label, .form-outline .form-control.active ~ .form-label {\r\n  transform: translateY(-1.5rem) translateY(0.1rem) scale(0.8);\r\n}\r\n\r\n\r\n/*\r\n.form-outline .form-control ~ .form-notch div {\r\n  pointer-events: none;\r\n  border: 1px solid;\r\n  border-color: #39c0ed;\r\n}\r\n\r\n*/\r\n.v-btn__content {\r\n  letter-spacing: normal;\r\n}\r\n\r\nbody#registerFormDialogContainer {\r\n  background: #0000ff00;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./verification-form2.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<VerificationForm2Component>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "TSVData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenStorage",
                        "type": "TokenStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<VerificationForm2Component>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "TSVData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 106
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 110
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 114
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 118
                    }
                }
            },
            "templateData": "\r\n<storybook-verification-form\r\n  [status]=\"status\"\r\n  [isLoading]=\"isLoading\"\r\n  (sendVerificationReq)=\"onSubmit($event)\"\r\n  (generateNewCodeFor2SV)=\"generateNewCodeFor2SV()\"\r\n  (clickXButton)=\"this.dialogRef.close({message: 'xbutton'})\">\r\n</storybook-verification-form>\r\n"
        },
        {
            "name": "VerificationFormComponent",
            "id": "component-VerificationFormComponent-da23ad459f92c07b46fc75da3f4e41302a9cd64b000fb2906c50550b59b18fea266acfd7b33a080e47b2ab881934aa384fbfae9988d2d904853bc0208442152d",
            "file": "src/stories/forms/verification-form/verification-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-verification-form",
            "styleUrls": [
                "./verification-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./verification-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickXButton",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "generateNewCodeFor2SV",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "sendVerificationReq",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "code",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "codeInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeInputComponent",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'codeInput'"
                        }
                    ]
                },
                {
                    "name": "codeLength",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "param",
                    "defaultValue": "{language: 'login-main'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCodeChanged",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCodeCompleted",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { StoryInput } from \"src/stories/inputs/input/story-input.model\";\r\nimport { AuthService } from 'src/app/_services/auth.service';\r\nimport {CodeInputComponent} from \"../../inputs/code-input/code-input.component\";\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-verification-form',\r\n  templateUrl: './verification-form.component.html',\r\n  styleUrls: ['./verification-form.component.scss'],\r\n})\r\nexport default class VerificationFormComponent implements OnInit {\r\n\r\n  codeLength: number = 4;\r\n  code: string = '';\r\n  param = {language: 'login-main'};\r\n\r\n  @Input() status?: any;\r\n\r\n  @Input() isLoading: boolean = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() sendVerificationReq: EventEmitter<string> = new EventEmitter();\r\n\r\n  @Output() generateNewCodeFor2SV: EventEmitter<void> = new EventEmitter();\r\n\r\n  @ViewChild('codeInput') codeInput !: CodeInputComponent;\r\n\r\n  @Output() clickXButton: EventEmitter<void> = new EventEmitter();\r\n\r\n\r\n  onSubmit(): void {\r\n    console.warn('Send Verification Request!');\r\n\r\n    this.sendVerificationReq.emit(this.code);\r\n    if (!this.status.isVerSuccess) {this.codeInput.reset();}\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n\r\n  // this called every time when user changed the code\r\n  onCodeChanged(code: string) {\r\n    this.code = code;\r\n    //console.log('code entered: '+ this.code);\r\n  }\r\n\r\n  // this called only if user entered full code\r\n  onCodeCompleted(code: string) {\r\n    //\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".Vector {\r\n  position: relative;\r\n  width: 637.5px;\r\n  height: 430px;\r\n  left: calc(50% - 637.5px/2 - 1.25px);\r\n  top: calc(50% - 479px/2 - 0.5px);\r\n}\r\n\r\n.form {\r\n  position: absolute;\r\n  left: 3.18%;\r\n  right: 14.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n\r\n.card-container.card {\r\n  max-width: 400px !important;\r\n  padding: 10px 10px;\r\n}\r\n.col-md-12{\r\n  position: center;\r\n  width: 637.5px;\r\n  height: 819px;\r\n  left: calc(50% - 637.5px/2 - 0.25px);\r\n  top: calc(50% - 819px/2 - 0.5px);\r\n}\r\n\r\n\r\n#button-successfully {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  margin-top: 50px;\r\n  margin-bottom: 100px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 51.16px/2 - 221.58px);\r\n}\r\n\r\nstorybook-button-successfully {\r\n  position: relative;\r\n  left: 140px;\r\n\r\n}\r\n\r\n#button-ex {\r\n  position: absolute;\r\n  top: 48px;\r\n  left: 99px;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0;\r\n}\r\n\r\n\r\n.card {\r\n  position: absolute;\r\n  left: 5.18%;\r\n  right: 4.78%;\r\n  top: 0;\r\n  bottom: 0;\r\n  border-radius: 14px;\r\n  box-shadow: -4px 4px 10px 0 rgba(88, 166, 228, 0.3);\r\n  background-color: #fff;\r\n}\r\n\r\n\r\n.form-header {\r\n  position: absolute;\r\n  top: 12.94%;\r\n  bottom: 77.05%;\r\n\r\n  width: 447px;\r\n  height: 82px;\r\n  flex-grow: 0;\r\n  margin: 0 0 19.8px;\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-size: 40px;\r\n  font-weight: bolder;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 45px;\r\n  letter-spacing: -0.011px;\r\n  text-align: left;\r\n  color: #000000;\r\n\r\n}\r\n\r\n#code-input {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 171.58px);\r\n}\r\n\r\n\r\n.login-button {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 102px;\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 600px/2 - 0.5px);\r\n}\r\n\r\n\r\n.resend-verification {\r\n  /* D UnderLine Regular */\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n  text-decoration-line: underline;\r\n\r\n  color: #000000;\r\n}\r\n\r\n.second-header-text {\r\n  /* D UnderLine Regular */\r\n  font-family: \"Noto Sans\", ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  letter-spacing: -0.011em;\r\n\r\n\r\n  color: #000000;\r\n}\r\n\r\n\r\n\r\n\r\n.login-failed-message {\r\n\r\n  /* D Regular */\r\n  font-family: Noto Sans, ui-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 17px;\r\n  line-height: 31px;\r\n  /* identical to box height, or 183% */\r\n\r\n  align-items: start;\r\n  letter-spacing: -0.011em;\r\n\r\n  /* Red */\r\n\r\n  color: #FA4F4F;\r\n\r\n}\r\n\r\ncode-input {\r\n  position: absolute;\r\n  width: 445px;\r\n  height: 102px;\r\n\r\n  /*left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 101.16px/2 - 221.58px);*/\r\n  align-items: start;/**/\r\n}\r\n\r\n.second-header {\r\n  position: relative;\r\n  width: 445px;\r\n  height: 82px;\r\n\r\n  left: calc(50% - 445px/2 - 0.5px);\r\n  top: calc(50% - 51.16px/2 - 221.58px);\r\n  align-items: start;/**/\r\n}\r\n\r\n\r\n.Vector2 {\r\n  position: static;\r\n  box-sizing: border-box;\r\n  margin-right: 10px;\r\n  margin-left: 11px;\r\n\r\n  width: 95px;\r\n  height: 95px;\r\n  /*left: 1px;\r\n  right: 0.03%;*/\r\n  top: 2px;\r\n  /*bottom: 0;*/\r\n\r\n  /* Blue */\r\n  border: 2px solid #3D8ECF;\r\n  border-radius: 10px;\r\n  display: inline-block;\r\n  vertical-align: middle\r\n}\r\n",
                    "styleUrl": "./verification-form.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n\r\n\r\n<div id=\"main-login-card\" class=\"col-md-12\">\r\n  <storybook-card class=\"card-container\"></storybook-card>\r\n  <div  class=\"h-100 d-flex align-items-center justify-content-center\">\r\n    <storybook-button-ex id=\"button-ex\"  (click)=\"this.clickXButton.emit()\" ></storybook-button-ex>\r\n    <div class=\"form-header\">\r\n      <a >Aeonix App Center</a>\r\n    </div>\r\n\r\n    <br>\r\n    <!--form name=\"form\"  (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate --> <!-- *ngIf=\"!isRegSuccess\"-->\r\n      <form name=\"currentForm\" >\r\n      <div  class=\"Vector\">\r\n\r\n\r\n\r\n            <!--div *ngIf=\"isLoggedIn\">isRegSuccess</div>\r\n            <div *ngIf=\"!isLoggedIn && storyInputsInOrder.length === 0\">empty</div>\r\n            <storybook-input\r\n              [storyInput]=\"storyInputsInOrder[0]\"\r\n              (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n              (onPinInput)=\"onPinInput.emit($event)\"\r\n              [currentForm]=\"mForm\">\r\n            </storybook-input>\r\n\r\n            <storybook-input\r\n              [storyInput]=\"storyInputsInOrder[1]\"\r\n              (onArchiveInput)=\"onArchiveInput.emit($event)\"\r\n              (onPinInput)=\"onPinInput.emit($event)\"\r\n              [currentForm]=\"mForm\">\r\n            </storybook-input-->\r\n\r\n        <div class=\"second-header\" style=\"top: 5px;\">\r\n          <a class=\"second-header-text\"  href=\"#/login\" style=\"position: relative; top: 5px; text-align: left\">\r\n            {{ 'Please enter the Verification Code'}}<br>\r\n            {{ 'you received in your mail:'  }}\r\n          </a>\r\n      </div>\r\n\r\n\r\n      <div id=\"button-successfully\" style=\"\">\r\n            <storybook-button-successfully  *ngIf=\"status.isVerSuccess\"  style=\"position: relative; top: 15px\"></storybook-button-successfully>\r\n            <code-input *ngIf=\"!status.isVerSuccess\"\r\n                        #codeInput\r\n                        [codeLength]=\"codeLength\"\r\n                        (codeChanged)=\"onCodeChanged($event)\"\r\n                        (codeCompleted)=\"onCodeCompleted($event)\">\r\n            </code-input>\r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n      <div class=\"login-button\">\r\n            <div class=\"login-failed-message\" role=\"alert\" style=\"position: relative; top: 15px\">\r\n              <table *ngIf=\"this.status?.isVerFailed\">\r\n                <tr>{{ this.status?.verErrorMessage.toString()  | apiErrorMessage: param }}</tr>\r\n                <tr  *ngFor=\"let message of this.status?.verErrorMessage.data?.confirmPassword.split(', ')\">{{message.trim() | apiErrorMessage: param }}</tr>\r\n              </table>\r\n            </div>\r\n\r\n            <storybook-button-continue size=\"medium\" label=\"Login \" type=\"button\" (click)=\"onSubmit()\" style=\"position: relative; top: 15px\"></storybook-button-continue>\r\n\r\n\r\n            <a *ngIf=\"!status.isVerSuccess\" class=\"resend-verification\"  (click)=\"generateNewCodeFor2SV.emit()\" style=\"position: relative; top: 40px;\">\r\n              {{ 'resend the verification code'  }}\r\n            </a>\r\n\r\n      </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-00f96eb0909d7753b5e43222e333301b67b074c7526b9080de259a762d8b78f4bc56c824c43888034355d0354d35dde3f493b438409e8273f480cfb59604f0e9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\r\n\r\n//import { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\n\r\n\r\n\r\nimport { authInterceptorProviders } from './_helpers/auth.interceptor';\r\nimport {NgbDatepickerModule} from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { MdbAccordionModule } from 'mdb-angular-ui-kit/accordion';\r\nimport { MdbCarouselModule } from 'mdb-angular-ui-kit/carousel';\r\nimport { MdbCheckboxModule } from 'mdb-angular-ui-kit/checkbox';\r\nimport { MdbCollapseModule } from 'mdb-angular-ui-kit/collapse';\r\nimport { MdbDropdownModule } from 'mdb-angular-ui-kit/dropdown';\r\nimport { MdbFormsModule } from 'mdb-angular-ui-kit/forms';\r\nimport { MdbModalModule } from 'mdb-angular-ui-kit/modal';\r\nimport { MdbPopoverModule } from 'mdb-angular-ui-kit/popover';\r\nimport { MdbRadioModule } from 'mdb-angular-ui-kit/radio';\r\nimport { MdbRangeModule } from 'mdb-angular-ui-kit/range';\r\nimport { MdbRippleModule } from 'mdb-angular-ui-kit/ripple';\r\nimport { MdbScrollspyModule } from 'mdb-angular-ui-kit/scrollspy';\r\nimport { MdbTabsModule } from 'mdb-angular-ui-kit/tabs';\r\nimport { MdbTooltipModule } from 'mdb-angular-ui-kit/tooltip';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ModalModule, ButtonsModule, MDBBootstrapModule } from 'angular-bootstrap-md';\r\n\r\nimport {ApiErrorMessagePipe} from \"./pipes/api-error-message.pipe\";\r\nimport {LoginErrorMessagePipe} from \"./pipes/login-error-message.pipe\";\r\n\r\n\r\nimport {Login2Module} from \"./login2/login2.module\";\r\nimport {StorybookModule} from \"./storybook/storybook.module\";\r\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\r\nimport {MdbValidationModule} from \"mdb-angular-ui-kit/validation\";\r\nimport {MatDialogModule} from \"@angular/material/dialog\";\r\nimport {MatButtonModule} from \"@angular/material/button\";\r\nimport ForgotPassForm2Component from \"./login2/login-main/forgot-pass-form2/forgot-pass-form2.component\";\r\nimport ResetPassForm2Component from \"./login2/login-main/reset-pass-form2/reset-pass-form2.component\";\r\nimport {AppRoutingModule} from \"./app-routing.module\";\r\nimport {Profile2Module} from \"./login2/profile2/profile2.module\";\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        HomeComponent,\r\n        ApiErrorMessagePipe,\r\n        LoginErrorMessagePipe,\r\n        ForgotPassForm2Component,\r\n        ResetPassForm2Component,\r\n\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        AppRoutingModule,\r\n        HttpClientModule,\r\n        NgbDatepickerModule,\r\n        MdbAccordionModule,\r\n        MdbCarouselModule,\r\n        MdbCheckboxModule,\r\n        MdbCollapseModule,\r\n        MdbDropdownModule,\r\n        MdbFormsModule,\r\n        MdbModalModule,\r\n        MdbPopoverModule,\r\n        MdbRadioModule,\r\n        MdbRangeModule,\r\n        MdbRippleModule,\r\n        MdbScrollspyModule,\r\n        MdbTabsModule,\r\n        MdbTooltipModule,\r\n        MdbValidationModule,\r\n        BrowserAnimationsModule,\r\n        ModalModule,\r\n        ButtonsModule,\r\n        MDBBootstrapModule.forRoot(),\r\n        Login2Module,\r\n        Profile2Module,\r\n        StorybookModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n\r\n\r\n    ],\r\n    providers: [\r\n        authInterceptorProviders,\r\n        AppComponent,\r\n        {provide: LocationStrategy, useClass: HashLocationStrategy}\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ApiErrorMessagePipe"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ForgotPassForm2Component"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginErrorMessagePipe"
                        },
                        {
                            "name": "ResetPassForm2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "Login2Module"
                        },
                        {
                            "name": "Profile2Module"
                        },
                        {
                            "name": "StorybookModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-88b4f8f45296bd411f3f352a7d9a4efc3bdb3c5617ece2f0a029f3223a4545cf4054487e909c46ff41612b595ae47d31997932bee37babc018ca20caae30e0c8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\n\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'login2', loadChildren: () => \"import('./login2/login2.module').then(m => m.Login2Module)\", },\r\n\r\n  { path: '', redirectTo: 'login2', pathMatch: 'full' },\r\n  { path: '**', redirectTo: 'login2',  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes/*, {useHash: true}*/)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "Login2Module",
            "id": "module-Login2Module-466e2e5fc6a5930692477188dad6ce7941eb1ab39d755b3a10943366b6dcc871ad0cc5687259604871a99a44d3d222dcec4672b6c606d4f10e022d799a2e2e38",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/login2/login2.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { Login2RoutingModule } from './login2-routing.module';\nimport RegisterForm2Component  from './login-main/register-form2/register-form2.component';\nimport {LoginMainComponent} from './login-main/login-main.component';\nimport {StorybookModule} from \"../storybook/storybook.module\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {ReplacePassForm2Component} from \"./login-main/replace-pass-form2/replace-pass-form2.component\";\nimport VerificationForm2Component from \"./login-main/verification-form2/verification-form2.component\";\nimport {Profile2Module} from \"./profile2/profile2.module\";\n\n\n\n\n@NgModule({\n  declarations: [\n    ReplacePassForm2Component,\n    RegisterForm2Component,\n    VerificationForm2Component,\n    LoginMainComponent,\n  ],\n  imports: [\n    Login2RoutingModule,\n    StorybookModule,\n    MatDialogModule,\n    MatButtonModule,\n    Profile2Module\n  ],\n  exports: [\n    ReplacePassForm2Component,\n    RegisterForm2Component\n  ],\n  providers: [ReplacePassForm2Component],\n  bootstrap: []\n})\nexport class Login2Module { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginMainComponent"
                        },
                        {
                            "name": "RegisterForm2Component"
                        },
                        {
                            "name": "ReplacePassForm2Component"
                        },
                        {
                            "name": "VerificationForm2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "Login2RoutingModule"
                        },
                        {
                            "name": "Profile2Module"
                        },
                        {
                            "name": "StorybookModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RegisterForm2Component"
                        },
                        {
                            "name": "ReplacePassForm2Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "Login2RoutingModule",
            "id": "module-Login2RoutingModule-11603a2737cc93078c61dd1ba258bbda8dbff3d6f1a73e5837a429bd5f86f531d0941338502085f81036c75fbd3006d4571107def66e5190bd712bb02fe343fd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/login2/login2-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport RegisterForm2Component from \"./login-main/register-form2/register-form2.component\";\nimport {LoginMainComponent} from \"./login-main/login-main.component\";\nimport {AppRoutingGuard} from \"../app-routing.guard\";\n\n\n\n\n\n\nconst routes: Routes = [\n  { path: 'login-main', component: LoginMainComponent },\n  { path: 'register-form2', component: RegisterForm2Component },\n  {\n    path: 'profile2',\n    loadChildren: () => \"import('./profile2/profile2.module').then(m => m.Profile2Module)\",\n    canActivate: [AppRoutingGuard]\n  },\n  { path: '', redirectTo: 'login-main', pathMatch: 'full' },/**/\n  { path: '**', redirectTo: 'login-main', },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class Login2RoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "Login2RoutingModule",
            "id": "module-Login2RoutingModule-015403b328d7ff4bdcc4a485096bb936930138bb561712a6158ccd21366e262db5878b3fccb0870905b5c94078c72fd4ecc4134f8958d292ecaf26a2833632da-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/storybook/storybook-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\n\n\n\nconst routes: Routes = [\n\n  //{ path: 'storybook-button-fortest', component: AvatarComponent },\n  /*{ path: 'regist', component: MyAccountForm2Component },*/\n  /*{ path: 'register-form2', component: MyAccountForm2Component },*/\n  { path: '', redirectTo: 'home', pathMatch: 'full' },/**/\n  { path: '**', redirectTo: 'home', },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class Login2RoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "Profile2Module",
            "id": "module-Profile2Module-3a71e41ba6c366d6fd8629d741fcba3217004dffb4b04c5a87758dbdf53def6e8e6eb58dc04bc6c2ee4c41f47ceac108b469841e003ae9da4cd4f1e6eb2b4d19",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/login2/profile2/profile2.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { Profile2RoutingModule } from './profile2-routing.module';\nimport PortalComponent from './portal/portal.component';\nimport {StorybookModule} from \"src/app/storybook/storybook.module\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport MyAccountForm2Component from \"./my-account-form2/my-account-form2.component\";\nimport { BoardUserComponent } from './board-user/board-user.component';\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\nimport { BoardAdmin2Component } from './board-admin2/board-admin2.component';\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\n\n\n\n@NgModule({\n  declarations: [\n    PortalComponent,\n    MyAccountForm2Component,\n    BoardUserComponent, BoardAdminComponent, BoardModeratorComponent, BoardAdmin2Component\n  ],\n  imports: [\n    Profile2RoutingModule,\n    StorybookModule,\n    MatDialogModule,\n    MatButtonModule,\n  ],\n  exports: [\n    PortalComponent,\n    MyAccountForm2Component\n  ],\n  bootstrap: []\n})\nexport class Profile2Module { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BoardAdmin2Component"
                        },
                        {
                            "name": "BoardAdminComponent"
                        },
                        {
                            "name": "BoardModeratorComponent"
                        },
                        {
                            "name": "BoardUserComponent"
                        },
                        {
                            "name": "MyAccountForm2Component"
                        },
                        {
                            "name": "PortalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "Profile2RoutingModule"
                        },
                        {
                            "name": "StorybookModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MyAccountForm2Component"
                        },
                        {
                            "name": "PortalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "Profile2RoutingModule",
            "id": "module-Profile2RoutingModule-d2f94de74a0bf02855344a7ed6ce44aa34e6c27ba1abf7a8021057de03a3c4f6bd9990cde9fa67973d1566b492e0140bb3efc748ac8ab277dae9c12428fe877d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/login2/profile2/profile2-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport PortalComponent from \"./portal/portal.component\";\nimport {AppRoutingGuard} from \"../../app-routing.guard\";\nimport {BoardUserComponent} from \"./board-user/board-user.component\";\nimport {BoardModeratorComponent} from \"./board-moderator/board-moderator.component\";\nimport {BoardAdminComponent} from \"./board-admin/board-admin.component\";\nimport {BoardAdmin2Component} from \"./board-admin2/board-admin2.component\";\n\n\n\n\n\n\n\nconst routes: Routes = [\n  { path: 'user', component: BoardUserComponent },\n  { path: 'mod', component: BoardModeratorComponent },\n  { path: 'admin', component: BoardAdminComponent },\n  { path: 'admin2', component: BoardAdmin2Component },\n  { path: 'profile2', component: PortalComponent, canActivate: [AppRoutingGuard] },\n  { path: '', redirectTo: 'profile2', pathMatch: 'full' },/**/\n  { path: '**', redirectTo: 'profile2', },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class Profile2RoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StorybookModule",
            "id": "module-StorybookModule-575ad28429819963be6dd200d16124342907e263de394b3728b5ca89d571558d4d2380d2cb1cd77d35974fbb8a91b8e022d8f85a8596eb7734492f382d46dfa8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/storybook/storybook.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n//import { BrowserModule } from '@angular/platform-browser';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\n\nimport {ButtonLanguageComponent} from \"../../stories/buttons/button-language/button-language.component\";\nimport {ButtonFortestComponent} from '../../stories/buttons/button-fortest/button-fortest.component';\nimport {ButtonGlobeComponent} from \"../../stories/buttons/button-globe/button-globe.component\";\nimport Background1Component from \"../../stories/pages/background1/background1Component\";\nimport {ButtonTadiranComponent} from \"../../stories/buttons/button-tadiran/button-tadiran.component\";\nimport CardComponent from \"../../stories/cards/card/card.component\";\nimport CardRuggedComponent from \"../../stories/cards/card-rugged/card-rugged.component\";\nimport LoginFormComponent from \"../../stories/forms/login-form/login-form.component\";\nimport RegistryFormComponent from \"../../stories/forms/registry-form/registry-form.component\";\nimport {ButtonContinueComponent} from \"../../stories/buttons/button-continue/button-continue.component\";\nimport {ButtonExComponent} from \"../../stories/buttons/button-ex/button-ex.component\";\nimport {ButtonAppsComponent} from \"../../stories/buttons/button-apps/button-apps.component\";\nimport {ButtonSuccessfullyComponent} from \"../../stories/buttons/button-successfully/button-successfully.component\";\nimport Button from \"../../stories/buttons/button-example/button.component\";\nimport {AppMenuComponent} from \"../../stories/app-menu/app-menu.component\";\nimport {StoryInputComponent} from \"../../stories/inputs/input/story-input.component\";\nimport {HighlightDirective} from \"src/stories/buttons/button-fortest/custom-directive/Highlight.directive\";\nimport ReplacePassFormComponent from \"../../stories/forms/replace-pass-form/replace-pass-form.component\";\nimport PassStrengthComponent from \"../../stories/pass-strength/pass-strength.component\";\nimport {ApiErrorMessagePipe} from \"./pipes/api-error-message.pipe\";\nimport {AvatarComponent} from \"../../stories/avatars/avatar.component\";\nimport {AppComponent} from \"../app.component\";\nimport { DynamicCompDirective } from '../../stories/directive/dynamic-comp.directive';\nimport {PopoverDirective} from \"../../stories/directive/bubble-avatar/popover.directive\";\nimport { BubbleAvatarComponent } from '../../stories/directive/bubble-avatar/bubble-avatar.component';\nimport { ActionAvatarComponent } from '../../stories/actions/action-avatar/action-avatar.component';\nimport {PopoverInputDirective} from \"../../stories/directive/bubble-input/popover-input.directive\";\nimport { BubbleInputComponent } from '../../stories/directive/bubble-input/bubble-input.component';\nimport { ActionInputComponent } from '../../stories/actions/action-input/action-input.component';\nimport {MdbPopoverModule} from \"mdb-angular-ui-kit/popover\";\n\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {ButtonExclamationMarkComponent} from \"../../stories/buttons/button-exclamation-mark/button-exclamation-mark.component\"\nimport {ApiErrorMessageService} from \"./pipes/api-error-message.service\";\nimport {Spinner1Component} from \"../../stories/spinners/spinner1/spinner1.component\";\nimport VerificationFormComponent from \"../../stories/forms/verification-form/verification-form.component\";\nimport {DigitcodeInputComponent} from \"../../stories/inputs/digitcode-input/digitcode-input.component\";\nimport {CodeInputComponent} from \"../../stories/inputs/code-input/code-input.component\";\nimport MyAccountFormComponent from \"../../stories/forms/my-account-form/my-account-form.component\";\nimport {AccountInputComponent} from \"../../stories/inputs/account-input/account-input.component\";\nimport ForgotPassFormComponent from \"../../stories/forms/forgot-pass-form/forgot-pass-form.component\";\nimport ResetPassFormComponent from \"../../stories/forms/reset-pass-form/reset-pass-form.component\";\nimport {ButtonConfigurationComponent} from \"../../stories/buttons/button-configuration/button-configuration.component\";\nimport ConfigurationFormComponent from \"../../stories/forms/configuration-form/configuration-form.component\";\nimport {ConfigurationInputComponent} from \"../../stories/inputs/configuration-input/configuration-input.component\";\n\n\n\n\n\n\n\n@NgModule({\n    declarations: [\n        ButtonGlobeComponent, Background1Component, ButtonTadiranComponent, ButtonLanguageComponent,\n        ButtonFortestComponent,\n        CardComponent, CardRuggedComponent,\n        LoginFormComponent, LoginFormComponent, RegistryFormComponent, VerificationFormComponent,\n        MyAccountFormComponent, ForgotPassFormComponent, ResetPassFormComponent, ConfigurationFormComponent,\n        ButtonContinueComponent, ButtonExComponent, ButtonAppsComponent, ButtonSuccessfullyComponent, Button,\n        ButtonConfigurationComponent,\n        AppMenuComponent,\n        StoryInputComponent, DigitcodeInputComponent, CodeInputComponent, AccountInputComponent, ConfigurationInputComponent,\n        HighlightDirective,\n        ReplacePassFormComponent,\n        PassStrengthComponent,\n        ApiErrorMessagePipe,\n        AvatarComponent,\n        DynamicCompDirective,\n        ActionAvatarComponent, PopoverDirective, BubbleAvatarComponent,\n        ActionInputComponent, PopoverInputDirective, BubbleInputComponent,\n        ButtonExclamationMarkComponent,\n        Spinner1Component,\n\n\n    ],\n  imports: [\n    CommonModule,\n    FormsModule, ReactiveFormsModule, MdbPopoverModule, MatButtonModule,\n  ],\n  providers: [ ApiErrorMessageService],\n  exports: [\n    ButtonGlobeComponent, Background1Component, ButtonTadiranComponent, ButtonLanguageComponent,\n    ButtonFortestComponent,\n    CardComponent, CardRuggedComponent,\n    LoginFormComponent, LoginFormComponent, RegistryFormComponent, VerificationFormComponent,\n    MyAccountFormComponent, ForgotPassFormComponent,  ResetPassFormComponent, ConfigurationFormComponent,\n    ButtonContinueComponent, ButtonExComponent, ButtonAppsComponent, ButtonSuccessfullyComponent, Button,\n    ButtonConfigurationComponent,\n    AppMenuComponent,\n    StoryInputComponent, DigitcodeInputComponent, CodeInputComponent, AccountInputComponent, ConfigurationInputComponent,\n    CommonModule,\n    FormsModule, ReactiveFormsModule,\n    HighlightDirective,\n    ReplacePassFormComponent,\n    PassStrengthComponent,\n    AvatarComponent,\n    DynamicCompDirective,\n    ActionAvatarComponent   , PopoverDirective, BubbleAvatarComponent,\n    ActionInputComponent, PopoverInputDirective, BubbleInputComponent,\n    ButtonExclamationMarkComponent,\n    Spinner1Component,\n\n\n\n  ],\n  bootstrap: [AvatarComponent, ]\n})\nexport class StorybookModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiErrorMessageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountInputComponent"
                        },
                        {
                            "name": "ActionAvatarComponent"
                        },
                        {
                            "name": "ActionInputComponent"
                        },
                        {
                            "name": "ApiErrorMessagePipe"
                        },
                        {
                            "name": "AppMenuComponent"
                        },
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "Background1Component"
                        },
                        {
                            "name": "BubbleAvatarComponent"
                        },
                        {
                            "name": "BubbleInputComponent"
                        },
                        {
                            "name": "Button"
                        },
                        {
                            "name": "ButtonAppsComponent"
                        },
                        {
                            "name": "ButtonConfigurationComponent"
                        },
                        {
                            "name": "ButtonContinueComponent"
                        },
                        {
                            "name": "ButtonExComponent"
                        },
                        {
                            "name": "ButtonExclamationMarkComponent"
                        },
                        {
                            "name": "ButtonFortestComponent"
                        },
                        {
                            "name": "ButtonGlobeComponent"
                        },
                        {
                            "name": "ButtonLanguageComponent"
                        },
                        {
                            "name": "ButtonSuccessfullyComponent"
                        },
                        {
                            "name": "ButtonTadiranComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardRuggedComponent"
                        },
                        {
                            "name": "CodeInputComponent"
                        },
                        {
                            "name": "ConfigurationFormComponent"
                        },
                        {
                            "name": "ConfigurationInputComponent"
                        },
                        {
                            "name": "DigitcodeInputComponent"
                        },
                        {
                            "name": "DynamicCompDirective"
                        },
                        {
                            "name": "ForgotPassFormComponent"
                        },
                        {
                            "name": "HighlightDirective"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "MyAccountFormComponent"
                        },
                        {
                            "name": "PassStrengthComponent"
                        },
                        {
                            "name": "PopoverDirective"
                        },
                        {
                            "name": "PopoverInputDirective"
                        },
                        {
                            "name": "RegistryFormComponent"
                        },
                        {
                            "name": "ReplacePassFormComponent"
                        },
                        {
                            "name": "ResetPassFormComponent"
                        },
                        {
                            "name": "Spinner1Component"
                        },
                        {
                            "name": "StoryInputComponent"
                        },
                        {
                            "name": "VerificationFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccountInputComponent"
                        },
                        {
                            "name": "ActionAvatarComponent"
                        },
                        {
                            "name": "ActionInputComponent"
                        },
                        {
                            "name": "AppMenuComponent"
                        },
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "Background1Component"
                        },
                        {
                            "name": "BubbleAvatarComponent"
                        },
                        {
                            "name": "BubbleInputComponent"
                        },
                        {
                            "name": "Button"
                        },
                        {
                            "name": "ButtonAppsComponent"
                        },
                        {
                            "name": "ButtonConfigurationComponent"
                        },
                        {
                            "name": "ButtonContinueComponent"
                        },
                        {
                            "name": "ButtonExComponent"
                        },
                        {
                            "name": "ButtonExclamationMarkComponent"
                        },
                        {
                            "name": "ButtonFortestComponent"
                        },
                        {
                            "name": "ButtonGlobeComponent"
                        },
                        {
                            "name": "ButtonLanguageComponent"
                        },
                        {
                            "name": "ButtonSuccessfullyComponent"
                        },
                        {
                            "name": "ButtonTadiranComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardRuggedComponent"
                        },
                        {
                            "name": "CodeInputComponent"
                        },
                        {
                            "name": "ConfigurationFormComponent"
                        },
                        {
                            "name": "ConfigurationInputComponent"
                        },
                        {
                            "name": "DigitcodeInputComponent"
                        },
                        {
                            "name": "DynamicCompDirective"
                        },
                        {
                            "name": "ForgotPassFormComponent"
                        },
                        {
                            "name": "HighlightDirective"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "MyAccountFormComponent"
                        },
                        {
                            "name": "PassStrengthComponent"
                        },
                        {
                            "name": "PopoverDirective"
                        },
                        {
                            "name": "PopoverInputDirective"
                        },
                        {
                            "name": "RegistryFormComponent"
                        },
                        {
                            "name": "ReplacePassFormComponent"
                        },
                        {
                            "name": "ResetPassFormComponent"
                        },
                        {
                            "name": "Spinner1Component"
                        },
                        {
                            "name": "StoryInputComponent"
                        },
                        {
                            "name": "VerificationFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/account-input/account-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/code-input/code-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/input/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
            },
            {
                "name": "Admin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Agent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/user.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AppConfig.accServer.ACCWEBServers+'/accGate/test/'"
            },
            {
                "name": "APP_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('app.config')"
            },
            {
                "name": "AppConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  accServer: {\r\n    ACCWEBServers: AUTH_API //'https://172.28.8.245:8445'\r\n  },\r\n  endpoints: {\r\n\r\n    TOKEN_KEY: 'token',\r\n    REFRESHTOKEN_KEY: 'auth-refreshtoken',\r\n    USER_KEY: 'user'\r\n  }\r\n}"
            },
            {
                "name": "AUTH_API",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "protocol + \"//\" + url + \":\" + port"
            },
            {
                "name": "AUTH_API",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/auth.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AppConfig.accServer.ACCWEBServers+'/accGate/auth/'"
            },
            {
                "name": "authInterceptorProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_helpers/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n]"
            },
            {
                "name": "CodeInputComponentConfigToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/code-input/code-input.component.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<CodeInputComponentConfig>('CodeInputComponentConfig')"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DdlAuto",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app-menu/app-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/directive/bubble-avatar/popover.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/directive/bubble-input/popover.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/account-input/account-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/code-input/code-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/input/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-fortest/custom-directive/Highlight.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultComponentConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/code-input/code-input.component.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CodeInputComponentConfig",
                "defaultValue": "{\r\n  codeLength: 4,\r\n  inputType: 'tel',\r\n  inputMode: 'numeric',\r\n  initialFocusField: undefined,\r\n  isCharsCode: false,\r\n  isCodeHidden: false,\r\n  isPrevFocusableAfterClearing: true,\r\n  isFocusingOnLastByClickIfFilled: false,\r\n  code: undefined,\r\n  disabled: false,\r\n  autocapitalize: undefined\r\n}"
            },
            {
                "name": "Email",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/account-input/account-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Email",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/input/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app-menu/app-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "Exclamation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-exclamation-mark/button-exclamation-mark.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "forgotPassForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  password: new FormControl('T@diran2022', Validators.minLength(2))\n})"
            },
            {
                "name": "Gallery",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template2.bind({})"
            },
            {
                "name": "Gallery",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template2.bind({})"
            },
            {
                "name": "GCCS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "httpOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/auth.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n}"
            },
            {
                "name": "httpOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/user.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n}"
            },
            {
                "name": "IdentifyFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IdentifyFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IdentifySuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IdentifySuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "jwtHelper",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-routing.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new JwtHelperService()"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/avatars/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-ex/button-ex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-example/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-language/button-language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/spinners/spinner1/spinner1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LengthFive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/code-input/code-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LengthSeven",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/code-input/code-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LengthSix",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/code-input/code-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app-menu/app-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/headers/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/background1/background1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/headers/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/background1/background1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoginForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoignFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MainLoignForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MainRegistryForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MainRegistryForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MainRegistryForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mPopover",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/directive/bubble-avatar/popover.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PopoverOptions",
                "defaultValue": "{\r\n  content: ActionAvatarComponent\r\n}"
            },
            {
                "name": "mPopover",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/directive/bubble-input/popover.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PopoverOptions",
                "defaultValue": "{\r\n  content: ActionAvatarComponent\r\n}"
            },
            {
                "name": "NewPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/account-input/account-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NewPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/input/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "parsedUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new URL(window.location.href)"
            },
            {
                "name": "PassExpDays",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Password",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/account-input/account-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Password",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/input/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Phone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/account-input/account-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Phone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Phone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/input/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PinCodeLength",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PINCODETOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/token-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'auth-pincodetoken'"
            },
            {
                "name": "port",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "parsedUrl.port"
            },
            {
                "name": "PreviousAlertPassExpDays",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/avatars/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pass-strength/pass-strength.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-ex/button-ex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-example/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-language/button-language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/cards/card/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/cards/card-rugged/card-rugged.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/background1/background1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/spinners/spinner1/spinner1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template2.bind({})"
            },
            {
                "name": "Primary3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template2.bind({})"
            },
            {
                "name": "protocol",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "parsedUrl.protocol"
            },
            {
                "name": "REFRESHTOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/token-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'auth-refreshtoken'"
            },
            {
                "name": "RegistryFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RegistryFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RegistryFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RegistryForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RegistryForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RegistryForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "resetPassForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  password: new FormControl('T@diran2022', Validators.minLength(2))\n})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/avatars/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pass-strength/pass-strength.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-ex/button-ex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-example/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-language/button-language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/cards/card/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/cards/card-rugged/card-rugged.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/background1/background1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/spinners/spinner1/spinner1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/avatars/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-ex/button-ex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-example/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-language/button-language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/spinners/spinner1/spinner1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "storyForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  tadiran_gate_passExpDays: new FormControl(23),\n  tadiran_gate_PreviousAlertPassExpDays: new FormControl(15),\n  tadiran_gate_TSV: new FormControl(true),/**/\n  spring_jpa_hibernate_ddlAuto: new FormControl(''),\n})"
            },
            {
                "name": "storyForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  email: new FormControl('Ex: abc@example.com', Validators.email),\n  phone: new FormControl('Ex: +972547762084', Validators.pattern(new RegExp(\"[0-9 ]{12}\"))),/**/\n  password: new FormControl('', Validators.minLength(2)),\n})"
            },
            {
                "name": "storyForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  password: new FormControl('T@diran2022', Validators.minLength(2))\n})"
            },
            {
                "name": "storyForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  password: new FormControl('', Validators.minLength(2)),\n  email: new FormControl('Ex: abc@example.com', Validators.email),\n  phone: new FormControl('Ex: +972547762084', Validators.pattern(new RegExp(\"[0-9 ]{12}\"))),/**/\n})"
            },
            {
                "name": "storyForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  oldPassword: new FormControl('old password', Validators.minLength(2)),\n  password: new FormControl('new password', Validators.minLength(2)),\n  confirmPassword: new FormControl('re-enter the new password', Validators.minLength(2)),/**/\n})"
            },
            {
                "name": "storyForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  password: new FormControl('T@diran2022', Validators.minLength(2))\n})"
            },
            {
                "name": "SubscribedErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app-menu/app-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/avatars/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AvatarComponent>",
                "defaultValue": "(args: AvatarComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/headers/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pass-strength/pass-strength.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PassStrengthComponent>",
                "defaultValue": "(args: PassStrengthComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonAppsComponent>",
                "defaultValue": "(args: ButtonAppsComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonConfigurationComponent>",
                "defaultValue": "(args: ButtonConfigurationComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonContinueComponent>",
                "defaultValue": "(args: ButtonContinueComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-ex/button-ex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonExComponent>",
                "defaultValue": "(args: ButtonExComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-example/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-exclamation-mark/button-exclamation-mark.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonExclamationMarkComponent>",
                "defaultValue": "(args: ButtonExclamationMarkComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonFortestComponent>",
                "defaultValue": "(args: ButtonFortestComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-language/button-language.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonLanguageComponent>",
                "defaultValue": "(args: ButtonLanguageComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonGlobeComponent>",
                "defaultValue": "(args: ButtonGlobeComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-successfully/button-successfully.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonSuccessfullyComponent>",
                "defaultValue": "(args: ButtonSuccessfullyComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/cards/card/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Card>",
                "defaultValue": "(args: Card) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/cards/card-rugged/card-rugged.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CardRuggedComponent>",
                "defaultValue": "(args: CardRuggedComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonTadiranComponent>",
                "defaultValue": "(args: ButtonTadiranComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/directive/bubble-avatar/popover.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PopoverDirective>",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: { // (3) don't forget it\r\n    declarations: [PopoverDirective, ActionAvatarComponent, BubbleAvatarComponent],\r\n    imports: [CommonModule]\r\n  },\r\n  template: `<button [twPopover] = \"mPopover\" > PopoverDirective Example </button>`\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/directive/bubble-input/popover.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PopoverInputDirective>",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: { // (3) don't forget it\r\n    declarations: [PopoverInputDirective, ActionAvatarComponent, BubbleAvatarComponent],\r\n    imports: [CommonModule]\r\n  },\r\n  template: `<button [twPopover] = \"mPopover\" > PopoverDirective Example </button>`\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/account-input/account-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CheckboxInputComponent>",
                "defaultValue": "(args: CheckboxInputComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/code-input/code-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/input/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: ConfigurationInput.actionsData.onPinInput,\n      onArchiveTask: ConfigurationInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinTask: StoryInput.actionsData.onPinInput,\n    onArchiveTask: StoryInput.actionsData.onArchiveInput,\n    mForm: forgotPassForm,\n  },\n\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: AccountInput.actionsData.onPinInput,\n      onArchiveTask: AccountInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinTask: StoryInput.actionsData.onPinInput,\n    onArchiveTask: StoryInput.actionsData.onArchiveInput,\n    mForm: resetPassForm,\n  },\n\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pages/background1/background1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Background1Component>",
                "defaultValue": "(args: Background1Component) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/spinners/spinner1/spinner1.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Spinner1Component>",
                "defaultValue": "(args: Spinner1Component) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-fortest/custom-directive/Highlight.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HighlightDirective>",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: { // (3) don't forget it\r\n    declarations: [HighlightDirective],\r\n    imports: [CommonModule]\r\n  },\r\n  template: `<button highlight=\"blue\" colorName=\"blue\" > Highlight Button Example </button>`\r\n})"
            },
            {
                "name": "Template2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonContinueComponent>",
                "defaultValue": "(args: ButtonContinueComponent) => ({\n  props: args,\n  /*template: '<storybook-button-tadiran ></storybook-button-tadiran>',*/\n\n})"
            },
            {
                "name": "Template2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonTadiranComponent>",
                "defaultValue": "(args: ButtonTadiranComponent) => ({\n  props: args,\n  /*template: '<storybook-button-tadiran ></storybook-button-tadiran>',*/\n\n})"
            },
            {
                "name": "TOKEN_HEADER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_helpers/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Authorization'"
            },
            {
                "name": "TOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/token-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'token'"
            },
            {
                "name": "TSV",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "url",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "parsedUrl.hostname"
            },
            {
                "name": "USER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_services/token-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'user'"
            },
            {
                "name": "Username",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/account-input/account-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Username",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/inputs/input/story-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Vee",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-successfully/button-successfully.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "VerificationFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "VerificationFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "VerificationFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "VerificationForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "VerificationForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "VerificationForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "verificationSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "verificationSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "verificationSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WebRT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app-menu/app-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "workingModeConfiguration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  runMode: {\r\n    TSV: false,\r\n  }\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Omit",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Pick<T | Exclude<T, K>>",
                "file": "src/stories/inputs/code-input/code-input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "InputState",
                "childs": [
                    {
                        "name": "ready",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "reset",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/stories/inputs/code-input/code-input.component.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/inputs/account-input/account-input.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/account-input/account-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/account-input/account-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Email",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/account-input/account-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NewPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/account-input/account-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Password",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/account-input/account-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Phone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/account-input/account-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/account-input/account-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
                },
                {
                    "name": "Username",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/account-input/account-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/inputs/code-input/code-input.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/code-input/code-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/code-input/code-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LengthFive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/code-input/code-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LengthSeven",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/code-input/code-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LengthSix",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/code-input/code-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/code-input/code-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
                }
            ],
            "src/stories/inputs/configuration-input/configuration-input.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
                },
                {
                    "name": "DdlAuto",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PassExpDays",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Phone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PinCodeLength",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PreviousAlertPassExpDays",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
                },
                {
                    "name": "TSV",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/inputs/digitcode-input/digitcode-input.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
                }
            ],
            "src/stories/inputs/input/story-input.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/input/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onPinInput: action('onPinInput'),\n  onArchiveInput: action('onArchiveInput'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/input/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Email",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/input/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NewPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/input/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Password",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/input/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Phone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/input/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/input/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinInput: actionsData.onPinInput,\n    onArchiveInput: actionsData.onArchiveInput,\n  },\n})"
                },
                {
                    "name": "Username",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/input/story-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/buttons/button-apps/button-apps.stories.ts": [
                {
                    "name": "Admin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Agent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "GCCS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonAppsComponent>",
                    "defaultValue": "(args: ButtonAppsComponent) => ({\n  props: args,\n})"
                },
                {
                    "name": "WebRT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-apps/button-apps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/_services/user.service.ts": [
                {
                    "name": "API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/user.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AppConfig.accServer.ACCWEBServers+'/accGate/test/'"
                },
                {
                    "name": "httpOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/user.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n}"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "APP_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('app.config')"
                },
                {
                    "name": "AppConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  accServer: {\r\n    ACCWEBServers: AUTH_API //'https://172.28.8.245:8445'\r\n  },\r\n  endpoints: {\r\n\r\n    TOKEN_KEY: 'token',\r\n    REFRESHTOKEN_KEY: 'auth-refreshtoken',\r\n    USER_KEY: 'user'\r\n  }\r\n}"
                },
                {
                    "name": "AUTH_API",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "protocol + \"//\" + url + \":\" + port"
                },
                {
                    "name": "parsedUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new URL(window.location.href)"
                },
                {
                    "name": "port",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "parsedUrl.port"
                },
                {
                    "name": "protocol",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "parsedUrl.protocol"
                },
                {
                    "name": "url",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "parsedUrl.hostname"
                },
                {
                    "name": "workingModeConfiguration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  runMode: {\r\n    TSV: false,\r\n  }\r\n}"
                }
            ],
            "src/app/_services/auth.service.ts": [
                {
                    "name": "AUTH_API",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/auth.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AppConfig.accServer.ACCWEBServers+'/accGate/auth/'"
                },
                {
                    "name": "httpOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/auth.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n}"
                }
            ],
            "src/app/_helpers/auth.interceptor.ts": [
                {
                    "name": "authInterceptorProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_helpers/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n]"
                },
                {
                    "name": "TOKEN_HEADER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_helpers/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Authorization'"
                }
            ],
            "src/stories/inputs/code-input/code-input.component.config.ts": [
                {
                    "name": "CodeInputComponentConfigToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/code-input/code-input.component.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<CodeInputComponentConfig>('CodeInputComponentConfig')"
                },
                {
                    "name": "defaultComponentConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/code-input/code-input.component.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeInputComponentConfig",
                    "defaultValue": "{\r\n  codeLength: 4,\r\n  inputType: 'tel',\r\n  inputMode: 'numeric',\r\n  initialFocusField: undefined,\r\n  isCharsCode: false,\r\n  isCodeHidden: false,\r\n  isPrevFocusableAfterClearing: true,\r\n  isFocusingOnLastByClickIfFilled: false,\r\n  code: undefined,\r\n  disabled: false,\r\n  autocapitalize: undefined\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/app-menu/app-menu.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app-menu/app-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app-menu/app-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app-menu/app-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app-menu/app-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n    },\n})"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app-menu/app-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/directive/bubble-avatar/popover.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/directive/bubble-avatar/popover.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mPopover",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/directive/bubble-avatar/popover.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopoverOptions",
                    "defaultValue": "{\r\n  content: ActionAvatarComponent\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/directive/bubble-avatar/popover.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PopoverDirective>",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: { // (3) don't forget it\r\n    declarations: [PopoverDirective, ActionAvatarComponent, BubbleAvatarComponent],\r\n    imports: [CommonModule]\r\n  },\r\n  template: `<button [twPopover] = \"mPopover\" > PopoverDirective Example </button>`\r\n})"
                }
            ],
            "src/stories/directive/bubble-input/popover.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/directive/bubble-input/popover.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mPopover",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/directive/bubble-input/popover.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopoverOptions",
                    "defaultValue": "{\r\n  content: ActionAvatarComponent\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/directive/bubble-input/popover.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PopoverInputDirective>",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: { // (3) don't forget it\r\n    declarations: [PopoverInputDirective, ActionAvatarComponent, BubbleAvatarComponent],\r\n    imports: [CommonModule]\r\n  },\r\n  template: `<button [twPopover] = \"mPopover\" > PopoverDirective Example </button>`\r\n})"
                }
            ],
            "src/stories/forms/configuration-form/configuration-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MainRegistryForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RegistryFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RegistryForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "storyForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  tadiran_gate_passExpDays: new FormControl(23),\n  tadiran_gate_PreviousAlertPassExpDays: new FormControl(15),\n  tadiran_gate_TSV: new FormControl(true),/**/\n  spring_jpa_hibernate_ddlAuto: new FormControl(''),\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: ConfigurationInput.actionsData.onPinInput,\n      onArchiveTask: ConfigurationInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n})"
                }
            ],
            "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "forgotPassForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  password: new FormControl('T@diran2022', Validators.minLength(2))\n})"
                },
                {
                    "name": "IdentifyFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IdentifySuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinTask: StoryInput.actionsData.onPinInput,\n    onArchiveTask: StoryInput.actionsData.onArchiveInput,\n    mForm: forgotPassForm,\n  },\n\n})"
                },
                {
                    "name": "VerificationFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "VerificationForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "verificationSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/forms/my-account-form/my-account-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MainRegistryForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RegistryFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RegistryForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "storyForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  email: new FormControl('Ex: abc@example.com', Validators.email),\n  phone: new FormControl('Ex: +972547762084', Validators.pattern(new RegExp(\"[0-9 ]{12}\"))),/**/\n  password: new FormControl('', Validators.minLength(2)),\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: AccountInput.actionsData.onPinInput,\n      onArchiveTask: AccountInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n})"
                }
            ],
            "src/stories/forms/login-form/login-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoginForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoignFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MainLoignForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "storyForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  password: new FormControl('T@diran2022', Validators.minLength(2))\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n\n})"
                }
            ],
            "src/stories/forms/registry-form/registry-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MainRegistryForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RegistryFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RegistryForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "storyForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  password: new FormControl('', Validators.minLength(2)),\n  email: new FormControl('Ex: abc@example.com', Validators.email),\n  phone: new FormControl('Ex: +972547762084', Validators.pattern(new RegExp(\"[0-9 ]{12}\"))),/**/\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/registry-form/registry-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n})"
                }
            ],
            "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IdentifyFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IdentifySuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "resetPassForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  password: new FormControl('T@diran2022', Validators.minLength(2))\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinTask: StoryInput.actionsData.onPinInput,\n    onArchiveTask: StoryInput.actionsData.onArchiveInput,\n    mForm: resetPassForm,\n  },\n\n})"
                },
                {
                    "name": "VerificationFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "VerificationForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "verificationSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "storyForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  oldPassword: new FormControl('old password', Validators.minLength(2)),\n  password: new FormControl('new password', Validators.minLength(2)),\n  confirmPassword: new FormControl('re-enter the new password', Validators.minLength(2)),/**/\n})"
                },
                {
                    "name": "SubscribedErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n})"
                }
            ],
            "src/stories/forms/verification-form/verification-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "storyForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormGroup({\n  username: new FormControl('Telecom2', Validators.minLength(2)),\n  password: new FormControl('T@diran2022', Validators.minLength(2))\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n      ...args,\n      onPinTask: StoryInput.actionsData.onPinInput,\n      onArchiveTask: StoryInput.actionsData.onArchiveInput,\n      mForm: storyForm,\n    },\n\n})"
                },
                {
                    "name": "VerificationFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "VerificationForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "verificationSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/forms/verification-form/verification-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/buttons/button-fortest/custom-directive/Highlight.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-fortest/custom-directive/Highlight.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-fortest/custom-directive/Highlight.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HighlightDirective>",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  moduleMetadata: { // (3) don't forget it\r\n    declarations: [HighlightDirective],\r\n    imports: [CommonModule]\r\n  },\r\n  template: `<button highlight=\"blue\" colorName=\"blue\" > Highlight Button Example </button>`\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/stories/buttons/button-exclamation-mark/button-exclamation-mark.stories.ts": [
                {
                    "name": "Exclamation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-exclamation-mark/button-exclamation-mark.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-exclamation-mark/button-exclamation-mark.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonExclamationMarkComponent>",
                    "defaultValue": "(args: ButtonExclamationMarkComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-continue/button-continue.stories.ts": [
                {
                    "name": "Gallery",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template2.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template2.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonContinueComponent>",
                    "defaultValue": "(args: ButtonContinueComponent) => ({\n  props: args,\n})"
                },
                {
                    "name": "Template2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-continue/button-continue.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonContinueComponent>",
                    "defaultValue": "(args: ButtonContinueComponent) => ({\n  props: args,\n  /*template: '<storybook-button-tadiran ></storybook-button-tadiran>',*/\n\n})"
                }
            ],
            "src/stories/buttons/button-tadiran/button-tadiran.stories.ts": [
                {
                    "name": "Gallery",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template2.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template2.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonTadiranComponent>",
                    "defaultValue": "(args: ButtonTadiranComponent) => ({\n  props: args,\n})"
                },
                {
                    "name": "Template2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonTadiranComponent>",
                    "defaultValue": "(args: ButtonTadiranComponent) => ({\n  props: args,\n  /*template: '<storybook-button-tadiran ></storybook-button-tadiran>',*/\n\n})"
                }
            ],
            "src/app/app-routing.guard.ts": [
                {
                    "name": "jwtHelper",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-routing.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new JwtHelperService()"
                }
            ],
            "src/stories/avatars/avatar.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/avatars/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/avatars/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/avatars/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/avatars/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/avatars/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AvatarComponent>",
                    "defaultValue": "(args: AvatarComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-configuration/button-configuration.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonConfigurationComponent>",
                    "defaultValue": "(args: ButtonConfigurationComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-ex/button-ex.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-ex/button-ex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-ex/button-ex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-ex/button-ex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-ex/button-ex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-ex/button-ex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonExComponent>",
                    "defaultValue": "(args: ButtonExComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-example/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-example/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-example/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-example/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-example/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-example/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-fortest/button-fortest.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonFortestComponent>",
                    "defaultValue": "(args: ButtonFortestComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-language/button-language.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-language/button-language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-language/button-language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-language/button-language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-language/button-language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-language/button-language.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonLanguageComponent>",
                    "defaultValue": "(args: ButtonLanguageComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-globe/button-globe.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-globe/button-globe.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonGlobeComponent>",
                    "defaultValue": "(args: ButtonGlobeComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/inputs/checkbox-input/checkbox-input.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CheckboxInputComponent>",
                    "defaultValue": "(args: CheckboxInputComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/spinners/spinner1/spinner1.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/spinners/spinner1/spinner1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/spinners/spinner1/spinner1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/spinners/spinner1/spinner1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/spinners/spinner1/spinner1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/spinners/spinner1/spinner1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Spinner1Component>",
                    "defaultValue": "(args: Spinner1Component) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/headers/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/headers/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/headers/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/headers/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/pages/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/pages/background1/background1.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/background1/background1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/background1/background1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/background1/background1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/background1/background1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pages/background1/background1.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Background1Component>",
                    "defaultValue": "(args: Background1Component) => ({\n  props: args,\n})"
                }
            ],
            "src/app/_services/token-storage.service.ts": [
                {
                    "name": "PINCODETOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/token-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'auth-pincodetoken'"
                },
                {
                    "name": "REFRESHTOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/token-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'auth-refreshtoken'"
                },
                {
                    "name": "TOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/token-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'token'"
                },
                {
                    "name": "USER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_services/token-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'user'"
                }
            ],
            "src/stories/pass-strength/pass-strength.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pass-strength/pass-strength.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pass-strength/pass-strength.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pass-strength/pass-strength.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PassStrengthComponent>",
                    "defaultValue": "(args: PassStrengthComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/cards/card/card.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/cards/card/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/cards/card/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/cards/card/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Card>",
                    "defaultValue": "(args: Card) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/cards/card-rugged/card-rugged.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/cards/card-rugged/card-rugged.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/cards/card-rugged/card-rugged.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/cards/card-rugged/card-rugged.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CardRuggedComponent>",
                    "defaultValue": "(args: CardRuggedComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/buttons/button-successfully/button-successfully.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-successfully/button-successfully.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonSuccessfullyComponent>",
                    "defaultValue": "(args: ButtonSuccessfullyComponent) => ({\n  props: args,\n})"
                },
                {
                    "name": "Vee",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/buttons/button-successfully/button-successfully.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/stories/inputs/code-input/code-input.component.ts": [
                {
                    "name": "InputState",
                    "childs": [
                        {
                            "name": "ready",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "reset",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/stories/inputs/code-input/code-input.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/stories/inputs/code-input/code-input.component.ts": [
                {
                    "name": "Omit",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Pick<T | Exclude<T, K>>",
                    "file": "src/stories/inputs/code-input/code-input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "login2",
                        "loadChildren": "./login2/login2.module#Login2Module"
                    },
                    {
                        "path": "",
                        "redirectTo": "login2",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "redirectTo": "login2"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/login2/login2-routing.module.ts",
                "module": "Login2RoutingModule",
                "children": [
                    {
                        "path": "login-main",
                        "component": "LoginMainComponent"
                    },
                    {
                        "path": "register-form2",
                        "component": "RegisterForm2Component"
                    },
                    {
                        "path": "profile2",
                        "loadChildren": "./profile2/profile2.module#Profile2Module",
                        "canActivate": [
                            "AppRoutingGuard"
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "login-main",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "redirectTo": "login-main"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/login2/profile2/profile2-routing.module.ts",
                "module": "Profile2RoutingModule",
                "children": [
                    {
                        "path": "user",
                        "component": "BoardUserComponent"
                    },
                    {
                        "path": "mod",
                        "component": "BoardModeratorComponent"
                    },
                    {
                        "path": "admin",
                        "component": "BoardAdminComponent"
                    },
                    {
                        "path": "admin2",
                        "component": "BoardAdmin2Component"
                    },
                    {
                        "path": "profile2",
                        "component": "PortalComponent",
                        "canActivate": [
                            "AppRoutingGuard"
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "profile2",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "redirectTo": "profile2"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/_helpers/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/_helpers/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptorProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_helpers/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_HEADER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_API",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/token-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TokenStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/token-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PINCODETOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/token-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REFRESHTOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/token-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/token-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/user.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/user.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_shared/event-bus.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventBusService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_shared/event.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app-routing.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AppRoutingGuard",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/app-routing.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "jwtHelper",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_API",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parsedUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "port",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "protocol",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "url",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "workingModeConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/example-card/example-card.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExampleCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/forgot-pass-form2/forgot-pass-form2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPassForm2Component",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/forgot-pass-form2/forgot-pass-form2.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TSVData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/login-main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginMainComponent",
                "coveragePercent": 15,
                "coverageCount": "5/33",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/login-main.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/register-form2/register-form2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterForm2Component",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/replace-pass-form2/replace-pass-form2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReplacePassForm2Component",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/replace-pass-form2/replace-pass-form2.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PasswordValidators",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/reset-pass-form2/reset-pass-form2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPassForm2Component",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/reset-pass-form2/reset-pass-form2.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TSVData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/verification-form2/verification-form2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VerificationForm2Component",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/login-main/verification-form2/verification-form2.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TSVData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/profile2/board-admin/board-admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardAdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/profile2/board-admin2/board-admin2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardAdmin2Component",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/profile2/board-admin2/board-admin2.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Prop",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/profile2/board-moderator/board-moderator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardModeratorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/profile2/board-user/board-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/profile2/my-account-form2/my-account-form2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyAccountForm2Component",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/profile2/my-account-form2/my-account-form2.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MyAccountData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/profile2/portal/portal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PortalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/login2/profile2/portal/portal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/api-error-message.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ApiErrorMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/login-error-message.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LoginErrorMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook/pipes/api-error-message.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ApiErrorMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook/pipes/api-error-message.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TranslationSet",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook/pipes/api-error-message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiErrorMessageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook/pipes/login-error-message.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LoginErrorMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/actions/action-avatar/action-avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionAvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/actions/action-input/action-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/actions/action-input/action-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "USERS",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/actions/action-input/action-input.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionInput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/actions/actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AeonixAppCenterForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Profile2Expose",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app-menu/app-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/avatars/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 63,
                "coverageCount": "7/11",
                "status": "good"
            },
            {
                "filePath": "src/stories/avatars/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/avatars/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/avatars/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/avatars/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/avatars/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonAppsComponent",
                "coveragePercent": 70,
                "coverageCount": "7/10",
                "status": "good"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Admin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Agent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GCCS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-apps/button-apps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WebRT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-configuration/button-configuration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonConfigurationComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-configuration/button-configuration.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonContinueComponent",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Gallery",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-continue/button-continue.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-ex/button-ex.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonExComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/stories/buttons/button-ex/button-ex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-ex/button-ex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-ex/button-ex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-ex/button-ex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-ex/button-ex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-example/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/buttons/button-exclamation-mark/button-exclamation-mark.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonExclamationMarkComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/stories/buttons/button-exclamation-mark/button-exclamation-mark.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Exclamation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-exclamation-mark/button-exclamation-mark.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-fortest/button-fortest.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonFortestComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-fortest/button-fortest.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-fortest/custom-directive/Highlight.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HighlightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-fortest/custom-directive/Highlight.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-fortest/custom-directive/Highlight.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonGlobeComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-globe/button-globe.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonLanguageComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-language/button-language.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-successfully/button-successfully.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonSuccessfullyComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/stories/buttons/button-successfully/button-successfully.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-successfully/button-successfully.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vee",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonTadiranComponent",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Gallery",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttons/button-tadiran/button-tadiran.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/cards/card-rugged/card-rugged.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardRuggedComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/cards/card-rugged/card-rugged.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/cards/card-rugged/card-rugged.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/cards/card-rugged/card-rugged.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/cards/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/cards/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/cards/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/cards/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/bubble-avatar/bubble-avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BubbleAvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/bubble-avatar/popover.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PopoverDirective",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/bubble-avatar/popover.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/bubble-avatar/popover.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mPopover",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/bubble-avatar/popover.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/bubble-input/bubble-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BubbleInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/bubble-input/popover-input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PopoverInputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/bubble-input/popover.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/bubble-input/popover.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mPopover",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/bubble-input/popover.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/dynamic-comp.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DynamicCompDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/directive/popover.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PopoverOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/configuration-form/configuration-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigurationFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MainRegistryForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RegistryFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RegistryForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storyForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/configuration-form/configuration-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPassFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AdComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "forgotPassForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IdentifyFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IdentifySuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerificationFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerificationForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/forgot-pass-form/forgot-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "verificationSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoginForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoignFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MainLoignForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storyForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/my-account-form/my-account-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyAccountFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MainRegistryForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RegistryFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RegistryForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storyForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/my-account-form/my-account-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/registry-form/registry-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistryFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/registry-form/registry-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/registry-form/registry-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/registry-form/registry-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MainRegistryForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/registry-form/registry-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RegistryFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/registry-form/registry-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RegistryForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/registry-form/registry-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storyForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/registry-form/registry-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/replace-pass-form/replace-pass-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReplacePassFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storyForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SubscribedErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/replace-pass-form/replace-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPassFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AdComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IdentifyFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IdentifySuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPassForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerificationFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerificationForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/reset-pass-form/reset-pass-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "verificationSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/verification-form/verification-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VerificationFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/verification-form/verification-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/verification-form/verification-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/verification-form/verification-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storyForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/verification-form/verification-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/verification-form/verification-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerificationFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/verification-form/verification-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerificationForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/forms/verification-form/verification-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "verificationSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/headers/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/headers/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/headers/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/headers/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountInputComponent",
                "coveragePercent": 12,
                "coverageCount": "2/16",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidationForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccountInput",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Email",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NewPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Password",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Phone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/account-input/account-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Username",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/checkbox-input/checkbox-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxInputComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/checkbox-input/checkbox-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.component.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeInputComponentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.component.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CodeInputComponentConfigToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.component.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultComponentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeInputComponent",
                "coveragePercent": 4,
                "coverageCount": "2/49",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GenericEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LengthFive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LengthSeven",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LengthSix",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/code-input/code-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigurationInputComponent",
                "coveragePercent": 10,
                "coverageCount": "2/20",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidationForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigurationInput",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DdlAuto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PassExpDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Phone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PinCodeLength",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PreviousAlertPassExpDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/configuration-input/configuration-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/digitcode-input/digitcode-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DigitcodeInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/digitcode-input/digitcode-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/digitcode-input/digitcode-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidationForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/digitcode-input/digitcode-input.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DigitcodeInput",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/digitcode-input/digitcode-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryInputComponent",
                "coveragePercent": 12,
                "coverageCount": "2/16",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidationForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoryInput",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Email",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NewPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Password",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Phone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/inputs/input/story-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Username",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pages/background1/background1Component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Background1Component",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/stories/pages/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/pass-strength/pass-strength.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PassStrengthComponent",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "src/stories/pass-strength/pass-strength.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pass-strength/pass-strength.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pass-strength/pass-strength.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/spinners/spinner1/spinner1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Spinner1Component",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/stories/spinners/spinner1/spinner1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/spinners/spinner1/spinner1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/spinners/spinner1/spinner1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/spinners/spinner1/spinner1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/spinners/spinner1/spinner1.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}